// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingGoodsClient is the client API for CloudHashingGoods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingGoodsClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	CreateVendorLocation(ctx context.Context, in *CreateVendorLocationRequest, opts ...grpc.CallOption) (*CreateVendorLocationResponse, error)
	UpdateVendorLocation(ctx context.Context, in *UpdateVendorLocationRequest, opts ...grpc.CallOption) (*UpdateVendorLocationResponse, error)
	GetVendorLocations(ctx context.Context, in *GetVendorLocationsRequest, opts ...grpc.CallOption) (*GetVendorLocationsResponse, error)
	CreateTargetArea(ctx context.Context, in *CreateTargetAreaRequest, opts ...grpc.CallOption) (*CreateTargetAreaResponse, error)
	UpdateTargetArea(ctx context.Context, in *UpdateTargetAreaRequest, opts ...grpc.CallOption) (*UpdateTargetAreaResponse, error)
	GetTargetAreas(ctx context.Context, in *GetTargetAreasRequest, opts ...grpc.CallOption) (*GetTargetAreasResponse, error)
	CreateDeviceInfo(ctx context.Context, in *CreateDeviceInfoRequest, opts ...grpc.CallOption) (*CreateDeviceInfoResponse, error)
	UpdateDeviceInfo(ctx context.Context, in *UpdateDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateDeviceInfoResponse, error)
	GetDeviceInfos(ctx context.Context, in *GetDeviceInfosRequest, opts ...grpc.CallOption) (*GetDeviceInfosResponse, error)
	CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error)
	UpdateGood(ctx context.Context, in *UpdateGoodRequest, opts ...grpc.CallOption) (*UpdateGoodResponse, error)
	// Can only accessed by APP administrator and platform administrator
	GetAllGoods(ctx context.Context, in *GetAllGoodsRequest, opts ...grpc.CallOption) (*GetAllGoodsResponse, error)
	// Accessed by APP user
	GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error)
	SetAppGoodPrice(ctx context.Context, in *SetAppGoodPriceRequest, opts ...grpc.CallOption) (*SetAppGoodPriceResponse, error)
	AuthorizeAppGood(ctx context.Context, in *AuthorizeAppGoodRequest, opts ...grpc.CallOption) (*AuthorizeAppGoodResponse, error)
	UnauthorizeAppGood(ctx context.Context, in *UnauthorizeAppGoodRequest, opts ...grpc.CallOption) (*UnauthorizeAppGoodResponse, error)
	AuthorizeAppTargetArea(ctx context.Context, in *AuthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnauthorizeAppTargetArea(ctx context.Context, in *UnauthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthorizeAppGoodTargetArea(ctx context.Context, in *AuthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnauthorizeAppGoodTargetArea(ctx context.Context, in *UnauthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudHashingGoodsClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingGoodsClient(cc grpc.ClientConnInterface) CloudHashingGoodsClient {
	return &cloudHashingGoodsClient{cc}
}

func (c *cloudHashingGoodsClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateVendorLocation(ctx context.Context, in *CreateVendorLocationRequest, opts ...grpc.CallOption) (*CreateVendorLocationResponse, error) {
	out := new(CreateVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateVendorLocation(ctx context.Context, in *UpdateVendorLocationRequest, opts ...grpc.CallOption) (*UpdateVendorLocationResponse, error) {
	out := new(UpdateVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetVendorLocations(ctx context.Context, in *GetVendorLocationsRequest, opts ...grpc.CallOption) (*GetVendorLocationsResponse, error) {
	out := new(GetVendorLocationsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetVendorLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateTargetArea(ctx context.Context, in *CreateTargetAreaRequest, opts ...grpc.CallOption) (*CreateTargetAreaResponse, error) {
	out := new(CreateTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateTargetArea(ctx context.Context, in *UpdateTargetAreaRequest, opts ...grpc.CallOption) (*UpdateTargetAreaResponse, error) {
	out := new(UpdateTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetTargetAreas(ctx context.Context, in *GetTargetAreasRequest, opts ...grpc.CallOption) (*GetTargetAreasResponse, error) {
	out := new(GetTargetAreasResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetTargetAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateDeviceInfo(ctx context.Context, in *CreateDeviceInfoRequest, opts ...grpc.CallOption) (*CreateDeviceInfoResponse, error) {
	out := new(CreateDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateDeviceInfo(ctx context.Context, in *UpdateDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateDeviceInfoResponse, error) {
	out := new(UpdateDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetDeviceInfos(ctx context.Context, in *GetDeviceInfosRequest, opts ...grpc.CallOption) (*GetDeviceInfosResponse, error) {
	out := new(GetDeviceInfosResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetDeviceInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error) {
	out := new(CreateGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateGood(ctx context.Context, in *UpdateGoodRequest, opts ...grpc.CallOption) (*UpdateGoodResponse, error) {
	out := new(UpdateGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetAllGoods(ctx context.Context, in *GetAllGoodsRequest, opts ...grpc.CallOption) (*GetAllGoodsResponse, error) {
	out := new(GetAllGoodsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetAllGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error) {
	out := new(GetGoodsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) SetAppGoodPrice(ctx context.Context, in *SetAppGoodPriceRequest, opts ...grpc.CallOption) (*SetAppGoodPriceResponse, error) {
	out := new(SetAppGoodPriceResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/SetAppGoodPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) AuthorizeAppGood(ctx context.Context, in *AuthorizeAppGoodRequest, opts ...grpc.CallOption) (*AuthorizeAppGoodResponse, error) {
	out := new(AuthorizeAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UnauthorizeAppGood(ctx context.Context, in *UnauthorizeAppGoodRequest, opts ...grpc.CallOption) (*UnauthorizeAppGoodResponse, error) {
	out := new(UnauthorizeAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) AuthorizeAppTargetArea(ctx context.Context, in *AuthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UnauthorizeAppTargetArea(ctx context.Context, in *UnauthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) AuthorizeAppGoodTargetArea(ctx context.Context, in *AuthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGoodTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UnauthorizeAppGoodTargetArea(ctx context.Context, in *UnauthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGoodTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingGoodsServer is the server API for CloudHashingGoods service.
// All implementations must embed UnimplementedCloudHashingGoodsServer
// for forward compatibility
type CloudHashingGoodsServer interface {
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	CreateVendorLocation(context.Context, *CreateVendorLocationRequest) (*CreateVendorLocationResponse, error)
	UpdateVendorLocation(context.Context, *UpdateVendorLocationRequest) (*UpdateVendorLocationResponse, error)
	GetVendorLocations(context.Context, *GetVendorLocationsRequest) (*GetVendorLocationsResponse, error)
	CreateTargetArea(context.Context, *CreateTargetAreaRequest) (*CreateTargetAreaResponse, error)
	UpdateTargetArea(context.Context, *UpdateTargetAreaRequest) (*UpdateTargetAreaResponse, error)
	GetTargetAreas(context.Context, *GetTargetAreasRequest) (*GetTargetAreasResponse, error)
	CreateDeviceInfo(context.Context, *CreateDeviceInfoRequest) (*CreateDeviceInfoResponse, error)
	UpdateDeviceInfo(context.Context, *UpdateDeviceInfoRequest) (*UpdateDeviceInfoResponse, error)
	GetDeviceInfos(context.Context, *GetDeviceInfosRequest) (*GetDeviceInfosResponse, error)
	CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error)
	UpdateGood(context.Context, *UpdateGoodRequest) (*UpdateGoodResponse, error)
	// Can only accessed by APP administrator and platform administrator
	GetAllGoods(context.Context, *GetAllGoodsRequest) (*GetAllGoodsResponse, error)
	// Accessed by APP user
	GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error)
	SetAppGoodPrice(context.Context, *SetAppGoodPriceRequest) (*SetAppGoodPriceResponse, error)
	AuthorizeAppGood(context.Context, *AuthorizeAppGoodRequest) (*AuthorizeAppGoodResponse, error)
	UnauthorizeAppGood(context.Context, *UnauthorizeAppGoodRequest) (*UnauthorizeAppGoodResponse, error)
	AuthorizeAppTargetArea(context.Context, *AuthorizeAppTargetAreaRequest) (*emptypb.Empty, error)
	UnauthorizeAppTargetArea(context.Context, *UnauthorizeAppTargetAreaRequest) (*emptypb.Empty, error)
	AuthorizeAppGoodTargetArea(context.Context, *AuthorizeAppGoodTargetAreaRequest) (*emptypb.Empty, error)
	UnauthorizeAppGoodTargetArea(context.Context, *UnauthorizeAppGoodTargetAreaRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudHashingGoodsServer()
}

// UnimplementedCloudHashingGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingGoodsServer struct {
}

func (UnimplementedCloudHashingGoodsServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateVendorLocation(context.Context, *CreateVendorLocationRequest) (*CreateVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendorLocation not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateVendorLocation(context.Context, *UpdateVendorLocationRequest) (*UpdateVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVendorLocation not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetVendorLocations(context.Context, *GetVendorLocationsRequest) (*GetVendorLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorLocations not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateTargetArea(context.Context, *CreateTargetAreaRequest) (*CreateTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateTargetArea(context.Context, *UpdateTargetAreaRequest) (*UpdateTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetTargetAreas(context.Context, *GetTargetAreasRequest) (*GetTargetAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetAreas not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateDeviceInfo(context.Context, *CreateDeviceInfoRequest) (*CreateDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateDeviceInfo(context.Context, *UpdateDeviceInfoRequest) (*UpdateDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetDeviceInfos(context.Context, *GetDeviceInfosRequest) (*GetDeviceInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfos not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateGood(context.Context, *UpdateGoodRequest) (*UpdateGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetAllGoods(context.Context, *GetAllGoodsRequest) (*GetAllGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGoods not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoods not implemented")
}
func (UnimplementedCloudHashingGoodsServer) SetAppGoodPrice(context.Context, *SetAppGoodPriceRequest) (*SetAppGoodPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppGoodPrice not implemented")
}
func (UnimplementedCloudHashingGoodsServer) AuthorizeAppGood(context.Context, *AuthorizeAppGoodRequest) (*AuthorizeAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UnauthorizeAppGood(context.Context, *UnauthorizeAppGoodRequest) (*UnauthorizeAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) AuthorizeAppTargetArea(context.Context, *AuthorizeAppTargetAreaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAppTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UnauthorizeAppTargetArea(context.Context, *UnauthorizeAppTargetAreaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeAppTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) AuthorizeAppGoodTargetArea(context.Context, *AuthorizeAppGoodTargetAreaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAppGoodTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UnauthorizeAppGoodTargetArea(context.Context, *UnauthorizeAppGoodTargetAreaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeAppGoodTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) mustEmbedUnimplementedCloudHashingGoodsServer() {}

// UnsafeCloudHashingGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingGoodsServer will
// result in compilation errors.
type UnsafeCloudHashingGoodsServer interface {
	mustEmbedUnimplementedCloudHashingGoodsServer()
}

func RegisterCloudHashingGoodsServer(s grpc.ServiceRegistrar, srv CloudHashingGoodsServer) {
	s.RegisterService(&CloudHashingGoods_ServiceDesc, srv)
}

func _CloudHashingGoods_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateVendorLocation(ctx, req.(*CreateVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateVendorLocation(ctx, req.(*UpdateVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetVendorLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetVendorLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetVendorLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetVendorLocations(ctx, req.(*GetVendorLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateTargetArea(ctx, req.(*CreateTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateTargetArea(ctx, req.(*UpdateTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetTargetAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetTargetAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetTargetAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetTargetAreas(ctx, req.(*GetTargetAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateDeviceInfo(ctx, req.(*CreateDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateDeviceInfo(ctx, req.(*UpdateDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetDeviceInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetDeviceInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetDeviceInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetDeviceInfos(ctx, req.(*GetDeviceInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateGood(ctx, req.(*CreateGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateGood(ctx, req.(*UpdateGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetAllGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetAllGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetAllGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetAllGoods(ctx, req.(*GetAllGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoods(ctx, req.(*GetGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_SetAppGoodPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppGoodPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).SetAppGoodPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/SetAppGoodPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).SetAppGoodPrice(ctx, req.(*SetAppGoodPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_AuthorizeAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGood(ctx, req.(*AuthorizeAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UnauthorizeAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizeAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGood(ctx, req.(*UnauthorizeAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_AuthorizeAppTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAppTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).AuthorizeAppTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).AuthorizeAppTargetArea(ctx, req.(*AuthorizeAppTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UnauthorizeAppTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizeAppTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppTargetArea(ctx, req.(*UnauthorizeAppTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_AuthorizeAppGoodTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAppGoodTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGoodTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGoodTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGoodTargetArea(ctx, req.(*AuthorizeAppGoodTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UnauthorizeAppGoodTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizeAppGoodTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGoodTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGoodTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGoodTargetArea(ctx, req.(*UnauthorizeAppGoodTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingGoods_ServiceDesc is the grpc.ServiceDesc for CloudHashingGoods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingGoods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.goods.v1.CloudHashingGoods",
	HandlerType: (*CloudHashingGoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingGoods_Version_Handler,
		},
		{
			MethodName: "CreateVendorLocation",
			Handler:    _CloudHashingGoods_CreateVendorLocation_Handler,
		},
		{
			MethodName: "UpdateVendorLocation",
			Handler:    _CloudHashingGoods_UpdateVendorLocation_Handler,
		},
		{
			MethodName: "GetVendorLocations",
			Handler:    _CloudHashingGoods_GetVendorLocations_Handler,
		},
		{
			MethodName: "CreateTargetArea",
			Handler:    _CloudHashingGoods_CreateTargetArea_Handler,
		},
		{
			MethodName: "UpdateTargetArea",
			Handler:    _CloudHashingGoods_UpdateTargetArea_Handler,
		},
		{
			MethodName: "GetTargetAreas",
			Handler:    _CloudHashingGoods_GetTargetAreas_Handler,
		},
		{
			MethodName: "CreateDeviceInfo",
			Handler:    _CloudHashingGoods_CreateDeviceInfo_Handler,
		},
		{
			MethodName: "UpdateDeviceInfo",
			Handler:    _CloudHashingGoods_UpdateDeviceInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfos",
			Handler:    _CloudHashingGoods_GetDeviceInfos_Handler,
		},
		{
			MethodName: "CreateGood",
			Handler:    _CloudHashingGoods_CreateGood_Handler,
		},
		{
			MethodName: "UpdateGood",
			Handler:    _CloudHashingGoods_UpdateGood_Handler,
		},
		{
			MethodName: "GetAllGoods",
			Handler:    _CloudHashingGoods_GetAllGoods_Handler,
		},
		{
			MethodName: "GetGoods",
			Handler:    _CloudHashingGoods_GetGoods_Handler,
		},
		{
			MethodName: "SetAppGoodPrice",
			Handler:    _CloudHashingGoods_SetAppGoodPrice_Handler,
		},
		{
			MethodName: "AuthorizeAppGood",
			Handler:    _CloudHashingGoods_AuthorizeAppGood_Handler,
		},
		{
			MethodName: "UnauthorizeAppGood",
			Handler:    _CloudHashingGoods_UnauthorizeAppGood_Handler,
		},
		{
			MethodName: "AuthorizeAppTargetArea",
			Handler:    _CloudHashingGoods_AuthorizeAppTargetArea_Handler,
		},
		{
			MethodName: "UnauthorizeAppTargetArea",
			Handler:    _CloudHashingGoods_UnauthorizeAppTargetArea_Handler,
		},
		{
			MethodName: "AuthorizeAppGoodTargetArea",
			Handler:    _CloudHashingGoods_AuthorizeAppGoodTargetArea_Handler,
		},
		{
			MethodName: "UnauthorizeAppGoodTargetArea",
			Handler:    _CloudHashingGoods_UnauthorizeAppGoodTargetArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-goods.proto",
}
