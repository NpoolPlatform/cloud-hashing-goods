// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cloud-hashing-goods.proto

package npool

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex int32 `protobuf:"varint,100,opt,name=PageIndex,proto3" json:"PageIndex,omitempty"`
	PageSize  int32 `protobuf:"varint,101,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{0}
}

func (x *PageInfo) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *PageInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Request body and response
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type VendorLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,300,opt,name=ID,proto3" json:"ID,omitempty"`
	Country  string `protobuf:"bytes,301,opt,name=Country,proto3" json:"Country,omitempty"`
	Province string `protobuf:"bytes,302,opt,name=Province,proto3" json:"Province,omitempty"`
	City     string `protobuf:"bytes,303,opt,name=City,proto3" json:"City,omitempty"`
	Address  string `protobuf:"bytes,304,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *VendorLocationInfo) Reset() {
	*x = VendorLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLocationInfo) ProtoMessage() {}

func (x *VendorLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLocationInfo.ProtoReflect.Descriptor instead.
func (*VendorLocationInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{2}
}

func (x *VendorLocationInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VendorLocationInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VendorLocationInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *VendorLocationInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *VendorLocationInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateVendorLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VendorLocationInfo `protobuf:"bytes,400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateVendorLocationRequest) Reset() {
	*x = CreateVendorLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVendorLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVendorLocationRequest) ProtoMessage() {}

func (x *CreateVendorLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVendorLocationRequest.ProtoReflect.Descriptor instead.
func (*CreateVendorLocationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{3}
}

func (x *CreateVendorLocationRequest) GetInfo() *VendorLocationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateVendorLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VendorLocationInfo `protobuf:"bytes,500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateVendorLocationResponse) Reset() {
	*x = CreateVendorLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVendorLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVendorLocationResponse) ProtoMessage() {}

func (x *CreateVendorLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVendorLocationResponse.ProtoReflect.Descriptor instead.
func (*CreateVendorLocationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{4}
}

func (x *CreateVendorLocationResponse) GetInfo() *VendorLocationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetVendorLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,510,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetVendorLocationRequest) Reset() {
	*x = GetVendorLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorLocationRequest) ProtoMessage() {}

func (x *GetVendorLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorLocationRequest.ProtoReflect.Descriptor instead.
func (*GetVendorLocationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{5}
}

func (x *GetVendorLocationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetVendorLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VendorLocationInfo `protobuf:"bytes,520,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetVendorLocationResponse) Reset() {
	*x = GetVendorLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorLocationResponse) ProtoMessage() {}

func (x *GetVendorLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorLocationResponse.ProtoReflect.Descriptor instead.
func (*GetVendorLocationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{6}
}

func (x *GetVendorLocationResponse) GetInfo() *VendorLocationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateVendorLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VendorLocationInfo `protobuf:"bytes,600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateVendorLocationRequest) Reset() {
	*x = UpdateVendorLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVendorLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVendorLocationRequest) ProtoMessage() {}

func (x *UpdateVendorLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVendorLocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateVendorLocationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateVendorLocationRequest) GetInfo() *VendorLocationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateVendorLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VendorLocationInfo `protobuf:"bytes,700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateVendorLocationResponse) Reset() {
	*x = UpdateVendorLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVendorLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVendorLocationResponse) ProtoMessage() {}

func (x *UpdateVendorLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVendorLocationResponse.ProtoReflect.Descriptor instead.
func (*UpdateVendorLocationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateVendorLocationResponse) GetInfo() *VendorLocationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteVendorLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,710,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteVendorLocationRequest) Reset() {
	*x = DeleteVendorLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVendorLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVendorLocationRequest) ProtoMessage() {}

func (x *DeleteVendorLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVendorLocationRequest.ProtoReflect.Descriptor instead.
func (*DeleteVendorLocationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteVendorLocationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteVendorLocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *VendorLocationInfo `protobuf:"bytes,720,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteVendorLocationResponse) Reset() {
	*x = DeleteVendorLocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVendorLocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVendorLocationResponse) ProtoMessage() {}

func (x *DeleteVendorLocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVendorLocationResponse.ProtoReflect.Descriptor instead.
func (*DeleteVendorLocationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteVendorLocationResponse) GetInfo() *VendorLocationInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetVendorLocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *PageInfo `protobuf:"bytes,800,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetVendorLocationsRequest) Reset() {
	*x = GetVendorLocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorLocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorLocationsRequest) ProtoMessage() {}

func (x *GetVendorLocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorLocationsRequest.ProtoReflect.Descriptor instead.
func (*GetVendorLocationsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{11}
}

func (x *GetVendorLocationsRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetVendorLocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*VendorLocationInfo `protobuf:"bytes,900,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32                 `protobuf:"varint,901,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetVendorLocationsResponse) Reset() {
	*x = GetVendorLocationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorLocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorLocationsResponse) ProtoMessage() {}

func (x *GetVendorLocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorLocationsResponse.ProtoReflect.Descriptor instead.
func (*GetVendorLocationsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{12}
}

func (x *GetVendorLocationsResponse) GetInfos() []*VendorLocationInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetVendorLocationsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TargetAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1000,opt,name=ID,proto3" json:"ID,omitempty"`
	Continent string `protobuf:"bytes,1001,opt,name=Continent,proto3" json:"Continent,omitempty"`
	Country   string `protobuf:"bytes,1002,opt,name=Country,proto3" json:"Country,omitempty"`
}

func (x *TargetAreaInfo) Reset() {
	*x = TargetAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetAreaInfo) ProtoMessage() {}

func (x *TargetAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetAreaInfo.ProtoReflect.Descriptor instead.
func (*TargetAreaInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{13}
}

func (x *TargetAreaInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TargetAreaInfo) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *TargetAreaInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type CreateTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTargetAreaRequest) Reset() {
	*x = CreateTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTargetAreaRequest) ProtoMessage() {}

func (x *CreateTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*CreateTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{14}
}

func (x *CreateTargetAreaRequest) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTargetAreaResponse) Reset() {
	*x = CreateTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTargetAreaResponse) ProtoMessage() {}

func (x *CreateTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*CreateTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTargetAreaResponse) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1210,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTargetAreaRequest) Reset() {
	*x = GetTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetAreaRequest) ProtoMessage() {}

func (x *GetTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*GetTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{16}
}

func (x *GetTargetAreaRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1220,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTargetAreaResponse) Reset() {
	*x = GetTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetAreaResponse) ProtoMessage() {}

func (x *GetTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*GetTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{17}
}

func (x *GetTargetAreaResponse) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTargetAreaRequest) Reset() {
	*x = UpdateTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTargetAreaRequest) ProtoMessage() {}

func (x *UpdateTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*UpdateTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTargetAreaRequest) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTargetAreaResponse) Reset() {
	*x = UpdateTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTargetAreaResponse) ProtoMessage() {}

func (x *UpdateTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*UpdateTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTargetAreaResponse) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1410,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTargetAreaRequest) Reset() {
	*x = DeleteTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetAreaRequest) ProtoMessage() {}

func (x *DeleteTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*DeleteTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTargetAreaRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1420,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTargetAreaResponse) Reset() {
	*x = DeleteTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetAreaResponse) ProtoMessage() {}

func (x *DeleteTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*DeleteTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteTargetAreaResponse) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteTargetAreaByContinentCountryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continent string `protobuf:"bytes,1430,opt,name=Continent,proto3" json:"Continent,omitempty"`
	Country   string `protobuf:"bytes,1431,opt,name=Country,proto3" json:"Country,omitempty"`
}

func (x *DeleteTargetAreaByContinentCountryRequest) Reset() {
	*x = DeleteTargetAreaByContinentCountryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetAreaByContinentCountryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetAreaByContinentCountryRequest) ProtoMessage() {}

func (x *DeleteTargetAreaByContinentCountryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetAreaByContinentCountryRequest.ProtoReflect.Descriptor instead.
func (*DeleteTargetAreaByContinentCountryRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteTargetAreaByContinentCountryRequest) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *DeleteTargetAreaByContinentCountryRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type DeleteTargetAreaByContinentCountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TargetAreaInfo `protobuf:"bytes,1440,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTargetAreaByContinentCountryResponse) Reset() {
	*x = DeleteTargetAreaByContinentCountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTargetAreaByContinentCountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTargetAreaByContinentCountryResponse) ProtoMessage() {}

func (x *DeleteTargetAreaByContinentCountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTargetAreaByContinentCountryResponse.ProtoReflect.Descriptor instead.
func (*DeleteTargetAreaByContinentCountryResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTargetAreaByContinentCountryResponse) GetInfo() *TargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTargetAreasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *PageInfo `protobuf:"bytes,1500,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetTargetAreasRequest) Reset() {
	*x = GetTargetAreasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetAreasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetAreasRequest) ProtoMessage() {}

func (x *GetTargetAreasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetAreasRequest.ProtoReflect.Descriptor instead.
func (*GetTargetAreasRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{24}
}

func (x *GetTargetAreasRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetTargetAreasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TargetAreaInfo `protobuf:"bytes,1600,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32             `protobuf:"varint,1501,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTargetAreasResponse) Reset() {
	*x = GetTargetAreasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTargetAreasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTargetAreasResponse) ProtoMessage() {}

func (x *GetTargetAreasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTargetAreasResponse.ProtoReflect.Descriptor instead.
func (*GetTargetAreasResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{25}
}

func (x *GetTargetAreasResponse) GetInfos() []*TargetAreaInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTargetAreasResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1700,opt,name=ID,proto3" json:"ID,omitempty"`
	Type            string `protobuf:"bytes,1701,opt,name=Type,proto3" json:"Type,omitempty"`
	Manufacturer    string `protobuf:"bytes,1702,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty"`
	PowerComsuption int32  `protobuf:"varint,1703,opt,name=PowerComsuption,proto3" json:"PowerComsuption,omitempty"`
	ShipmentAt      int32  `protobuf:"varint,1704,opt,name=ShipmentAt,proto3" json:"ShipmentAt,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{26}
}

func (x *DeviceInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeviceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetPowerComsuption() int32 {
	if x != nil {
		return x.PowerComsuption
	}
	return 0
}

func (x *DeviceInfo) GetShipmentAt() int32 {
	if x != nil {
		return x.ShipmentAt
	}
	return 0
}

type CreateDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,1800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDeviceInfoRequest) Reset() {
	*x = CreateDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceInfoRequest) ProtoMessage() {}

func (x *CreateDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{27}
}

func (x *CreateDeviceInfoRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,1900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDeviceInfoResponse) Reset() {
	*x = CreateDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceInfoResponse) ProtoMessage() {}

func (x *CreateDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{28}
}

func (x *CreateDeviceInfoResponse) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,2000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDeviceInfoRequest) Reset() {
	*x = UpdateDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceInfoRequest) ProtoMessage() {}

func (x *UpdateDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateDeviceInfoRequest) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,2100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDeviceInfoResponse) Reset() {
	*x = UpdateDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceInfoResponse) ProtoMessage() {}

func (x *UpdateDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateDeviceInfoResponse) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2110,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetDeviceInfoRequest) Reset() {
	*x = GetDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoRequest) ProtoMessage() {}

func (x *GetDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{31}
}

func (x *GetDeviceInfoRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,2120,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDeviceInfoResponse) Reset() {
	*x = GetDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfoResponse) ProtoMessage() {}

func (x *GetDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{32}
}

func (x *GetDeviceInfoResponse) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2130,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteDeviceInfoRequest) Reset() {
	*x = DeleteDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceInfoRequest) ProtoMessage() {}

func (x *DeleteDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteDeviceInfoRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DeviceInfo `protobuf:"bytes,2140,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteDeviceInfoResponse) Reset() {
	*x = DeleteDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceInfoResponse) ProtoMessage() {}

func (x *DeleteDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteDeviceInfoResponse) GetInfo() *DeviceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDeviceInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *PageInfo `protobuf:"bytes,2200,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetDeviceInfosRequest) Reset() {
	*x = GetDeviceInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfosRequest) ProtoMessage() {}

func (x *GetDeviceInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfosRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceInfosRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{35}
}

func (x *GetDeviceInfosRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetDeviceInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*DeviceInfo `protobuf:"bytes,2300,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32         `protobuf:"varint,2301,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetDeviceInfosResponse) Reset() {
	*x = GetDeviceInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceInfosResponse) ProtoMessage() {}

func (x *GetDeviceInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceInfosResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceInfosResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{36}
}

func (x *GetDeviceInfosResponse) GetInfos() []*DeviceInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetDeviceInfosResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string   `protobuf:"bytes,2400,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfoID       string   `protobuf:"bytes,2401,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty"`
	SeparateFee        bool     `protobuf:"varint,2403,opt,name=SeparateFee,proto3" json:"SeparateFee,omitempty"`
	UnitPower          int32    `protobuf:"varint,2404,opt,name=UnitPower,proto3" json:"UnitPower,omitempty"`
	DurationDays       int32    `protobuf:"varint,2405,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinInfoID         string   `protobuf:"bytes,2406,opt,name=CoinInfoID,proto3" json:"CoinInfoID,omitempty"`
	Actuals            bool     `protobuf:"varint,2407,opt,name=Actuals,proto3" json:"Actuals,omitempty"`
	DeliveryAt         int32    `protobuf:"varint,2408,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	InheritFromGoodID  string   `protobuf:"bytes,2409,opt,name=InheritFromGoodID,proto3" json:"InheritFromGoodID,omitempty"`
	VendorLocationID   string   `protobuf:"bytes,2410,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	Price              float64  `protobuf:"fixed64,2411,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType        string   `protobuf:"bytes,2412,opt,name=BenefitType,proto3" json:"BenefitType,omitempty"`
	Classic            bool     `protobuf:"varint,2413,opt,name=Classic,proto3" json:"Classic,omitempty"`
	SupportCoinTypeIDs []string `protobuf:"bytes,2414,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	Total              int32    `protobuf:"varint,2415,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GoodInfo) Reset() {
	*x = GoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodInfo) ProtoMessage() {}

func (x *GoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodInfo.ProtoReflect.Descriptor instead.
func (*GoodInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{37}
}

func (x *GoodInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodInfo) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *GoodInfo) GetSeparateFee() bool {
	if x != nil {
		return x.SeparateFee
	}
	return false
}

func (x *GoodInfo) GetUnitPower() int32 {
	if x != nil {
		return x.UnitPower
	}
	return 0
}

func (x *GoodInfo) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *GoodInfo) GetCoinInfoID() string {
	if x != nil {
		return x.CoinInfoID
	}
	return ""
}

func (x *GoodInfo) GetActuals() bool {
	if x != nil {
		return x.Actuals
	}
	return false
}

func (x *GoodInfo) GetDeliveryAt() int32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *GoodInfo) GetInheritFromGoodID() string {
	if x != nil {
		return x.InheritFromGoodID
	}
	return ""
}

func (x *GoodInfo) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *GoodInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodInfo) GetBenefitType() string {
	if x != nil {
		return x.BenefitType
	}
	return ""
}

func (x *GoodInfo) GetClassic() bool {
	if x != nil {
		return x.Classic
	}
	return false
}

func (x *GoodInfo) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *GoodInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodInfo `protobuf:"bytes,2500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodRequest) Reset() {
	*x = CreateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodRequest) ProtoMessage() {}

func (x *CreateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{38}
}

func (x *CreateGoodRequest) GetInfo() *GoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodInfo `protobuf:"bytes,2600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodResponse) Reset() {
	*x = CreateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodResponse) ProtoMessage() {}

func (x *CreateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{39}
}

func (x *CreateGoodResponse) GetInfo() *GoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodInfo `protobuf:"bytes,2700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodRequest) Reset() {
	*x = UpdateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodRequest) ProtoMessage() {}

func (x *UpdateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateGoodRequest) GetInfo() *GoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodInfo `protobuf:"bytes,2800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodResponse) Reset() {
	*x = UpdateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodResponse) ProtoMessage() {}

func (x *UpdateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateGoodResponse) GetInfo() *GoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2900,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetGoodRequest) Reset() {
	*x = GetGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodRequest) ProtoMessage() {}

func (x *GetGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodRequest.ProtoReflect.Descriptor instead.
func (*GetGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{42}
}

func (x *GetGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodInfo `protobuf:"bytes,3000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodResponse) Reset() {
	*x = GetGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodResponse) ProtoMessage() {}

func (x *GetGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodResponse.ProtoReflect.Descriptor instead.
func (*GetGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{43}
}

func (x *GetGoodResponse) GetInfo() *GoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GoodDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string              `protobuf:"bytes,2400,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfo         *DeviceInfo         `protobuf:"bytes,2401,opt,name=DeviceInfo,proto3" json:"DeviceInfo,omitempty"`
	SeparateFee        bool                `protobuf:"varint,2403,opt,name=SeparateFee,proto3" json:"SeparateFee,omitempty"`
	UnitPower          int32               `protobuf:"varint,2404,opt,name=UnitPower,proto3" json:"UnitPower,omitempty"`
	DurationDays       int32               `protobuf:"varint,2405,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinInfoID         string              `protobuf:"bytes,2406,opt,name=CoinInfoID,proto3" json:"CoinInfoID,omitempty"`
	Actuals            bool                `protobuf:"varint,2407,opt,name=Actuals,proto3" json:"Actuals,omitempty"`
	DeliveryAt         int32               `protobuf:"varint,2408,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	InheritFromGood    *GoodInfo           `protobuf:"bytes,2409,opt,name=InheritFromGood,proto3" json:"InheritFromGood,omitempty"`
	VendorLocation     *VendorLocationInfo `protobuf:"bytes,2410,opt,name=VendorLocation,proto3" json:"VendorLocation,omitempty"`
	Price              float64             `protobuf:"fixed64,2411,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType        string              `protobuf:"bytes,2412,opt,name=BenefitType,proto3" json:"BenefitType,omitempty"`
	Classic            bool                `protobuf:"varint,2413,opt,name=Classic,proto3" json:"Classic,omitempty"`
	SupportCoinTypeIDs []string            `protobuf:"bytes,2414,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	Total              int32               `protobuf:"varint,2415,opt,name=Total,proto3" json:"Total,omitempty"`
	Extra              *GoodExtraInfo      `protobuf:"bytes,2416,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (x *GoodDetail) Reset() {
	*x = GoodDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodDetail) ProtoMessage() {}

func (x *GoodDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodDetail.ProtoReflect.Descriptor instead.
func (*GoodDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{44}
}

func (x *GoodDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodDetail) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *GoodDetail) GetSeparateFee() bool {
	if x != nil {
		return x.SeparateFee
	}
	return false
}

func (x *GoodDetail) GetUnitPower() int32 {
	if x != nil {
		return x.UnitPower
	}
	return 0
}

func (x *GoodDetail) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *GoodDetail) GetCoinInfoID() string {
	if x != nil {
		return x.CoinInfoID
	}
	return ""
}

func (x *GoodDetail) GetActuals() bool {
	if x != nil {
		return x.Actuals
	}
	return false
}

func (x *GoodDetail) GetDeliveryAt() int32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *GoodDetail) GetInheritFromGood() *GoodInfo {
	if x != nil {
		return x.InheritFromGood
	}
	return nil
}

func (x *GoodDetail) GetVendorLocation() *VendorLocationInfo {
	if x != nil {
		return x.VendorLocation
	}
	return nil
}

func (x *GoodDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodDetail) GetBenefitType() string {
	if x != nil {
		return x.BenefitType
	}
	return ""
}

func (x *GoodDetail) GetClassic() bool {
	if x != nil {
		return x.Classic
	}
	return false
}

func (x *GoodDetail) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *GoodDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GoodDetail) GetExtra() *GoodExtraInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetGoodDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,3200,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetGoodDetailRequest) Reset() {
	*x = GetGoodDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodDetailRequest) ProtoMessage() {}

func (x *GetGoodDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodDetailRequest.ProtoReflect.Descriptor instead.
func (*GetGoodDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{45}
}

func (x *GetGoodDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetGoodDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *GoodDetail `protobuf:"bytes,3210,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *GetGoodDetailResponse) Reset() {
	*x = GetGoodDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodDetailResponse) ProtoMessage() {}

func (x *GetGoodDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodDetailResponse.ProtoReflect.Descriptor instead.
func (*GetGoodDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{46}
}

func (x *GetGoodDetailResponse) GetDetail() *GoodDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetGoodsDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *PageInfo `protobuf:"bytes,3211,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetGoodsDetailRequest) Reset() {
	*x = GetGoodsDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDetailRequest) ProtoMessage() {}

func (x *GetGoodsDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDetailRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{47}
}

func (x *GetGoodsDetailRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetGoodsDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*GoodDetail `protobuf:"bytes,3212,rep,name=Details,proto3" json:"Details,omitempty"`
	Total   int32         `protobuf:"varint,3213,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsDetailResponse) Reset() {
	*x = GetGoodsDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDetailResponse) ProtoMessage() {}

func (x *GetGoodsDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDetailResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{48}
}

func (x *GetGoodsDetailResponse) GetDetails() []*GoodDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetGoodsDetailResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,3220,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteGoodRequest) Reset() {
	*x = DeleteGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodRequest) ProtoMessage() {}

func (x *DeleteGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodInfo `protobuf:"bytes,3230,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodResponse) Reset() {
	*x = DeleteGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodResponse) ProtoMessage() {}

func (x *DeleteGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteGoodResponse) GetInfo() *GoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *PageInfo `protobuf:"bytes,3240,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetGoodsRequest) Reset() {
	*x = GetGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsRequest) ProtoMessage() {}

func (x *GetGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{51}
}

func (x *GetGoodsRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodInfo `protobuf:"bytes,3300,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32       `protobuf:"varint,3301,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsResponse) Reset() {
	*x = GetGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsResponse) ProtoMessage() {}

func (x *GetGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{52}
}

func (x *GetGoodsResponse) GetInfos() []*GoodInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AppGoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string  `protobuf:"bytes,3310,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID            string  `protobuf:"bytes,3311,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID           string  `protobuf:"bytes,3312,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Price            float64 `protobuf:"fixed64,3313,opt,name=Price,proto3" json:"Price,omitempty"`
	GasPrice         float64 `protobuf:"fixed64,3314,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	Authorized       bool    `protobuf:"varint,3315,opt,name=Authorized,proto3" json:"Authorized,omitempty"`
	Online           bool    `protobuf:"varint,3316,opt,name=Online,proto3" json:"Online,omitempty"`
	InitAreaStrategy string  `protobuf:"bytes,3317,opt,name=InitAreaStrategy,proto3" json:"InitAreaStrategy,omitempty"`
}

func (x *AppGoodInfo) Reset() {
	*x = AppGoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGoodInfo) ProtoMessage() {}

func (x *AppGoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGoodInfo.ProtoReflect.Descriptor instead.
func (*AppGoodInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{53}
}

func (x *AppGoodInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AppGoodInfo) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppGoodInfo) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppGoodInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AppGoodInfo) GetGasPrice() float64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *AppGoodInfo) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

func (x *AppGoodInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *AppGoodInfo) GetInitAreaStrategy() string {
	if x != nil {
		return x.InitAreaStrategy
	}
	return ""
}

type SetAppGoodPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SetAppGoodPriceRequest) Reset() {
	*x = SetAppGoodPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAppGoodPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAppGoodPriceRequest) ProtoMessage() {}

func (x *SetAppGoodPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAppGoodPriceRequest.ProtoReflect.Descriptor instead.
func (*SetAppGoodPriceRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{54}
}

func (x *SetAppGoodPriceRequest) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type SetAppGoodPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SetAppGoodPriceResponse) Reset() {
	*x = SetAppGoodPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAppGoodPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAppGoodPriceResponse) ProtoMessage() {}

func (x *SetAppGoodPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAppGoodPriceResponse.ProtoReflect.Descriptor instead.
func (*SetAppGoodPriceResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{55}
}

func (x *SetAppGoodPriceResponse) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CheckAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3610,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CheckAppGoodRequest) Reset() {
	*x = CheckAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAppGoodRequest) ProtoMessage() {}

func (x *CheckAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAppGoodRequest.ProtoReflect.Descriptor instead.
func (*CheckAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{56}
}

func (x *CheckAppGoodRequest) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CheckAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3620,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CheckAppGoodResponse) Reset() {
	*x = CheckAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAppGoodResponse) ProtoMessage() {}

func (x *CheckAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAppGoodResponse.ProtoReflect.Descriptor instead.
func (*CheckAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{57}
}

func (x *CheckAppGoodResponse) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OnsaleAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3630,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *OnsaleAppGoodRequest) Reset() {
	*x = OnsaleAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnsaleAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnsaleAppGoodRequest) ProtoMessage() {}

func (x *OnsaleAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnsaleAppGoodRequest.ProtoReflect.Descriptor instead.
func (*OnsaleAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{58}
}

func (x *OnsaleAppGoodRequest) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OnsaleAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3640,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *OnsaleAppGoodResponse) Reset() {
	*x = OnsaleAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnsaleAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnsaleAppGoodResponse) ProtoMessage() {}

func (x *OnsaleAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnsaleAppGoodResponse.ProtoReflect.Descriptor instead.
func (*OnsaleAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{59}
}

func (x *OnsaleAppGoodResponse) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OffsaleAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3650,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *OffsaleAppGoodRequest) Reset() {
	*x = OffsaleAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsaleAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsaleAppGoodRequest) ProtoMessage() {}

func (x *OffsaleAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsaleAppGoodRequest.ProtoReflect.Descriptor instead.
func (*OffsaleAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{60}
}

func (x *OffsaleAppGoodRequest) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OffsaleAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3660,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *OffsaleAppGoodResponse) Reset() {
	*x = OffsaleAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsaleAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsaleAppGoodResponse) ProtoMessage() {}

func (x *OffsaleAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsaleAppGoodResponse.ProtoReflect.Descriptor instead.
func (*OffsaleAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{61}
}

func (x *OffsaleAppGoodResponse) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AuthorizeAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AuthorizeAppGoodRequest) Reset() {
	*x = AuthorizeAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAppGoodRequest) ProtoMessage() {}

func (x *AuthorizeAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAppGoodRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{62}
}

func (x *AuthorizeAppGoodRequest) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AuthorizeAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AuthorizeAppGoodResponse) Reset() {
	*x = AuthorizeAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAppGoodResponse) ProtoMessage() {}

func (x *AuthorizeAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAppGoodResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{63}
}

func (x *AuthorizeAppGoodResponse) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnauthorizeAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,3900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UnauthorizeAppGoodRequest) Reset() {
	*x = UnauthorizeAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizeAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizeAppGoodRequest) ProtoMessage() {}

func (x *UnauthorizeAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizeAppGoodRequest.ProtoReflect.Descriptor instead.
func (*UnauthorizeAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{64}
}

func (x *UnauthorizeAppGoodRequest) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnauthorizeAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodInfo `protobuf:"bytes,4000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UnauthorizeAppGoodResponse) Reset() {
	*x = UnauthorizeAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizeAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizeAppGoodResponse) ProtoMessage() {}

func (x *UnauthorizeAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizeAppGoodResponse.ProtoReflect.Descriptor instead.
func (*UnauthorizeAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{65}
}

func (x *UnauthorizeAppGoodResponse) GetInfo() *AppGoodInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AppTargetAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string `protobuf:"bytes,4010,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID        string `protobuf:"bytes,4011,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TargetAreaID string `protobuf:"bytes,4012,opt,name=TargetAreaID,proto3" json:"TargetAreaID,omitempty"`
}

func (x *AppTargetAreaInfo) Reset() {
	*x = AppTargetAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppTargetAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppTargetAreaInfo) ProtoMessage() {}

func (x *AppTargetAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppTargetAreaInfo.ProtoReflect.Descriptor instead.
func (*AppTargetAreaInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{66}
}

func (x *AppTargetAreaInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AppTargetAreaInfo) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppTargetAreaInfo) GetTargetAreaID() string {
	if x != nil {
		return x.TargetAreaID
	}
	return ""
}

type AuthorizeAppTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppTargetAreaInfo `protobuf:"bytes,4020,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AuthorizeAppTargetAreaRequest) Reset() {
	*x = AuthorizeAppTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAppTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAppTargetAreaRequest) ProtoMessage() {}

func (x *AuthorizeAppTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAppTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeAppTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{67}
}

func (x *AuthorizeAppTargetAreaRequest) GetInfo() *AppTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AuthorizeAppTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppTargetAreaInfo `protobuf:"bytes,4030,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AuthorizeAppTargetAreaResponse) Reset() {
	*x = AuthorizeAppTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAppTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAppTargetAreaResponse) ProtoMessage() {}

func (x *AuthorizeAppTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAppTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeAppTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{68}
}

func (x *AuthorizeAppTargetAreaResponse) GetInfo() *AppTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CheckAppTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppTargetAreaInfo `protobuf:"bytes,4040,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CheckAppTargetAreaRequest) Reset() {
	*x = CheckAppTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAppTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAppTargetAreaRequest) ProtoMessage() {}

func (x *CheckAppTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAppTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*CheckAppTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{69}
}

func (x *CheckAppTargetAreaRequest) GetInfo() *AppTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CheckAppTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *AppTargetAreaInfo `protobuf:"bytes,4050,opt,name=Info,proto3" json:"Info,omitempty"`
	Authorized bool               `protobuf:"varint,4051,opt,name=Authorized,proto3" json:"Authorized,omitempty"`
}

func (x *CheckAppTargetAreaResponse) Reset() {
	*x = CheckAppTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAppTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAppTargetAreaResponse) ProtoMessage() {}

func (x *CheckAppTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAppTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*CheckAppTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{70}
}

func (x *CheckAppTargetAreaResponse) GetInfo() *AppTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CheckAppTargetAreaResponse) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

type UnauthorizeAppTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,4100,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *UnauthorizeAppTargetAreaRequest) Reset() {
	*x = UnauthorizeAppTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizeAppTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizeAppTargetAreaRequest) ProtoMessage() {}

func (x *UnauthorizeAppTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizeAppTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*UnauthorizeAppTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{71}
}

func (x *UnauthorizeAppTargetAreaRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type UnauthorizeAppTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info       *AppTargetAreaInfo `protobuf:"bytes,4110,opt,name=Info,proto3" json:"Info,omitempty"`
	Authorized bool               `protobuf:"varint,4111,opt,name=Authorized,proto3" json:"Authorized,omitempty"`
}

func (x *UnauthorizeAppTargetAreaResponse) Reset() {
	*x = UnauthorizeAppTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizeAppTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizeAppTargetAreaResponse) ProtoMessage() {}

func (x *UnauthorizeAppTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizeAppTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*UnauthorizeAppTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{72}
}

func (x *UnauthorizeAppTargetAreaResponse) GetInfo() *AppTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UnauthorizeAppTargetAreaResponse) GetAuthorized() bool {
	if x != nil {
		return x.Authorized
	}
	return false
}

type AppGoodTargetAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string `protobuf:"bytes,4120,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID        string `protobuf:"bytes,4121,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID       string `protobuf:"bytes,4122,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	TargetAreaID string `protobuf:"bytes,4123,opt,name=TargetAreaID,proto3" json:"TargetAreaID,omitempty"`
}

func (x *AppGoodTargetAreaInfo) Reset() {
	*x = AppGoodTargetAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGoodTargetAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGoodTargetAreaInfo) ProtoMessage() {}

func (x *AppGoodTargetAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGoodTargetAreaInfo.ProtoReflect.Descriptor instead.
func (*AppGoodTargetAreaInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{73}
}

func (x *AppGoodTargetAreaInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AppGoodTargetAreaInfo) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppGoodTargetAreaInfo) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppGoodTargetAreaInfo) GetTargetAreaID() string {
	if x != nil {
		return x.TargetAreaID
	}
	return ""
}

type AuthorizeAppGoodTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodTargetAreaInfo `protobuf:"bytes,4200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AuthorizeAppGoodTargetAreaRequest) Reset() {
	*x = AuthorizeAppGoodTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAppGoodTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAppGoodTargetAreaRequest) ProtoMessage() {}

func (x *AuthorizeAppGoodTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAppGoodTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeAppGoodTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{74}
}

func (x *AuthorizeAppGoodTargetAreaRequest) GetInfo() *AppGoodTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AuthorizeAppGoodTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodTargetAreaInfo `protobuf:"bytes,4210,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AuthorizeAppGoodTargetAreaResponse) Reset() {
	*x = AuthorizeAppGoodTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeAppGoodTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeAppGoodTargetAreaResponse) ProtoMessage() {}

func (x *AuthorizeAppGoodTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeAppGoodTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeAppGoodTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{75}
}

func (x *AuthorizeAppGoodTargetAreaResponse) GetInfo() *AppGoodTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CheckAppGoodTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodTargetAreaInfo `protobuf:"bytes,4220,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CheckAppGoodTargetAreaRequest) Reset() {
	*x = CheckAppGoodTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAppGoodTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAppGoodTargetAreaRequest) ProtoMessage() {}

func (x *CheckAppGoodTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAppGoodTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*CheckAppGoodTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{76}
}

func (x *CheckAppGoodTargetAreaRequest) GetInfo() *AppGoodTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CheckAppGoodTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodTargetAreaInfo `protobuf:"bytes,4230,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CheckAppGoodTargetAreaResponse) Reset() {
	*x = CheckAppGoodTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAppGoodTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAppGoodTargetAreaResponse) ProtoMessage() {}

func (x *CheckAppGoodTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAppGoodTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*CheckAppGoodTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{77}
}

func (x *CheckAppGoodTargetAreaResponse) GetInfo() *AppGoodTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnauthorizeAppGoodTargetAreaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodTargetAreaInfo `protobuf:"bytes,4300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UnauthorizeAppGoodTargetAreaRequest) Reset() {
	*x = UnauthorizeAppGoodTargetAreaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizeAppGoodTargetAreaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizeAppGoodTargetAreaRequest) ProtoMessage() {}

func (x *UnauthorizeAppGoodTargetAreaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizeAppGoodTargetAreaRequest.ProtoReflect.Descriptor instead.
func (*UnauthorizeAppGoodTargetAreaRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{78}
}

func (x *UnauthorizeAppGoodTargetAreaRequest) GetInfo() *AppGoodTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnauthorizeAppGoodTargetAreaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodTargetAreaInfo `protobuf:"bytes,4310,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UnauthorizeAppGoodTargetAreaResponse) Reset() {
	*x = UnauthorizeAppGoodTargetAreaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnauthorizeAppGoodTargetAreaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnauthorizeAppGoodTargetAreaResponse) ProtoMessage() {}

func (x *UnauthorizeAppGoodTargetAreaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnauthorizeAppGoodTargetAreaResponse.ProtoReflect.Descriptor instead.
func (*UnauthorizeAppGoodTargetAreaResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{79}
}

func (x *UnauthorizeAppGoodTargetAreaResponse) GetInfo() *AppGoodTargetAreaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GoodComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,4400,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string `protobuf:"bytes,4401,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID    string `protobuf:"bytes,4402,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ReplyToID string `protobuf:"bytes,4403,opt,name=ReplyToID,proto3" json:"ReplyToID,omitempty"`
	GoodID    string `protobuf:"bytes,4404,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	OrderID   string `protobuf:"bytes,4405,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Content   string `protobuf:"bytes,4406,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *GoodComment) Reset() {
	*x = GoodComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodComment) ProtoMessage() {}

func (x *GoodComment) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodComment.ProtoReflect.Descriptor instead.
func (*GoodComment) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{80}
}

func (x *GoodComment) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodComment) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GoodComment) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GoodComment) GetReplyToID() string {
	if x != nil {
		return x.ReplyToID
	}
	return ""
}

func (x *GoodComment) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodComment) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *GoodComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateGoodCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *GoodComment `protobuf:"bytes,4500,opt,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *CreateGoodCommentRequest) Reset() {
	*x = CreateGoodCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodCommentRequest) ProtoMessage() {}

func (x *CreateGoodCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodCommentRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{81}
}

func (x *CreateGoodCommentRequest) GetComment() *GoodComment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type CreateGoodCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *GoodComment `protobuf:"bytes,4600,opt,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *CreateGoodCommentResponse) Reset() {
	*x = CreateGoodCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodCommentResponse) ProtoMessage() {}

func (x *CreateGoodCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodCommentResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodCommentResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{82}
}

func (x *CreateGoodCommentResponse) GetComment() *GoodComment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type UpdateGoodCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *GoodComment `protobuf:"bytes,4700,opt,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *UpdateGoodCommentRequest) Reset() {
	*x = UpdateGoodCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodCommentRequest) ProtoMessage() {}

func (x *UpdateGoodCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodCommentRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodCommentRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateGoodCommentRequest) GetComment() *GoodComment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type UpdateGoodCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *GoodComment `protobuf:"bytes,4800,opt,name=Comment,proto3" json:"Comment,omitempty"`
}

func (x *UpdateGoodCommentResponse) Reset() {
	*x = UpdateGoodCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodCommentResponse) ProtoMessage() {}

func (x *UpdateGoodCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodCommentResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodCommentResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateGoodCommentResponse) GetComment() *GoodComment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type GetGoodCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo *PageInfo `protobuf:"bytes,4900,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
	GoodID   string    `protobuf:"bytes,4901,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetGoodCommentsRequest) Reset() {
	*x = GetGoodCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCommentsRequest) ProtoMessage() {}

func (x *GetGoodCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCommentsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodCommentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{85}
}

func (x *GetGoodCommentsRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetGoodCommentsRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetGoodCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*GoodComment `protobuf:"bytes,5000,rep,name=Comments,proto3" json:"Comments,omitempty"`
	Total    int32          `protobuf:"varint,5001,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodCommentsResponse) Reset() {
	*x = GetGoodCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCommentsResponse) ProtoMessage() {}

func (x *GetGoodCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCommentsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodCommentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{86}
}

func (x *GetGoodCommentsResponse) GetComments() []*GoodComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *GetGoodCommentsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GoodExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string   `protobuf:"bytes,5100,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID  string   `protobuf:"bytes,5101,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Posters []string `protobuf:"bytes,5102,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels  []string `protobuf:"bytes,5103,rep,name=Labels,proto3" json:"Labels,omitempty"`
}

func (x *GoodExtraInfo) Reset() {
	*x = GoodExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodExtraInfo) ProtoMessage() {}

func (x *GoodExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodExtraInfo.ProtoReflect.Descriptor instead.
func (*GoodExtraInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{87}
}

func (x *GoodExtraInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodExtraInfo) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodExtraInfo) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *GoodExtraInfo) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateGoodExtraInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodExtraInfo `protobuf:"bytes,5200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodExtraInfoRequest) Reset() {
	*x = CreateGoodExtraInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodExtraInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodExtraInfoRequest) ProtoMessage() {}

func (x *CreateGoodExtraInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodExtraInfoRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodExtraInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{88}
}

func (x *CreateGoodExtraInfoRequest) GetInfo() *GoodExtraInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodExtraInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodExtraInfo `protobuf:"bytes,5300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodExtraInfoResponse) Reset() {
	*x = CreateGoodExtraInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodExtraInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodExtraInfoResponse) ProtoMessage() {}

func (x *CreateGoodExtraInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodExtraInfoResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodExtraInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{89}
}

func (x *CreateGoodExtraInfoResponse) GetInfo() *GoodExtraInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodExtraInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,5400,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetGoodExtraInfoRequest) Reset() {
	*x = GetGoodExtraInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodExtraInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodExtraInfoRequest) ProtoMessage() {}

func (x *GetGoodExtraInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodExtraInfoRequest.ProtoReflect.Descriptor instead.
func (*GetGoodExtraInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{90}
}

func (x *GetGoodExtraInfoRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetGoodExtraInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodExtraInfo `protobuf:"bytes,5500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodExtraInfoResponse) Reset() {
	*x = GetGoodExtraInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodExtraInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodExtraInfoResponse) ProtoMessage() {}

func (x *GetGoodExtraInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodExtraInfoResponse.ProtoReflect.Descriptor instead.
func (*GetGoodExtraInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{91}
}

func (x *GetGoodExtraInfoResponse) GetInfo() *GoodExtraInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodExtraInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodExtraInfo `protobuf:"bytes,5600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodExtraInfoRequest) Reset() {
	*x = UpdateGoodExtraInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodExtraInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodExtraInfoRequest) ProtoMessage() {}

func (x *UpdateGoodExtraInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodExtraInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodExtraInfoRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{92}
}

func (x *UpdateGoodExtraInfoRequest) GetInfo() *GoodExtraInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodExtraInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodExtraInfo `protobuf:"bytes,5700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodExtraInfoResponse) Reset() {
	*x = UpdateGoodExtraInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodExtraInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodExtraInfoResponse) ProtoMessage() {}

func (x *UpdateGoodExtraInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodExtraInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodExtraInfoResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateGoodExtraInfoResponse) GetInfo() *GoodExtraInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GoodReviewInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,5800,opt,name=ID,proto3" json:"ID,omitempty"`
	Type       string `protobuf:"bytes,5801,opt,name=Type,proto3" json:"Type,omitempty"`
	ReviewerID string `protobuf:"bytes,5802,opt,name=ReviewerID,proto3" json:"ReviewerID,omitempty"`
	State      string `protobuf:"bytes,5803,opt,name=State,proto3" json:"State,omitempty"`
	Message    string `protobuf:"bytes,5804,opt,name=Message,proto3" json:"Message,omitempty"`
	ReviewedID string `protobuf:"bytes,5805,opt,name=ReviewedID,proto3" json:"ReviewedID,omitempty"`
}

func (x *GoodReviewInfo) Reset() {
	*x = GoodReviewInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodReviewInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodReviewInfo) ProtoMessage() {}

func (x *GoodReviewInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodReviewInfo.ProtoReflect.Descriptor instead.
func (*GoodReviewInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{94}
}

func (x *GoodReviewInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodReviewInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GoodReviewInfo) GetReviewerID() string {
	if x != nil {
		return x.ReviewerID
	}
	return ""
}

func (x *GoodReviewInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoodReviewInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoodReviewInfo) GetReviewedID() string {
	if x != nil {
		return x.ReviewedID
	}
	return ""
}

type CreateGoodReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReviewInfo `protobuf:"bytes,5900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodReviewRequest) Reset() {
	*x = CreateGoodReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodReviewRequest) ProtoMessage() {}

func (x *CreateGoodReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodReviewRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodReviewRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{95}
}

func (x *CreateGoodReviewRequest) GetInfo() *GoodReviewInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReviewInfo `protobuf:"bytes,6000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodReviewResponse) Reset() {
	*x = CreateGoodReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodReviewResponse) ProtoMessage() {}

func (x *CreateGoodReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodReviewResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodReviewResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{96}
}

func (x *CreateGoodReviewResponse) GetInfo() *GoodReviewInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReviewInfo `protobuf:"bytes,6100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodReviewRequest) Reset() {
	*x = UpdateGoodReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodReviewRequest) ProtoMessage() {}

func (x *UpdateGoodReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodReviewRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodReviewRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateGoodReviewRequest) GetInfo() *GoodReviewInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReviewInfo `protobuf:"bytes,6200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodReviewResponse) Reset() {
	*x = UpdateGoodReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodReviewResponse) ProtoMessage() {}

func (x *UpdateGoodReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodReviewResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodReviewResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateGoodReviewResponse) GetInfo() *GoodReviewInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReviewInfo `protobuf:"bytes,6300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodReviewRequest) Reset() {
	*x = GetGoodReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodReviewRequest) ProtoMessage() {}

func (x *GetGoodReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodReviewRequest.ProtoReflect.Descriptor instead.
func (*GetGoodReviewRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{99}
}

func (x *GetGoodReviewRequest) GetInfo() *GoodReviewInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReviewInfo `protobuf:"bytes,6400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodReviewResponse) Reset() {
	*x = GetGoodReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_goods_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodReviewResponse) ProtoMessage() {}

func (x *GetGoodReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_goods_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodReviewResponse.ProtoReflect.Descriptor instead.
func (*GetGoodReviewResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_goods_proto_rawDescGZIP(), []int{100}
}

func (x *GetGoodReviewResponse) GetInfo() *GoodReviewInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_cloud_hashing_goods_proto protoreflect.FileDescriptor

var file_npool_cloud_hashing_goods_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x26, 0x0a, 0x0f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x5e, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x5c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2e, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x5f, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x84, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x15, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5b, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb0, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x27, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0xba, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc4, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x56, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x94, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf8, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x82, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x57,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x8c, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x96, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x97,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x69,
	0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa0, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xdc,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0xc0, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0xdd, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xa4, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x13, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa5, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0xa6, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa7,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73,
	0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x18, 0xa8, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x22, 0x52, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x88, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xec, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x52, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb4, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xbe, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xd2, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x53, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xdc, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x98, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0xfc, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xfd, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xfd, 0x03, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe0, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0xe1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0xe3, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe4, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0xe5,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x44, 0x18, 0xe6, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x18,
	0xe7, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x12,
	0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xe8, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74,
	0x12, 0x2d, 0x0a, 0x11, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xe9, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0xea, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xeb, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0xec, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x63, 0x18, 0xed, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x63, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0xee, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xef, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc4, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xa8, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x8c, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf0, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x21, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0xd4, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x48,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb8, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x0a, 0x47, 0x6f, 0x6f,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe0, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe1, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0xe3, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe4, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18,
	0xe5, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x44, 0x18, 0xe6, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73,
	0x18, 0xe7, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73,
	0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xe8,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41,
	0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x47, 0x6f, 0x6f, 0x64, 0x18, 0xe9, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x53,
	0x0a, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xea, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xeb, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xec, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x18, 0xed, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0xee,
	0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0xef, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3c, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0xf0, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x27,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x80, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x8a, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x56, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x8b, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x8c, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x8d, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x94, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9e, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa8, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xe4, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0xe5, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe9,
	0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xee, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xef, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0xf0, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x15, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xf1, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0xf2, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x47, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0xf3, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xf4,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a,
	0x10, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0xf5, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x52, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53,
	0x0a, 0x17, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x90, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x9a, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa4, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x14, 0x4f, 0x6e, 0x73, 0x61, 0x6c, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xae, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x15, 0x4f, 0x6e, 0x73, 0x61,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb8, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x15, 0x4f,
	0x66, 0x66, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc2, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52,
	0x0a, 0x16, 0x4f, 0x66, 0x66, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xcc, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x53, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf4, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd8, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a,
	0x19, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xbc, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x1a, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xa0, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x11,
	0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xaa, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xab, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0xac, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x22, 0x5f,
	0x0a, 0x1d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb4, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x60, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xbe, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d,
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd2, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0xd3, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x32, 0x0a,
	0x1f, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x84, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8e,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x8f, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x98, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x99, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x9a, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x44, 0x18, 0x9b, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x21, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xe8, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x68, 0x0a, 0x22, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf2, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xfc, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64,
	0x0a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x86, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x23, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xcc, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6a, 0x0a, 0x24, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xd6, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x0b,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0xb0, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xb1, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xb2, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x44, 0x18, 0xb3, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xb4, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0xb5, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x19, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xb6, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x94, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf8,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xdc, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x5b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xc0, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xa4, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0xa5, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x72,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x88, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x6d, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xec, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xed,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x19, 0x0a,
	0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xee, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xef, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0x58, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd0, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0xb4, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x98, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xfc,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe0, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xc4, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0xa8, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xa9, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x44, 0x18, 0xaa,
	0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xab, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xac, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x49,
	0x44, 0x18, 0xad, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8c, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xf0, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd4, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xb8, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9c, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x80, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0xc6, 0x36, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x48, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x5c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0xa8, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x8c,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2d, 0x61, 0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0xe0, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x41, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74,
	0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x2d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x4f, 0x6e, 0x73, 0x61, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x6e, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x6e, 0x73, 0x61, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0e, 0x4f, 0x66, 0x66, 0x73, 0x61, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x66, 0x66, 0x73, 0x61, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x66, 0x66, 0x73, 0x61, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x16,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12,
	0xa1, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70,
	0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12,
	0xc2, 0x01, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x39,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61, 0x72, 0x65,
	0x61, 0x3a, 0x01, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2d, 0x61, 0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0xca, 0x01, 0x0a, 0x1c, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x3b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x61,
	0x72, 0x65, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0x9f, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a,
	0x12, 0x98, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x3a, 0x01, 0x2a, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_cloud_hashing_goods_proto_rawDescOnce sync.Once
	file_npool_cloud_hashing_goods_proto_rawDescData = file_npool_cloud_hashing_goods_proto_rawDesc
)

func file_npool_cloud_hashing_goods_proto_rawDescGZIP() []byte {
	file_npool_cloud_hashing_goods_proto_rawDescOnce.Do(func() {
		file_npool_cloud_hashing_goods_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cloud_hashing_goods_proto_rawDescData)
	})
	return file_npool_cloud_hashing_goods_proto_rawDescData
}

var file_npool_cloud_hashing_goods_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_npool_cloud_hashing_goods_proto_goTypes = []interface{}{
	(*PageInfo)(nil),                                   // 0: cloud.hashing.goods.v1.PageInfo
	(*VersionResponse)(nil),                            // 1: cloud.hashing.goods.v1.VersionResponse
	(*VendorLocationInfo)(nil),                         // 2: cloud.hashing.goods.v1.VendorLocationInfo
	(*CreateVendorLocationRequest)(nil),                // 3: cloud.hashing.goods.v1.CreateVendorLocationRequest
	(*CreateVendorLocationResponse)(nil),               // 4: cloud.hashing.goods.v1.CreateVendorLocationResponse
	(*GetVendorLocationRequest)(nil),                   // 5: cloud.hashing.goods.v1.GetVendorLocationRequest
	(*GetVendorLocationResponse)(nil),                  // 6: cloud.hashing.goods.v1.GetVendorLocationResponse
	(*UpdateVendorLocationRequest)(nil),                // 7: cloud.hashing.goods.v1.UpdateVendorLocationRequest
	(*UpdateVendorLocationResponse)(nil),               // 8: cloud.hashing.goods.v1.UpdateVendorLocationResponse
	(*DeleteVendorLocationRequest)(nil),                // 9: cloud.hashing.goods.v1.DeleteVendorLocationRequest
	(*DeleteVendorLocationResponse)(nil),               // 10: cloud.hashing.goods.v1.DeleteVendorLocationResponse
	(*GetVendorLocationsRequest)(nil),                  // 11: cloud.hashing.goods.v1.GetVendorLocationsRequest
	(*GetVendorLocationsResponse)(nil),                 // 12: cloud.hashing.goods.v1.GetVendorLocationsResponse
	(*TargetAreaInfo)(nil),                             // 13: cloud.hashing.goods.v1.TargetAreaInfo
	(*CreateTargetAreaRequest)(nil),                    // 14: cloud.hashing.goods.v1.CreateTargetAreaRequest
	(*CreateTargetAreaResponse)(nil),                   // 15: cloud.hashing.goods.v1.CreateTargetAreaResponse
	(*GetTargetAreaRequest)(nil),                       // 16: cloud.hashing.goods.v1.GetTargetAreaRequest
	(*GetTargetAreaResponse)(nil),                      // 17: cloud.hashing.goods.v1.GetTargetAreaResponse
	(*UpdateTargetAreaRequest)(nil),                    // 18: cloud.hashing.goods.v1.UpdateTargetAreaRequest
	(*UpdateTargetAreaResponse)(nil),                   // 19: cloud.hashing.goods.v1.UpdateTargetAreaResponse
	(*DeleteTargetAreaRequest)(nil),                    // 20: cloud.hashing.goods.v1.DeleteTargetAreaRequest
	(*DeleteTargetAreaResponse)(nil),                   // 21: cloud.hashing.goods.v1.DeleteTargetAreaResponse
	(*DeleteTargetAreaByContinentCountryRequest)(nil),  // 22: cloud.hashing.goods.v1.DeleteTargetAreaByContinentCountryRequest
	(*DeleteTargetAreaByContinentCountryResponse)(nil), // 23: cloud.hashing.goods.v1.DeleteTargetAreaByContinentCountryResponse
	(*GetTargetAreasRequest)(nil),                      // 24: cloud.hashing.goods.v1.GetTargetAreasRequest
	(*GetTargetAreasResponse)(nil),                     // 25: cloud.hashing.goods.v1.GetTargetAreasResponse
	(*DeviceInfo)(nil),                                 // 26: cloud.hashing.goods.v1.DeviceInfo
	(*CreateDeviceInfoRequest)(nil),                    // 27: cloud.hashing.goods.v1.CreateDeviceInfoRequest
	(*CreateDeviceInfoResponse)(nil),                   // 28: cloud.hashing.goods.v1.CreateDeviceInfoResponse
	(*UpdateDeviceInfoRequest)(nil),                    // 29: cloud.hashing.goods.v1.UpdateDeviceInfoRequest
	(*UpdateDeviceInfoResponse)(nil),                   // 30: cloud.hashing.goods.v1.UpdateDeviceInfoResponse
	(*GetDeviceInfoRequest)(nil),                       // 31: cloud.hashing.goods.v1.GetDeviceInfoRequest
	(*GetDeviceInfoResponse)(nil),                      // 32: cloud.hashing.goods.v1.GetDeviceInfoResponse
	(*DeleteDeviceInfoRequest)(nil),                    // 33: cloud.hashing.goods.v1.DeleteDeviceInfoRequest
	(*DeleteDeviceInfoResponse)(nil),                   // 34: cloud.hashing.goods.v1.DeleteDeviceInfoResponse
	(*GetDeviceInfosRequest)(nil),                      // 35: cloud.hashing.goods.v1.GetDeviceInfosRequest
	(*GetDeviceInfosResponse)(nil),                     // 36: cloud.hashing.goods.v1.GetDeviceInfosResponse
	(*GoodInfo)(nil),                                   // 37: cloud.hashing.goods.v1.GoodInfo
	(*CreateGoodRequest)(nil),                          // 38: cloud.hashing.goods.v1.CreateGoodRequest
	(*CreateGoodResponse)(nil),                         // 39: cloud.hashing.goods.v1.CreateGoodResponse
	(*UpdateGoodRequest)(nil),                          // 40: cloud.hashing.goods.v1.UpdateGoodRequest
	(*UpdateGoodResponse)(nil),                         // 41: cloud.hashing.goods.v1.UpdateGoodResponse
	(*GetGoodRequest)(nil),                             // 42: cloud.hashing.goods.v1.GetGoodRequest
	(*GetGoodResponse)(nil),                            // 43: cloud.hashing.goods.v1.GetGoodResponse
	(*GoodDetail)(nil),                                 // 44: cloud.hashing.goods.v1.GoodDetail
	(*GetGoodDetailRequest)(nil),                       // 45: cloud.hashing.goods.v1.GetGoodDetailRequest
	(*GetGoodDetailResponse)(nil),                      // 46: cloud.hashing.goods.v1.GetGoodDetailResponse
	(*GetGoodsDetailRequest)(nil),                      // 47: cloud.hashing.goods.v1.GetGoodsDetailRequest
	(*GetGoodsDetailResponse)(nil),                     // 48: cloud.hashing.goods.v1.GetGoodsDetailResponse
	(*DeleteGoodRequest)(nil),                          // 49: cloud.hashing.goods.v1.DeleteGoodRequest
	(*DeleteGoodResponse)(nil),                         // 50: cloud.hashing.goods.v1.DeleteGoodResponse
	(*GetGoodsRequest)(nil),                            // 51: cloud.hashing.goods.v1.GetGoodsRequest
	(*GetGoodsResponse)(nil),                           // 52: cloud.hashing.goods.v1.GetGoodsResponse
	(*AppGoodInfo)(nil),                                // 53: cloud.hashing.goods.v1.AppGoodInfo
	(*SetAppGoodPriceRequest)(nil),                     // 54: cloud.hashing.goods.v1.SetAppGoodPriceRequest
	(*SetAppGoodPriceResponse)(nil),                    // 55: cloud.hashing.goods.v1.SetAppGoodPriceResponse
	(*CheckAppGoodRequest)(nil),                        // 56: cloud.hashing.goods.v1.CheckAppGoodRequest
	(*CheckAppGoodResponse)(nil),                       // 57: cloud.hashing.goods.v1.CheckAppGoodResponse
	(*OnsaleAppGoodRequest)(nil),                       // 58: cloud.hashing.goods.v1.OnsaleAppGoodRequest
	(*OnsaleAppGoodResponse)(nil),                      // 59: cloud.hashing.goods.v1.OnsaleAppGoodResponse
	(*OffsaleAppGoodRequest)(nil),                      // 60: cloud.hashing.goods.v1.OffsaleAppGoodRequest
	(*OffsaleAppGoodResponse)(nil),                     // 61: cloud.hashing.goods.v1.OffsaleAppGoodResponse
	(*AuthorizeAppGoodRequest)(nil),                    // 62: cloud.hashing.goods.v1.AuthorizeAppGoodRequest
	(*AuthorizeAppGoodResponse)(nil),                   // 63: cloud.hashing.goods.v1.AuthorizeAppGoodResponse
	(*UnauthorizeAppGoodRequest)(nil),                  // 64: cloud.hashing.goods.v1.UnauthorizeAppGoodRequest
	(*UnauthorizeAppGoodResponse)(nil),                 // 65: cloud.hashing.goods.v1.UnauthorizeAppGoodResponse
	(*AppTargetAreaInfo)(nil),                          // 66: cloud.hashing.goods.v1.AppTargetAreaInfo
	(*AuthorizeAppTargetAreaRequest)(nil),              // 67: cloud.hashing.goods.v1.AuthorizeAppTargetAreaRequest
	(*AuthorizeAppTargetAreaResponse)(nil),             // 68: cloud.hashing.goods.v1.AuthorizeAppTargetAreaResponse
	(*CheckAppTargetAreaRequest)(nil),                  // 69: cloud.hashing.goods.v1.CheckAppTargetAreaRequest
	(*CheckAppTargetAreaResponse)(nil),                 // 70: cloud.hashing.goods.v1.CheckAppTargetAreaResponse
	(*UnauthorizeAppTargetAreaRequest)(nil),            // 71: cloud.hashing.goods.v1.UnauthorizeAppTargetAreaRequest
	(*UnauthorizeAppTargetAreaResponse)(nil),           // 72: cloud.hashing.goods.v1.UnauthorizeAppTargetAreaResponse
	(*AppGoodTargetAreaInfo)(nil),                      // 73: cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	(*AuthorizeAppGoodTargetAreaRequest)(nil),          // 74: cloud.hashing.goods.v1.AuthorizeAppGoodTargetAreaRequest
	(*AuthorizeAppGoodTargetAreaResponse)(nil),         // 75: cloud.hashing.goods.v1.AuthorizeAppGoodTargetAreaResponse
	(*CheckAppGoodTargetAreaRequest)(nil),              // 76: cloud.hashing.goods.v1.CheckAppGoodTargetAreaRequest
	(*CheckAppGoodTargetAreaResponse)(nil),             // 77: cloud.hashing.goods.v1.CheckAppGoodTargetAreaResponse
	(*UnauthorizeAppGoodTargetAreaRequest)(nil),        // 78: cloud.hashing.goods.v1.UnauthorizeAppGoodTargetAreaRequest
	(*UnauthorizeAppGoodTargetAreaResponse)(nil),       // 79: cloud.hashing.goods.v1.UnauthorizeAppGoodTargetAreaResponse
	(*GoodComment)(nil),                                // 80: cloud.hashing.goods.v1.GoodComment
	(*CreateGoodCommentRequest)(nil),                   // 81: cloud.hashing.goods.v1.CreateGoodCommentRequest
	(*CreateGoodCommentResponse)(nil),                  // 82: cloud.hashing.goods.v1.CreateGoodCommentResponse
	(*UpdateGoodCommentRequest)(nil),                   // 83: cloud.hashing.goods.v1.UpdateGoodCommentRequest
	(*UpdateGoodCommentResponse)(nil),                  // 84: cloud.hashing.goods.v1.UpdateGoodCommentResponse
	(*GetGoodCommentsRequest)(nil),                     // 85: cloud.hashing.goods.v1.GetGoodCommentsRequest
	(*GetGoodCommentsResponse)(nil),                    // 86: cloud.hashing.goods.v1.GetGoodCommentsResponse
	(*GoodExtraInfo)(nil),                              // 87: cloud.hashing.goods.v1.GoodExtraInfo
	(*CreateGoodExtraInfoRequest)(nil),                 // 88: cloud.hashing.goods.v1.CreateGoodExtraInfoRequest
	(*CreateGoodExtraInfoResponse)(nil),                // 89: cloud.hashing.goods.v1.CreateGoodExtraInfoResponse
	(*GetGoodExtraInfoRequest)(nil),                    // 90: cloud.hashing.goods.v1.GetGoodExtraInfoRequest
	(*GetGoodExtraInfoResponse)(nil),                   // 91: cloud.hashing.goods.v1.GetGoodExtraInfoResponse
	(*UpdateGoodExtraInfoRequest)(nil),                 // 92: cloud.hashing.goods.v1.UpdateGoodExtraInfoRequest
	(*UpdateGoodExtraInfoResponse)(nil),                // 93: cloud.hashing.goods.v1.UpdateGoodExtraInfoResponse
	(*GoodReviewInfo)(nil),                             // 94: cloud.hashing.goods.v1.GoodReviewInfo
	(*CreateGoodReviewRequest)(nil),                    // 95: cloud.hashing.goods.v1.CreateGoodReviewRequest
	(*CreateGoodReviewResponse)(nil),                   // 96: cloud.hashing.goods.v1.CreateGoodReviewResponse
	(*UpdateGoodReviewRequest)(nil),                    // 97: cloud.hashing.goods.v1.UpdateGoodReviewRequest
	(*UpdateGoodReviewResponse)(nil),                   // 98: cloud.hashing.goods.v1.UpdateGoodReviewResponse
	(*GetGoodReviewRequest)(nil),                       // 99: cloud.hashing.goods.v1.GetGoodReviewRequest
	(*GetGoodReviewResponse)(nil),                      // 100: cloud.hashing.goods.v1.GetGoodReviewResponse
	(*emptypb.Empty)(nil),                              // 101: google.protobuf.Empty
}
var file_npool_cloud_hashing_goods_proto_depIdxs = []int32{
	2,   // 0: cloud.hashing.goods.v1.CreateVendorLocationRequest.Info:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	2,   // 1: cloud.hashing.goods.v1.CreateVendorLocationResponse.Info:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	2,   // 2: cloud.hashing.goods.v1.GetVendorLocationResponse.Info:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	2,   // 3: cloud.hashing.goods.v1.UpdateVendorLocationRequest.Info:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	2,   // 4: cloud.hashing.goods.v1.UpdateVendorLocationResponse.Info:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	2,   // 5: cloud.hashing.goods.v1.DeleteVendorLocationResponse.Info:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	0,   // 6: cloud.hashing.goods.v1.GetVendorLocationsRequest.PageInfo:type_name -> cloud.hashing.goods.v1.PageInfo
	2,   // 7: cloud.hashing.goods.v1.GetVendorLocationsResponse.Infos:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	13,  // 8: cloud.hashing.goods.v1.CreateTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	13,  // 9: cloud.hashing.goods.v1.CreateTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	13,  // 10: cloud.hashing.goods.v1.GetTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	13,  // 11: cloud.hashing.goods.v1.UpdateTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	13,  // 12: cloud.hashing.goods.v1.UpdateTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	13,  // 13: cloud.hashing.goods.v1.DeleteTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	13,  // 14: cloud.hashing.goods.v1.DeleteTargetAreaByContinentCountryResponse.Info:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	0,   // 15: cloud.hashing.goods.v1.GetTargetAreasRequest.PageInfo:type_name -> cloud.hashing.goods.v1.PageInfo
	13,  // 16: cloud.hashing.goods.v1.GetTargetAreasResponse.Infos:type_name -> cloud.hashing.goods.v1.TargetAreaInfo
	26,  // 17: cloud.hashing.goods.v1.CreateDeviceInfoRequest.Info:type_name -> cloud.hashing.goods.v1.DeviceInfo
	26,  // 18: cloud.hashing.goods.v1.CreateDeviceInfoResponse.Info:type_name -> cloud.hashing.goods.v1.DeviceInfo
	26,  // 19: cloud.hashing.goods.v1.UpdateDeviceInfoRequest.Info:type_name -> cloud.hashing.goods.v1.DeviceInfo
	26,  // 20: cloud.hashing.goods.v1.UpdateDeviceInfoResponse.Info:type_name -> cloud.hashing.goods.v1.DeviceInfo
	26,  // 21: cloud.hashing.goods.v1.GetDeviceInfoResponse.Info:type_name -> cloud.hashing.goods.v1.DeviceInfo
	26,  // 22: cloud.hashing.goods.v1.DeleteDeviceInfoResponse.Info:type_name -> cloud.hashing.goods.v1.DeviceInfo
	0,   // 23: cloud.hashing.goods.v1.GetDeviceInfosRequest.PageInfo:type_name -> cloud.hashing.goods.v1.PageInfo
	26,  // 24: cloud.hashing.goods.v1.GetDeviceInfosResponse.Infos:type_name -> cloud.hashing.goods.v1.DeviceInfo
	37,  // 25: cloud.hashing.goods.v1.CreateGoodRequest.Info:type_name -> cloud.hashing.goods.v1.GoodInfo
	37,  // 26: cloud.hashing.goods.v1.CreateGoodResponse.Info:type_name -> cloud.hashing.goods.v1.GoodInfo
	37,  // 27: cloud.hashing.goods.v1.UpdateGoodRequest.Info:type_name -> cloud.hashing.goods.v1.GoodInfo
	37,  // 28: cloud.hashing.goods.v1.UpdateGoodResponse.Info:type_name -> cloud.hashing.goods.v1.GoodInfo
	37,  // 29: cloud.hashing.goods.v1.GetGoodResponse.Info:type_name -> cloud.hashing.goods.v1.GoodInfo
	26,  // 30: cloud.hashing.goods.v1.GoodDetail.DeviceInfo:type_name -> cloud.hashing.goods.v1.DeviceInfo
	37,  // 31: cloud.hashing.goods.v1.GoodDetail.InheritFromGood:type_name -> cloud.hashing.goods.v1.GoodInfo
	2,   // 32: cloud.hashing.goods.v1.GoodDetail.VendorLocation:type_name -> cloud.hashing.goods.v1.VendorLocationInfo
	87,  // 33: cloud.hashing.goods.v1.GoodDetail.Extra:type_name -> cloud.hashing.goods.v1.GoodExtraInfo
	44,  // 34: cloud.hashing.goods.v1.GetGoodDetailResponse.Detail:type_name -> cloud.hashing.goods.v1.GoodDetail
	0,   // 35: cloud.hashing.goods.v1.GetGoodsDetailRequest.PageInfo:type_name -> cloud.hashing.goods.v1.PageInfo
	44,  // 36: cloud.hashing.goods.v1.GetGoodsDetailResponse.Details:type_name -> cloud.hashing.goods.v1.GoodDetail
	37,  // 37: cloud.hashing.goods.v1.DeleteGoodResponse.Info:type_name -> cloud.hashing.goods.v1.GoodInfo
	0,   // 38: cloud.hashing.goods.v1.GetGoodsRequest.PageInfo:type_name -> cloud.hashing.goods.v1.PageInfo
	37,  // 39: cloud.hashing.goods.v1.GetGoodsResponse.Infos:type_name -> cloud.hashing.goods.v1.GoodInfo
	53,  // 40: cloud.hashing.goods.v1.SetAppGoodPriceRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 41: cloud.hashing.goods.v1.SetAppGoodPriceResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 42: cloud.hashing.goods.v1.CheckAppGoodRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 43: cloud.hashing.goods.v1.CheckAppGoodResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 44: cloud.hashing.goods.v1.OnsaleAppGoodRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 45: cloud.hashing.goods.v1.OnsaleAppGoodResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 46: cloud.hashing.goods.v1.OffsaleAppGoodRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 47: cloud.hashing.goods.v1.OffsaleAppGoodResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 48: cloud.hashing.goods.v1.AuthorizeAppGoodRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 49: cloud.hashing.goods.v1.AuthorizeAppGoodResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 50: cloud.hashing.goods.v1.UnauthorizeAppGoodRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	53,  // 51: cloud.hashing.goods.v1.UnauthorizeAppGoodResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodInfo
	66,  // 52: cloud.hashing.goods.v1.AuthorizeAppTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.AppTargetAreaInfo
	66,  // 53: cloud.hashing.goods.v1.AuthorizeAppTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.AppTargetAreaInfo
	66,  // 54: cloud.hashing.goods.v1.CheckAppTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.AppTargetAreaInfo
	66,  // 55: cloud.hashing.goods.v1.CheckAppTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.AppTargetAreaInfo
	66,  // 56: cloud.hashing.goods.v1.UnauthorizeAppTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.AppTargetAreaInfo
	73,  // 57: cloud.hashing.goods.v1.AuthorizeAppGoodTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	73,  // 58: cloud.hashing.goods.v1.AuthorizeAppGoodTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	73,  // 59: cloud.hashing.goods.v1.CheckAppGoodTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	73,  // 60: cloud.hashing.goods.v1.CheckAppGoodTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	73,  // 61: cloud.hashing.goods.v1.UnauthorizeAppGoodTargetAreaRequest.Info:type_name -> cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	73,  // 62: cloud.hashing.goods.v1.UnauthorizeAppGoodTargetAreaResponse.Info:type_name -> cloud.hashing.goods.v1.AppGoodTargetAreaInfo
	80,  // 63: cloud.hashing.goods.v1.CreateGoodCommentRequest.Comment:type_name -> cloud.hashing.goods.v1.GoodComment
	80,  // 64: cloud.hashing.goods.v1.CreateGoodCommentResponse.Comment:type_name -> cloud.hashing.goods.v1.GoodComment
	80,  // 65: cloud.hashing.goods.v1.UpdateGoodCommentRequest.Comment:type_name -> cloud.hashing.goods.v1.GoodComment
	80,  // 66: cloud.hashing.goods.v1.UpdateGoodCommentResponse.Comment:type_name -> cloud.hashing.goods.v1.GoodComment
	0,   // 67: cloud.hashing.goods.v1.GetGoodCommentsRequest.PageInfo:type_name -> cloud.hashing.goods.v1.PageInfo
	80,  // 68: cloud.hashing.goods.v1.GetGoodCommentsResponse.Comments:type_name -> cloud.hashing.goods.v1.GoodComment
	87,  // 69: cloud.hashing.goods.v1.CreateGoodExtraInfoRequest.Info:type_name -> cloud.hashing.goods.v1.GoodExtraInfo
	87,  // 70: cloud.hashing.goods.v1.CreateGoodExtraInfoResponse.Info:type_name -> cloud.hashing.goods.v1.GoodExtraInfo
	87,  // 71: cloud.hashing.goods.v1.GetGoodExtraInfoResponse.Info:type_name -> cloud.hashing.goods.v1.GoodExtraInfo
	87,  // 72: cloud.hashing.goods.v1.UpdateGoodExtraInfoRequest.Info:type_name -> cloud.hashing.goods.v1.GoodExtraInfo
	87,  // 73: cloud.hashing.goods.v1.UpdateGoodExtraInfoResponse.Info:type_name -> cloud.hashing.goods.v1.GoodExtraInfo
	94,  // 74: cloud.hashing.goods.v1.CreateGoodReviewRequest.Info:type_name -> cloud.hashing.goods.v1.GoodReviewInfo
	94,  // 75: cloud.hashing.goods.v1.CreateGoodReviewResponse.Info:type_name -> cloud.hashing.goods.v1.GoodReviewInfo
	94,  // 76: cloud.hashing.goods.v1.UpdateGoodReviewRequest.Info:type_name -> cloud.hashing.goods.v1.GoodReviewInfo
	94,  // 77: cloud.hashing.goods.v1.UpdateGoodReviewResponse.Info:type_name -> cloud.hashing.goods.v1.GoodReviewInfo
	94,  // 78: cloud.hashing.goods.v1.GetGoodReviewRequest.Info:type_name -> cloud.hashing.goods.v1.GoodReviewInfo
	94,  // 79: cloud.hashing.goods.v1.GetGoodReviewResponse.Info:type_name -> cloud.hashing.goods.v1.GoodReviewInfo
	101, // 80: cloud.hashing.goods.v1.CloudHashingGoods.Version:input_type -> google.protobuf.Empty
	3,   // 81: cloud.hashing.goods.v1.CloudHashingGoods.CreateVendorLocation:input_type -> cloud.hashing.goods.v1.CreateVendorLocationRequest
	7,   // 82: cloud.hashing.goods.v1.CloudHashingGoods.UpdateVendorLocation:input_type -> cloud.hashing.goods.v1.UpdateVendorLocationRequest
	5,   // 83: cloud.hashing.goods.v1.CloudHashingGoods.GetVendorLocation:input_type -> cloud.hashing.goods.v1.GetVendorLocationRequest
	9,   // 84: cloud.hashing.goods.v1.CloudHashingGoods.DeleteVendorLocation:input_type -> cloud.hashing.goods.v1.DeleteVendorLocationRequest
	11,  // 85: cloud.hashing.goods.v1.CloudHashingGoods.GetVendorLocations:input_type -> cloud.hashing.goods.v1.GetVendorLocationsRequest
	14,  // 86: cloud.hashing.goods.v1.CloudHashingGoods.CreateTargetArea:input_type -> cloud.hashing.goods.v1.CreateTargetAreaRequest
	18,  // 87: cloud.hashing.goods.v1.CloudHashingGoods.UpdateTargetArea:input_type -> cloud.hashing.goods.v1.UpdateTargetAreaRequest
	16,  // 88: cloud.hashing.goods.v1.CloudHashingGoods.GetTargetArea:input_type -> cloud.hashing.goods.v1.GetTargetAreaRequest
	20,  // 89: cloud.hashing.goods.v1.CloudHashingGoods.DeleteTargetArea:input_type -> cloud.hashing.goods.v1.DeleteTargetAreaRequest
	22,  // 90: cloud.hashing.goods.v1.CloudHashingGoods.DeleteTargetAreaByContinentCountry:input_type -> cloud.hashing.goods.v1.DeleteTargetAreaByContinentCountryRequest
	24,  // 91: cloud.hashing.goods.v1.CloudHashingGoods.GetTargetAreas:input_type -> cloud.hashing.goods.v1.GetTargetAreasRequest
	27,  // 92: cloud.hashing.goods.v1.CloudHashingGoods.CreateDeviceInfo:input_type -> cloud.hashing.goods.v1.CreateDeviceInfoRequest
	29,  // 93: cloud.hashing.goods.v1.CloudHashingGoods.UpdateDeviceInfo:input_type -> cloud.hashing.goods.v1.UpdateDeviceInfoRequest
	31,  // 94: cloud.hashing.goods.v1.CloudHashingGoods.GetDeviceInfo:input_type -> cloud.hashing.goods.v1.GetDeviceInfoRequest
	33,  // 95: cloud.hashing.goods.v1.CloudHashingGoods.DeleteDeviceInfo:input_type -> cloud.hashing.goods.v1.DeleteDeviceInfoRequest
	35,  // 96: cloud.hashing.goods.v1.CloudHashingGoods.GetDeviceInfos:input_type -> cloud.hashing.goods.v1.GetDeviceInfosRequest
	38,  // 97: cloud.hashing.goods.v1.CloudHashingGoods.CreateGood:input_type -> cloud.hashing.goods.v1.CreateGoodRequest
	40,  // 98: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGood:input_type -> cloud.hashing.goods.v1.UpdateGoodRequest
	42,  // 99: cloud.hashing.goods.v1.CloudHashingGoods.GetGood:input_type -> cloud.hashing.goods.v1.GetGoodRequest
	49,  // 100: cloud.hashing.goods.v1.CloudHashingGoods.DeleteGood:input_type -> cloud.hashing.goods.v1.DeleteGoodRequest
	51,  // 101: cloud.hashing.goods.v1.CloudHashingGoods.GetGoods:input_type -> cloud.hashing.goods.v1.GetGoodsRequest
	45,  // 102: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodDetail:input_type -> cloud.hashing.goods.v1.GetGoodDetailRequest
	47,  // 103: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodsDetail:input_type -> cloud.hashing.goods.v1.GetGoodsDetailRequest
	62,  // 104: cloud.hashing.goods.v1.CloudHashingGoods.AuthorizeAppGood:input_type -> cloud.hashing.goods.v1.AuthorizeAppGoodRequest
	54,  // 105: cloud.hashing.goods.v1.CloudHashingGoods.SetAppGoodPrice:input_type -> cloud.hashing.goods.v1.SetAppGoodPriceRequest
	56,  // 106: cloud.hashing.goods.v1.CloudHashingGoods.CheckAppGood:input_type -> cloud.hashing.goods.v1.CheckAppGoodRequest
	58,  // 107: cloud.hashing.goods.v1.CloudHashingGoods.OnsaleAppGood:input_type -> cloud.hashing.goods.v1.OnsaleAppGoodRequest
	60,  // 108: cloud.hashing.goods.v1.CloudHashingGoods.OffsaleAppGood:input_type -> cloud.hashing.goods.v1.OffsaleAppGoodRequest
	64,  // 109: cloud.hashing.goods.v1.CloudHashingGoods.UnauthorizeAppGood:input_type -> cloud.hashing.goods.v1.UnauthorizeAppGoodRequest
	67,  // 110: cloud.hashing.goods.v1.CloudHashingGoods.AuthorizeAppTargetArea:input_type -> cloud.hashing.goods.v1.AuthorizeAppTargetAreaRequest
	69,  // 111: cloud.hashing.goods.v1.CloudHashingGoods.CheckAppTargetArea:input_type -> cloud.hashing.goods.v1.CheckAppTargetAreaRequest
	71,  // 112: cloud.hashing.goods.v1.CloudHashingGoods.UnauthorizeAppTargetArea:input_type -> cloud.hashing.goods.v1.UnauthorizeAppTargetAreaRequest
	74,  // 113: cloud.hashing.goods.v1.CloudHashingGoods.AuthorizeAppGoodTargetArea:input_type -> cloud.hashing.goods.v1.AuthorizeAppGoodTargetAreaRequest
	76,  // 114: cloud.hashing.goods.v1.CloudHashingGoods.CheckAppGoodTargetArea:input_type -> cloud.hashing.goods.v1.CheckAppGoodTargetAreaRequest
	78,  // 115: cloud.hashing.goods.v1.CloudHashingGoods.UnauthorizeAppGoodTargetArea:input_type -> cloud.hashing.goods.v1.UnauthorizeAppGoodTargetAreaRequest
	81,  // 116: cloud.hashing.goods.v1.CloudHashingGoods.CreateGoodComment:input_type -> cloud.hashing.goods.v1.CreateGoodCommentRequest
	83,  // 117: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGoodComment:input_type -> cloud.hashing.goods.v1.UpdateGoodCommentRequest
	85,  // 118: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodComments:input_type -> cloud.hashing.goods.v1.GetGoodCommentsRequest
	88,  // 119: cloud.hashing.goods.v1.CloudHashingGoods.CreateGoodExtraInfo:input_type -> cloud.hashing.goods.v1.CreateGoodExtraInfoRequest
	90,  // 120: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodExtraInfo:input_type -> cloud.hashing.goods.v1.GetGoodExtraInfoRequest
	92,  // 121: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGoodExtraInfo:input_type -> cloud.hashing.goods.v1.UpdateGoodExtraInfoRequest
	95,  // 122: cloud.hashing.goods.v1.CloudHashingGoods.CreateGoodReview:input_type -> cloud.hashing.goods.v1.CreateGoodReviewRequest
	97,  // 123: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGoodReview:input_type -> cloud.hashing.goods.v1.UpdateGoodReviewRequest
	99,  // 124: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodReview:input_type -> cloud.hashing.goods.v1.GetGoodReviewRequest
	1,   // 125: cloud.hashing.goods.v1.CloudHashingGoods.Version:output_type -> cloud.hashing.goods.v1.VersionResponse
	4,   // 126: cloud.hashing.goods.v1.CloudHashingGoods.CreateVendorLocation:output_type -> cloud.hashing.goods.v1.CreateVendorLocationResponse
	8,   // 127: cloud.hashing.goods.v1.CloudHashingGoods.UpdateVendorLocation:output_type -> cloud.hashing.goods.v1.UpdateVendorLocationResponse
	6,   // 128: cloud.hashing.goods.v1.CloudHashingGoods.GetVendorLocation:output_type -> cloud.hashing.goods.v1.GetVendorLocationResponse
	10,  // 129: cloud.hashing.goods.v1.CloudHashingGoods.DeleteVendorLocation:output_type -> cloud.hashing.goods.v1.DeleteVendorLocationResponse
	12,  // 130: cloud.hashing.goods.v1.CloudHashingGoods.GetVendorLocations:output_type -> cloud.hashing.goods.v1.GetVendorLocationsResponse
	15,  // 131: cloud.hashing.goods.v1.CloudHashingGoods.CreateTargetArea:output_type -> cloud.hashing.goods.v1.CreateTargetAreaResponse
	19,  // 132: cloud.hashing.goods.v1.CloudHashingGoods.UpdateTargetArea:output_type -> cloud.hashing.goods.v1.UpdateTargetAreaResponse
	17,  // 133: cloud.hashing.goods.v1.CloudHashingGoods.GetTargetArea:output_type -> cloud.hashing.goods.v1.GetTargetAreaResponse
	21,  // 134: cloud.hashing.goods.v1.CloudHashingGoods.DeleteTargetArea:output_type -> cloud.hashing.goods.v1.DeleteTargetAreaResponse
	23,  // 135: cloud.hashing.goods.v1.CloudHashingGoods.DeleteTargetAreaByContinentCountry:output_type -> cloud.hashing.goods.v1.DeleteTargetAreaByContinentCountryResponse
	25,  // 136: cloud.hashing.goods.v1.CloudHashingGoods.GetTargetAreas:output_type -> cloud.hashing.goods.v1.GetTargetAreasResponse
	28,  // 137: cloud.hashing.goods.v1.CloudHashingGoods.CreateDeviceInfo:output_type -> cloud.hashing.goods.v1.CreateDeviceInfoResponse
	30,  // 138: cloud.hashing.goods.v1.CloudHashingGoods.UpdateDeviceInfo:output_type -> cloud.hashing.goods.v1.UpdateDeviceInfoResponse
	32,  // 139: cloud.hashing.goods.v1.CloudHashingGoods.GetDeviceInfo:output_type -> cloud.hashing.goods.v1.GetDeviceInfoResponse
	34,  // 140: cloud.hashing.goods.v1.CloudHashingGoods.DeleteDeviceInfo:output_type -> cloud.hashing.goods.v1.DeleteDeviceInfoResponse
	36,  // 141: cloud.hashing.goods.v1.CloudHashingGoods.GetDeviceInfos:output_type -> cloud.hashing.goods.v1.GetDeviceInfosResponse
	39,  // 142: cloud.hashing.goods.v1.CloudHashingGoods.CreateGood:output_type -> cloud.hashing.goods.v1.CreateGoodResponse
	41,  // 143: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGood:output_type -> cloud.hashing.goods.v1.UpdateGoodResponse
	43,  // 144: cloud.hashing.goods.v1.CloudHashingGoods.GetGood:output_type -> cloud.hashing.goods.v1.GetGoodResponse
	50,  // 145: cloud.hashing.goods.v1.CloudHashingGoods.DeleteGood:output_type -> cloud.hashing.goods.v1.DeleteGoodResponse
	52,  // 146: cloud.hashing.goods.v1.CloudHashingGoods.GetGoods:output_type -> cloud.hashing.goods.v1.GetGoodsResponse
	46,  // 147: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodDetail:output_type -> cloud.hashing.goods.v1.GetGoodDetailResponse
	48,  // 148: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodsDetail:output_type -> cloud.hashing.goods.v1.GetGoodsDetailResponse
	63,  // 149: cloud.hashing.goods.v1.CloudHashingGoods.AuthorizeAppGood:output_type -> cloud.hashing.goods.v1.AuthorizeAppGoodResponse
	55,  // 150: cloud.hashing.goods.v1.CloudHashingGoods.SetAppGoodPrice:output_type -> cloud.hashing.goods.v1.SetAppGoodPriceResponse
	57,  // 151: cloud.hashing.goods.v1.CloudHashingGoods.CheckAppGood:output_type -> cloud.hashing.goods.v1.CheckAppGoodResponse
	59,  // 152: cloud.hashing.goods.v1.CloudHashingGoods.OnsaleAppGood:output_type -> cloud.hashing.goods.v1.OnsaleAppGoodResponse
	61,  // 153: cloud.hashing.goods.v1.CloudHashingGoods.OffsaleAppGood:output_type -> cloud.hashing.goods.v1.OffsaleAppGoodResponse
	65,  // 154: cloud.hashing.goods.v1.CloudHashingGoods.UnauthorizeAppGood:output_type -> cloud.hashing.goods.v1.UnauthorizeAppGoodResponse
	68,  // 155: cloud.hashing.goods.v1.CloudHashingGoods.AuthorizeAppTargetArea:output_type -> cloud.hashing.goods.v1.AuthorizeAppTargetAreaResponse
	70,  // 156: cloud.hashing.goods.v1.CloudHashingGoods.CheckAppTargetArea:output_type -> cloud.hashing.goods.v1.CheckAppTargetAreaResponse
	72,  // 157: cloud.hashing.goods.v1.CloudHashingGoods.UnauthorizeAppTargetArea:output_type -> cloud.hashing.goods.v1.UnauthorizeAppTargetAreaResponse
	75,  // 158: cloud.hashing.goods.v1.CloudHashingGoods.AuthorizeAppGoodTargetArea:output_type -> cloud.hashing.goods.v1.AuthorizeAppGoodTargetAreaResponse
	77,  // 159: cloud.hashing.goods.v1.CloudHashingGoods.CheckAppGoodTargetArea:output_type -> cloud.hashing.goods.v1.CheckAppGoodTargetAreaResponse
	79,  // 160: cloud.hashing.goods.v1.CloudHashingGoods.UnauthorizeAppGoodTargetArea:output_type -> cloud.hashing.goods.v1.UnauthorizeAppGoodTargetAreaResponse
	82,  // 161: cloud.hashing.goods.v1.CloudHashingGoods.CreateGoodComment:output_type -> cloud.hashing.goods.v1.CreateGoodCommentResponse
	84,  // 162: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGoodComment:output_type -> cloud.hashing.goods.v1.UpdateGoodCommentResponse
	86,  // 163: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodComments:output_type -> cloud.hashing.goods.v1.GetGoodCommentsResponse
	88,  // 164: cloud.hashing.goods.v1.CloudHashingGoods.CreateGoodExtraInfo:output_type -> cloud.hashing.goods.v1.CreateGoodExtraInfoRequest
	90,  // 165: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodExtraInfo:output_type -> cloud.hashing.goods.v1.GetGoodExtraInfoRequest
	92,  // 166: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGoodExtraInfo:output_type -> cloud.hashing.goods.v1.UpdateGoodExtraInfoRequest
	96,  // 167: cloud.hashing.goods.v1.CloudHashingGoods.CreateGoodReview:output_type -> cloud.hashing.goods.v1.CreateGoodReviewResponse
	98,  // 168: cloud.hashing.goods.v1.CloudHashingGoods.UpdateGoodReview:output_type -> cloud.hashing.goods.v1.UpdateGoodReviewResponse
	100, // 169: cloud.hashing.goods.v1.CloudHashingGoods.GetGoodReview:output_type -> cloud.hashing.goods.v1.GetGoodReviewResponse
	125, // [125:170] is the sub-list for method output_type
	80,  // [80:125] is the sub-list for method input_type
	80,  // [80:80] is the sub-list for extension type_name
	80,  // [80:80] is the sub-list for extension extendee
	0,   // [0:80] is the sub-list for field type_name
}

func init() { file_npool_cloud_hashing_goods_proto_init() }
func file_npool_cloud_hashing_goods_proto_init() {
	if File_npool_cloud_hashing_goods_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cloud_hashing_goods_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVendorLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVendorLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVendorLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVendorLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVendorLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVendorLocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorLocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorLocationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTargetAreaByContinentCountryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTargetAreaByContinentCountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetAreasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTargetAreasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAppGoodPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAppGoodPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnsaleAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnsaleAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsaleAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsaleAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizeAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizeAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppTargetAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAppTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAppTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAppTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAppTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizeAppTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizeAppTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGoodTargetAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAppGoodTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeAppGoodTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAppGoodTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAppGoodTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizeAppGoodTargetAreaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnauthorizeAppGoodTargetAreaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodExtraInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodExtraInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodExtraInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodExtraInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodExtraInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodExtraInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodReviewInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_goods_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cloud_hashing_goods_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cloud_hashing_goods_proto_goTypes,
		DependencyIndexes: file_npool_cloud_hashing_goods_proto_depIdxs,
		MessageInfos:      file_npool_cloud_hashing_goods_proto_msgTypes,
	}.Build()
	File_npool_cloud_hashing_goods_proto = out.File
	file_npool_cloud_hashing_goods_proto_rawDesc = nil
	file_npool_cloud_hashing_goods_proto_goTypes = nil
	file_npool_cloud_hashing_goods_proto_depIdxs = nil
}
