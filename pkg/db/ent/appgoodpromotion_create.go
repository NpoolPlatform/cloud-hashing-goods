// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgoodpromotion"
	"github.com/google/uuid"
)

// AppGoodPromotionCreate is the builder for creating a AppGoodPromotion entity.
type AppGoodPromotionCreate struct {
	config
	mutation *AppGoodPromotionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (agpc *AppGoodPromotionCreate) SetAppID(u uuid.UUID) *AppGoodPromotionCreate {
	agpc.mutation.SetAppID(u)
	return agpc
}

// SetGoodID sets the "good_id" field.
func (agpc *AppGoodPromotionCreate) SetGoodID(u uuid.UUID) *AppGoodPromotionCreate {
	agpc.mutation.SetGoodID(u)
	return agpc
}

// SetMessage sets the "message" field.
func (agpc *AppGoodPromotionCreate) SetMessage(s string) *AppGoodPromotionCreate {
	agpc.mutation.SetMessage(s)
	return agpc
}

// SetStart sets the "start" field.
func (agpc *AppGoodPromotionCreate) SetStart(u uint32) *AppGoodPromotionCreate {
	agpc.mutation.SetStart(u)
	return agpc
}

// SetEnd sets the "end" field.
func (agpc *AppGoodPromotionCreate) SetEnd(u uint32) *AppGoodPromotionCreate {
	agpc.mutation.SetEnd(u)
	return agpc
}

// SetPrice sets the "price" field.
func (agpc *AppGoodPromotionCreate) SetPrice(u uint64) *AppGoodPromotionCreate {
	agpc.mutation.SetPrice(u)
	return agpc
}

// SetCreateAt sets the "create_at" field.
func (agpc *AppGoodPromotionCreate) SetCreateAt(u uint32) *AppGoodPromotionCreate {
	agpc.mutation.SetCreateAt(u)
	return agpc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agpc *AppGoodPromotionCreate) SetNillableCreateAt(u *uint32) *AppGoodPromotionCreate {
	if u != nil {
		agpc.SetCreateAt(*u)
	}
	return agpc
}

// SetUpdateAt sets the "update_at" field.
func (agpc *AppGoodPromotionCreate) SetUpdateAt(u uint32) *AppGoodPromotionCreate {
	agpc.mutation.SetUpdateAt(u)
	return agpc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (agpc *AppGoodPromotionCreate) SetNillableUpdateAt(u *uint32) *AppGoodPromotionCreate {
	if u != nil {
		agpc.SetUpdateAt(*u)
	}
	return agpc
}

// SetDeleteAt sets the "delete_at" field.
func (agpc *AppGoodPromotionCreate) SetDeleteAt(u uint32) *AppGoodPromotionCreate {
	agpc.mutation.SetDeleteAt(u)
	return agpc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agpc *AppGoodPromotionCreate) SetNillableDeleteAt(u *uint32) *AppGoodPromotionCreate {
	if u != nil {
		agpc.SetDeleteAt(*u)
	}
	return agpc
}

// SetID sets the "id" field.
func (agpc *AppGoodPromotionCreate) SetID(u uuid.UUID) *AppGoodPromotionCreate {
	agpc.mutation.SetID(u)
	return agpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agpc *AppGoodPromotionCreate) SetNillableID(u *uuid.UUID) *AppGoodPromotionCreate {
	if u != nil {
		agpc.SetID(*u)
	}
	return agpc
}

// Mutation returns the AppGoodPromotionMutation object of the builder.
func (agpc *AppGoodPromotionCreate) Mutation() *AppGoodPromotionMutation {
	return agpc.mutation
}

// Save creates the AppGoodPromotion in the database.
func (agpc *AppGoodPromotionCreate) Save(ctx context.Context) (*AppGoodPromotion, error) {
	var (
		err  error
		node *AppGoodPromotion
	)
	agpc.defaults()
	if len(agpc.hooks) == 0 {
		if err = agpc.check(); err != nil {
			return nil, err
		}
		node, err = agpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodPromotionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agpc.check(); err != nil {
				return nil, err
			}
			agpc.mutation = mutation
			if node, err = agpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(agpc.hooks) - 1; i >= 0; i-- {
			if agpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agpc *AppGoodPromotionCreate) SaveX(ctx context.Context) *AppGoodPromotion {
	v, err := agpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agpc *AppGoodPromotionCreate) Exec(ctx context.Context) error {
	_, err := agpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agpc *AppGoodPromotionCreate) ExecX(ctx context.Context) {
	if err := agpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agpc *AppGoodPromotionCreate) defaults() {
	if _, ok := agpc.mutation.CreateAt(); !ok {
		v := appgoodpromotion.DefaultCreateAt()
		agpc.mutation.SetCreateAt(v)
	}
	if _, ok := agpc.mutation.UpdateAt(); !ok {
		v := appgoodpromotion.DefaultUpdateAt()
		agpc.mutation.SetUpdateAt(v)
	}
	if _, ok := agpc.mutation.DeleteAt(); !ok {
		v := appgoodpromotion.DefaultDeleteAt()
		agpc.mutation.SetDeleteAt(v)
	}
	if _, ok := agpc.mutation.ID(); !ok {
		v := appgoodpromotion.DefaultID()
		agpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agpc *AppGoodPromotionCreate) check() error {
	if _, ok := agpc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppGoodPromotion.app_id"`)}
	}
	if _, ok := agpc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "AppGoodPromotion.good_id"`)}
	}
	if _, ok := agpc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "AppGoodPromotion.message"`)}
	}
	if _, ok := agpc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "AppGoodPromotion.start"`)}
	}
	if _, ok := agpc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "AppGoodPromotion.end"`)}
	}
	if _, ok := agpc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "AppGoodPromotion.price"`)}
	}
	if _, ok := agpc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppGoodPromotion.create_at"`)}
	}
	if _, ok := agpc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppGoodPromotion.update_at"`)}
	}
	if _, ok := agpc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppGoodPromotion.delete_at"`)}
	}
	return nil
}

func (agpc *AppGoodPromotionCreate) sqlSave(ctx context.Context) (*AppGoodPromotion, error) {
	_node, _spec := agpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (agpc *AppGoodPromotionCreate) createSpec() (*AppGoodPromotion, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodPromotion{config: agpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appgoodpromotion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgoodpromotion.FieldID,
			},
		}
	)
	_spec.OnConflict = agpc.conflict
	if id, ok := agpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agpc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodpromotion.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := agpc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodpromotion.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := agpc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgoodpromotion.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := agpc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := agpc.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldEnd,
		})
		_node.End = value
	}
	if value, ok := agpc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgoodpromotion.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := agpc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := agpc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := agpc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodPromotion.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodPromotionUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (agpc *AppGoodPromotionCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodPromotionUpsertOne {
	agpc.conflict = opts
	return &AppGoodPromotionUpsertOne{
		create: agpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodPromotion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agpc *AppGoodPromotionCreate) OnConflictColumns(columns ...string) *AppGoodPromotionUpsertOne {
	agpc.conflict = append(agpc.conflict, sql.ConflictColumns(columns...))
	return &AppGoodPromotionUpsertOne{
		create: agpc,
	}
}

type (
	// AppGoodPromotionUpsertOne is the builder for "upsert"-ing
	//  one AppGoodPromotion node.
	AppGoodPromotionUpsertOne struct {
		create *AppGoodPromotionCreate
	}

	// AppGoodPromotionUpsert is the "OnConflict" setter.
	AppGoodPromotionUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppGoodPromotionUpsert) SetAppID(v uuid.UUID) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateAppID() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodPromotionUpsert) SetGoodID(v uuid.UUID) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateGoodID() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldGoodID)
	return u
}

// SetMessage sets the "message" field.
func (u *AppGoodPromotionUpsert) SetMessage(v string) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateMessage() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldMessage)
	return u
}

// SetStart sets the "start" field.
func (u *AppGoodPromotionUpsert) SetStart(v uint32) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateStart() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *AppGoodPromotionUpsert) AddStart(v uint32) *AppGoodPromotionUpsert {
	u.Add(appgoodpromotion.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *AppGoodPromotionUpsert) SetEnd(v uint32) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateEnd() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *AppGoodPromotionUpsert) AddEnd(v uint32) *AppGoodPromotionUpsert {
	u.Add(appgoodpromotion.FieldEnd, v)
	return u
}

// SetPrice sets the "price" field.
func (u *AppGoodPromotionUpsert) SetPrice(v uint64) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdatePrice() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *AppGoodPromotionUpsert) AddPrice(v uint64) *AppGoodPromotionUpsert {
	u.Add(appgoodpromotion.FieldPrice, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppGoodPromotionUpsert) SetCreateAt(v uint32) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateCreateAt() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppGoodPromotionUpsert) AddCreateAt(v uint32) *AppGoodPromotionUpsert {
	u.Add(appgoodpromotion.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppGoodPromotionUpsert) SetUpdateAt(v uint32) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateUpdateAt() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppGoodPromotionUpsert) AddUpdateAt(v uint32) *AppGoodPromotionUpsert {
	u.Add(appgoodpromotion.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppGoodPromotionUpsert) SetDeleteAt(v uint32) *AppGoodPromotionUpsert {
	u.Set(appgoodpromotion.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsert) UpdateDeleteAt() *AppGoodPromotionUpsert {
	u.SetExcluded(appgoodpromotion.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppGoodPromotionUpsert) AddDeleteAt(v uint32) *AppGoodPromotionUpsert {
	u.Add(appgoodpromotion.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodPromotion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodpromotion.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppGoodPromotionUpsertOne) UpdateNewValues() *AppGoodPromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgoodpromotion.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppGoodPromotion.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppGoodPromotionUpsertOne) Ignore() *AppGoodPromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodPromotionUpsertOne) DoNothing() *AppGoodPromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodPromotionCreate.OnConflict
// documentation for more info.
func (u *AppGoodPromotionUpsertOne) Update(set func(*AppGoodPromotionUpsert)) *AppGoodPromotionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodPromotionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodPromotionUpsertOne) SetAppID(v uuid.UUID) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateAppID() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodPromotionUpsertOne) SetGoodID(v uuid.UUID) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateGoodID() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateGoodID()
	})
}

// SetMessage sets the "message" field.
func (u *AppGoodPromotionUpsertOne) SetMessage(v string) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateMessage() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateMessage()
	})
}

// SetStart sets the "start" field.
func (u *AppGoodPromotionUpsertOne) SetStart(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *AppGoodPromotionUpsertOne) AddStart(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateStart() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *AppGoodPromotionUpsertOne) SetEnd(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *AppGoodPromotionUpsertOne) AddEnd(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateEnd() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateEnd()
	})
}

// SetPrice sets the "price" field.
func (u *AppGoodPromotionUpsertOne) SetPrice(v uint64) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *AppGoodPromotionUpsertOne) AddPrice(v uint64) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdatePrice() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdatePrice()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppGoodPromotionUpsertOne) SetCreateAt(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppGoodPromotionUpsertOne) AddCreateAt(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateCreateAt() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppGoodPromotionUpsertOne) SetUpdateAt(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppGoodPromotionUpsertOne) AddUpdateAt(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateUpdateAt() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppGoodPromotionUpsertOne) SetDeleteAt(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppGoodPromotionUpsertOne) AddDeleteAt(v uint32) *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertOne) UpdateDeleteAt() *AppGoodPromotionUpsertOne {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppGoodPromotionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppGoodPromotionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodPromotionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodPromotionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppGoodPromotionUpsertOne.ID is not supported by MySQL driver. Use AppGoodPromotionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodPromotionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodPromotionCreateBulk is the builder for creating many AppGoodPromotion entities in bulk.
type AppGoodPromotionCreateBulk struct {
	config
	builders []*AppGoodPromotionCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodPromotion entities in the database.
func (agpcb *AppGoodPromotionCreateBulk) Save(ctx context.Context) ([]*AppGoodPromotion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agpcb.builders))
	nodes := make([]*AppGoodPromotion, len(agpcb.builders))
	mutators := make([]Mutator, len(agpcb.builders))
	for i := range agpcb.builders {
		func(i int, root context.Context) {
			builder := agpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodPromotionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agpcb *AppGoodPromotionCreateBulk) SaveX(ctx context.Context) []*AppGoodPromotion {
	v, err := agpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agpcb *AppGoodPromotionCreateBulk) Exec(ctx context.Context) error {
	_, err := agpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agpcb *AppGoodPromotionCreateBulk) ExecX(ctx context.Context) {
	if err := agpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodPromotion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodPromotionUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (agpcb *AppGoodPromotionCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodPromotionUpsertBulk {
	agpcb.conflict = opts
	return &AppGoodPromotionUpsertBulk{
		create: agpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodPromotion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agpcb *AppGoodPromotionCreateBulk) OnConflictColumns(columns ...string) *AppGoodPromotionUpsertBulk {
	agpcb.conflict = append(agpcb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodPromotionUpsertBulk{
		create: agpcb,
	}
}

// AppGoodPromotionUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodPromotion nodes.
type AppGoodPromotionUpsertBulk struct {
	create *AppGoodPromotionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodPromotion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodpromotion.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppGoodPromotionUpsertBulk) UpdateNewValues() *AppGoodPromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgoodpromotion.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodPromotion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppGoodPromotionUpsertBulk) Ignore() *AppGoodPromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodPromotionUpsertBulk) DoNothing() *AppGoodPromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodPromotionCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodPromotionUpsertBulk) Update(set func(*AppGoodPromotionUpsert)) *AppGoodPromotionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodPromotionUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodPromotionUpsertBulk) SetAppID(v uuid.UUID) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateAppID() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodPromotionUpsertBulk) SetGoodID(v uuid.UUID) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateGoodID() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateGoodID()
	})
}

// SetMessage sets the "message" field.
func (u *AppGoodPromotionUpsertBulk) SetMessage(v string) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateMessage() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateMessage()
	})
}

// SetStart sets the "start" field.
func (u *AppGoodPromotionUpsertBulk) SetStart(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *AppGoodPromotionUpsertBulk) AddStart(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateStart() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *AppGoodPromotionUpsertBulk) SetEnd(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *AppGoodPromotionUpsertBulk) AddEnd(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateEnd() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateEnd()
	})
}

// SetPrice sets the "price" field.
func (u *AppGoodPromotionUpsertBulk) SetPrice(v uint64) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *AppGoodPromotionUpsertBulk) AddPrice(v uint64) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdatePrice() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdatePrice()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppGoodPromotionUpsertBulk) SetCreateAt(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppGoodPromotionUpsertBulk) AddCreateAt(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateCreateAt() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppGoodPromotionUpsertBulk) SetUpdateAt(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppGoodPromotionUpsertBulk) AddUpdateAt(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateUpdateAt() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppGoodPromotionUpsertBulk) SetDeleteAt(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppGoodPromotionUpsertBulk) AddDeleteAt(v uint32) *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppGoodPromotionUpsertBulk) UpdateDeleteAt() *AppGoodPromotionUpsertBulk {
	return u.Update(func(s *AppGoodPromotionUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppGoodPromotionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppGoodPromotionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppGoodPromotionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodPromotionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
