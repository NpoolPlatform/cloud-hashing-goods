// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodinfo"
	"github.com/google/uuid"
)

// GoodInfo is the model entity for the GoodInfo schema.
type GoodInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DeviceInfoID holds the value of the "device_info_id" field.
	DeviceInfoID uuid.UUID `json:"device_info_id,omitempty"`
	// GasPrice holds the value of the "gas_price" field.
	GasPrice int `json:"gas_price,omitempty"`
	// SeparateGasFee holds the value of the "separate_gas_fee" field.
	SeparateGasFee bool `json:"separate_gas_fee,omitempty"`
	// UnitPower holds the value of the "unit_power" field.
	UnitPower float64 `json:"unit_power,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// CoinInfoID holds the value of the "coin_info_id" field.
	CoinInfoID uuid.UUID `json:"coin_info_id,omitempty"`
	// Actuals holds the value of the "actuals" field.
	Actuals bool `json:"actuals,omitempty"`
	// DeliveryTime holds the value of the "delivery_time" field.
	DeliveryTime int `json:"delivery_time,omitempty"`
	// InheritFromGoodID holds the value of the "inherit_from_good_id" field.
	InheritFromGoodID uuid.UUID `json:"inherit_from_good_id,omitempty"`
	// VendorLocationID holds the value of the "vendor_location_id" field.
	VendorLocationID uuid.UUID `json:"vendor_location_id,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// BenefitType holds the value of the "benefit_type" field.
	BenefitType goodinfo.BenefitType `json:"benefit_type,omitempty"`
	// Classic holds the value of the "classic" field.
	Classic bool `json:"classic,omitempty"`
	// SupportCoinTypeIds holds the value of the "support_coin_type_ids" field.
	SupportCoinTypeIds []uuid.UUID `json:"support_coin_type_ids,omitempty"`
	// ReviewerID holds the value of the "reviewer_id" field.
	ReviewerID uuid.UUID `json:"reviewer_id,omitempty"`
	// ReviewState holds the value of the "review_state" field.
	ReviewState goodinfo.ReviewState `json:"review_state,omitempty"`
	// Total holds the value of the "total" field.
	Total int `json:"total,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodinfo.FieldSupportCoinTypeIds:
			values[i] = new([]byte)
		case goodinfo.FieldSeparateGasFee, goodinfo.FieldActuals, goodinfo.FieldClassic:
			values[i] = new(sql.NullBool)
		case goodinfo.FieldUnitPower:
			values[i] = new(sql.NullFloat64)
		case goodinfo.FieldGasPrice, goodinfo.FieldDuration, goodinfo.FieldDeliveryTime, goodinfo.FieldPrice, goodinfo.FieldTotal, goodinfo.FieldCreateAt, goodinfo.FieldUpdateAt, goodinfo.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case goodinfo.FieldBenefitType, goodinfo.FieldReviewState:
			values[i] = new(sql.NullString)
		case goodinfo.FieldID, goodinfo.FieldDeviceInfoID, goodinfo.FieldCoinInfoID, goodinfo.FieldInheritFromGoodID, goodinfo.FieldVendorLocationID, goodinfo.FieldReviewerID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodInfo fields.
func (gi *GoodInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodinfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gi.ID = *value
			}
		case goodinfo.FieldDeviceInfoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field device_info_id", values[i])
			} else if value != nil {
				gi.DeviceInfoID = *value
			}
		case goodinfo.FieldGasPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_price", values[i])
			} else if value.Valid {
				gi.GasPrice = int(value.Int64)
			}
		case goodinfo.FieldSeparateGasFee:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field separate_gas_fee", values[i])
			} else if value.Valid {
				gi.SeparateGasFee = value.Bool
			}
		case goodinfo.FieldUnitPower:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_power", values[i])
			} else if value.Valid {
				gi.UnitPower = value.Float64
			}
		case goodinfo.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				gi.Duration = int(value.Int64)
			}
		case goodinfo.FieldCoinInfoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_info_id", values[i])
			} else if value != nil {
				gi.CoinInfoID = *value
			}
		case goodinfo.FieldActuals:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field actuals", values[i])
			} else if value.Valid {
				gi.Actuals = value.Bool
			}
		case goodinfo.FieldDeliveryTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_time", values[i])
			} else if value.Valid {
				gi.DeliveryTime = int(value.Int64)
			}
		case goodinfo.FieldInheritFromGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field inherit_from_good_id", values[i])
			} else if value != nil {
				gi.InheritFromGoodID = *value
			}
		case goodinfo.FieldVendorLocationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_location_id", values[i])
			} else if value != nil {
				gi.VendorLocationID = *value
			}
		case goodinfo.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				gi.Price = int(value.Int64)
			}
		case goodinfo.FieldBenefitType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field benefit_type", values[i])
			} else if value.Valid {
				gi.BenefitType = goodinfo.BenefitType(value.String)
			}
		case goodinfo.FieldClassic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field classic", values[i])
			} else if value.Valid {
				gi.Classic = value.Bool
			}
		case goodinfo.FieldSupportCoinTypeIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field support_coin_type_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gi.SupportCoinTypeIds); err != nil {
					return fmt.Errorf("unmarshal field support_coin_type_ids: %w", err)
				}
			}
		case goodinfo.FieldReviewerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reviewer_id", values[i])
			} else if value != nil {
				gi.ReviewerID = *value
			}
		case goodinfo.FieldReviewState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_state", values[i])
			} else if value.Valid {
				gi.ReviewState = goodinfo.ReviewState(value.String)
			}
		case goodinfo.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				gi.Total = int(value.Int64)
			}
		case goodinfo.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gi.CreateAt = value.Int64
			}
		case goodinfo.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gi.UpdateAt = value.Int64
			}
		case goodinfo.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gi.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodInfo.
// Note that you need to call GoodInfo.Unwrap() before calling this method if this GoodInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (gi *GoodInfo) Update() *GoodInfoUpdateOne {
	return (&GoodInfoClient{config: gi.config}).UpdateOne(gi)
}

// Unwrap unwraps the GoodInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gi *GoodInfo) Unwrap() *GoodInfo {
	tx, ok := gi.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodInfo is not a transactional entity")
	}
	gi.config.driver = tx.drv
	return gi
}

// String implements the fmt.Stringer.
func (gi *GoodInfo) String() string {
	var builder strings.Builder
	builder.WriteString("GoodInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", gi.ID))
	builder.WriteString(", device_info_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.DeviceInfoID))
	builder.WriteString(", gas_price=")
	builder.WriteString(fmt.Sprintf("%v", gi.GasPrice))
	builder.WriteString(", separate_gas_fee=")
	builder.WriteString(fmt.Sprintf("%v", gi.SeparateGasFee))
	builder.WriteString(", unit_power=")
	builder.WriteString(fmt.Sprintf("%v", gi.UnitPower))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", gi.Duration))
	builder.WriteString(", coin_info_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.CoinInfoID))
	builder.WriteString(", actuals=")
	builder.WriteString(fmt.Sprintf("%v", gi.Actuals))
	builder.WriteString(", delivery_time=")
	builder.WriteString(fmt.Sprintf("%v", gi.DeliveryTime))
	builder.WriteString(", inherit_from_good_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.InheritFromGoodID))
	builder.WriteString(", vendor_location_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.VendorLocationID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", gi.Price))
	builder.WriteString(", benefit_type=")
	builder.WriteString(fmt.Sprintf("%v", gi.BenefitType))
	builder.WriteString(", classic=")
	builder.WriteString(fmt.Sprintf("%v", gi.Classic))
	builder.WriteString(", support_coin_type_ids=")
	builder.WriteString(fmt.Sprintf("%v", gi.SupportCoinTypeIds))
	builder.WriteString(", reviewer_id=")
	builder.WriteString(fmt.Sprintf("%v", gi.ReviewerID))
	builder.WriteString(", review_state=")
	builder.WriteString(fmt.Sprintf("%v", gi.ReviewState))
	builder.WriteString(", total=")
	builder.WriteString(fmt.Sprintf("%v", gi.Total))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", gi.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", gi.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gi.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodInfos is a parsable slice of GoodInfo.
type GoodInfos []*GoodInfo

func (gi GoodInfos) config(cfg config) {
	for _i := range gi {
		gi[_i].config = cfg
	}
}
