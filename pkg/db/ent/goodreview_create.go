// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodreview"
	"github.com/google/uuid"
)

// GoodReviewCreate is the builder for creating a GoodReview entity.
type GoodReviewCreate struct {
	config
	mutation *GoodReviewMutation
	hooks    []Hook
}

// SetEntityType sets the "entity_type" field.
func (grc *GoodReviewCreate) SetEntityType(gt goodreview.EntityType) *GoodReviewCreate {
	grc.mutation.SetEntityType(gt)
	return grc
}

// SetReviewedID sets the "reviewed_id" field.
func (grc *GoodReviewCreate) SetReviewedID(u uuid.UUID) *GoodReviewCreate {
	grc.mutation.SetReviewedID(u)
	return grc
}

// SetReviewerID sets the "reviewer_id" field.
func (grc *GoodReviewCreate) SetReviewerID(u uuid.UUID) *GoodReviewCreate {
	grc.mutation.SetReviewerID(u)
	return grc
}

// SetState sets the "state" field.
func (grc *GoodReviewCreate) SetState(_go goodreview.State) *GoodReviewCreate {
	grc.mutation.SetState(_go)
	return grc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (grc *GoodReviewCreate) SetNillableState(_go *goodreview.State) *GoodReviewCreate {
	if _go != nil {
		grc.SetState(*_go)
	}
	return grc
}

// SetMessage sets the "message" field.
func (grc *GoodReviewCreate) SetMessage(s string) *GoodReviewCreate {
	grc.mutation.SetMessage(s)
	return grc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (grc *GoodReviewCreate) SetNillableMessage(s *string) *GoodReviewCreate {
	if s != nil {
		grc.SetMessage(*s)
	}
	return grc
}

// SetCreateAt sets the "create_at" field.
func (grc *GoodReviewCreate) SetCreateAt(i int64) *GoodReviewCreate {
	grc.mutation.SetCreateAt(i)
	return grc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (grc *GoodReviewCreate) SetNillableCreateAt(i *int64) *GoodReviewCreate {
	if i != nil {
		grc.SetCreateAt(*i)
	}
	return grc
}

// SetUpdateAt sets the "update_at" field.
func (grc *GoodReviewCreate) SetUpdateAt(i int64) *GoodReviewCreate {
	grc.mutation.SetUpdateAt(i)
	return grc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (grc *GoodReviewCreate) SetNillableUpdateAt(i *int64) *GoodReviewCreate {
	if i != nil {
		grc.SetUpdateAt(*i)
	}
	return grc
}

// SetDeleteAt sets the "delete_at" field.
func (grc *GoodReviewCreate) SetDeleteAt(i int64) *GoodReviewCreate {
	grc.mutation.SetDeleteAt(i)
	return grc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (grc *GoodReviewCreate) SetNillableDeleteAt(i *int64) *GoodReviewCreate {
	if i != nil {
		grc.SetDeleteAt(*i)
	}
	return grc
}

// SetID sets the "id" field.
func (grc *GoodReviewCreate) SetID(u uuid.UUID) *GoodReviewCreate {
	grc.mutation.SetID(u)
	return grc
}

// Mutation returns the GoodReviewMutation object of the builder.
func (grc *GoodReviewCreate) Mutation() *GoodReviewMutation {
	return grc.mutation
}

// Save creates the GoodReview in the database.
func (grc *GoodReviewCreate) Save(ctx context.Context) (*GoodReview, error) {
	var (
		err  error
		node *GoodReview
	)
	grc.defaults()
	if len(grc.hooks) == 0 {
		if err = grc.check(); err != nil {
			return nil, err
		}
		node, err = grc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = grc.check(); err != nil {
				return nil, err
			}
			grc.mutation = mutation
			if node, err = grc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(grc.hooks) - 1; i >= 0; i-- {
			if grc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = grc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, grc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GoodReviewCreate) SaveX(ctx context.Context) *GoodReview {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GoodReviewCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GoodReviewCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GoodReviewCreate) defaults() {
	if _, ok := grc.mutation.State(); !ok {
		v := goodreview.DefaultState
		grc.mutation.SetState(v)
	}
	if _, ok := grc.mutation.Message(); !ok {
		v := goodreview.DefaultMessage
		grc.mutation.SetMessage(v)
	}
	if _, ok := grc.mutation.CreateAt(); !ok {
		v := goodreview.DefaultCreateAt()
		grc.mutation.SetCreateAt(v)
	}
	if _, ok := grc.mutation.UpdateAt(); !ok {
		v := goodreview.DefaultUpdateAt()
		grc.mutation.SetUpdateAt(v)
	}
	if _, ok := grc.mutation.DeleteAt(); !ok {
		v := goodreview.DefaultDeleteAt()
		grc.mutation.SetDeleteAt(v)
	}
	if _, ok := grc.mutation.ID(); !ok {
		v := goodreview.DefaultID()
		grc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GoodReviewCreate) check() error {
	if _, ok := grc.mutation.EntityType(); !ok {
		return &ValidationError{Name: "entity_type", err: errors.New(`ent: missing required field "entity_type"`)}
	}
	if v, ok := grc.mutation.EntityType(); ok {
		if err := goodreview.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "entity_type": %w`, err)}
		}
	}
	if _, ok := grc.mutation.ReviewedID(); !ok {
		return &ValidationError{Name: "reviewed_id", err: errors.New(`ent: missing required field "reviewed_id"`)}
	}
	if _, ok := grc.mutation.ReviewerID(); !ok {
		return &ValidationError{Name: "reviewer_id", err: errors.New(`ent: missing required field "reviewer_id"`)}
	}
	if _, ok := grc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "state"`)}
	}
	if v, ok := grc.mutation.State(); ok {
		if err := goodreview.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "state": %w`, err)}
		}
	}
	if _, ok := grc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "message"`)}
	}
	if _, ok := grc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := grc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := grc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (grc *GoodReviewCreate) sqlSave(ctx context.Context) (*GoodReview, error) {
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (grc *GoodReviewCreate) createSpec() (*GoodReview, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodReview{config: grc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodreview.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodreview.FieldID,
			},
		}
	)
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grc.mutation.EntityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodreview.FieldEntityType,
		})
		_node.EntityType = value
	}
	if value, ok := grc.mutation.ReviewedID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreview.FieldReviewedID,
		})
		_node.ReviewedID = value
	}
	if value, ok := grc.mutation.ReviewerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreview.FieldReviewerID,
		})
		_node.ReviewerID = value
	}
	if value, ok := grc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodreview.FieldState,
		})
		_node.State = value
	}
	if value, ok := grc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodreview.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := grc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := grc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := grc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// GoodReviewCreateBulk is the builder for creating many GoodReview entities in bulk.
type GoodReviewCreateBulk struct {
	config
	builders []*GoodReviewCreate
}

// Save creates the GoodReview entities in the database.
func (grcb *GoodReviewCreateBulk) Save(ctx context.Context) ([]*GoodReview, error) {
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GoodReview, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodReviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GoodReviewCreateBulk) SaveX(ctx context.Context) []*GoodReview {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GoodReviewCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GoodReviewCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}
