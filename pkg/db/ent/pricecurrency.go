// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/pricecurrency"
	"github.com/google/uuid"
)

// PriceCurrency is the model entity for the PriceCurrency schema.
type PriceCurrency struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PriceCurrency) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case pricecurrency.FieldCreateAt, pricecurrency.FieldUpdateAt, pricecurrency.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case pricecurrency.FieldName, pricecurrency.FieldUnit, pricecurrency.FieldSymbol:
			values[i] = new(sql.NullString)
		case pricecurrency.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PriceCurrency", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PriceCurrency fields.
func (pc *PriceCurrency) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pricecurrency.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pc.ID = *value
			}
		case pricecurrency.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case pricecurrency.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				pc.Unit = value.String
			}
		case pricecurrency.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				pc.Symbol = value.String
			}
		case pricecurrency.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				pc.CreateAt = uint32(value.Int64)
			}
		case pricecurrency.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				pc.UpdateAt = uint32(value.Int64)
			}
		case pricecurrency.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				pc.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PriceCurrency.
// Note that you need to call PriceCurrency.Unwrap() before calling this method if this PriceCurrency
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PriceCurrency) Update() *PriceCurrencyUpdateOne {
	return (&PriceCurrencyClient{config: pc.config}).UpdateOne(pc)
}

// Unwrap unwraps the PriceCurrency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PriceCurrency) Unwrap() *PriceCurrency {
	tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PriceCurrency is not a transactional entity")
	}
	pc.config.driver = tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PriceCurrency) String() string {
	var builder strings.Builder
	builder.WriteString("PriceCurrency(")
	builder.WriteString(fmt.Sprintf("id=%v", pc.ID))
	builder.WriteString(", name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", unit=")
	builder.WriteString(pc.Unit)
	builder.WriteString(", symbol=")
	builder.WriteString(pc.Symbol)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", pc.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", pc.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", pc.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// PriceCurrencies is a parsable slice of PriceCurrency.
type PriceCurrencies []*PriceCurrency

func (pc PriceCurrencies) config(cfg config) {
	for _i := range pc {
		pc[_i].config = cfg
	}
}
