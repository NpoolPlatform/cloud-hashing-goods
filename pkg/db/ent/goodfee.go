// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodfee"
	"github.com/google/uuid"
)

// GoodFee is the model entity for the GoodFee schema.
type GoodFee struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// FeeType holds the value of the "fee_type" field.
	FeeType string `json:"fee_type,omitempty"`
	// PayType holds the value of the "pay_type" field.
	PayType goodfee.PayType `json:"pay_type,omitempty"`
	// PercentValue holds the value of the "percent_value" field.
	PercentValue int32 `json:"percent_value,omitempty"`
	// AmountValue holds the value of the "amount_value" field.
	AmountValue int32 `json:"amount_value,omitempty"`
	// AmountUnit holds the value of the "amount_unit" field.
	AmountUnit string `json:"amount_unit,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodFee) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodfee.FieldPercentValue, goodfee.FieldAmountValue, goodfee.FieldCreateAt, goodfee.FieldUpdateAt, goodfee.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case goodfee.FieldFeeType, goodfee.FieldPayType, goodfee.FieldAmountUnit:
			values[i] = new(sql.NullString)
		case goodfee.FieldID, goodfee.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodFee", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodFee fields.
func (gf *GoodFee) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodfee.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gf.ID = *value
			}
		case goodfee.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gf.GoodID = *value
			}
		case goodfee.FieldFeeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_type", values[i])
			} else if value.Valid {
				gf.FeeType = value.String
			}
		case goodfee.FieldPayType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pay_type", values[i])
			} else if value.Valid {
				gf.PayType = goodfee.PayType(value.String)
			}
		case goodfee.FieldPercentValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field percent_value", values[i])
			} else if value.Valid {
				gf.PercentValue = int32(value.Int64)
			}
		case goodfee.FieldAmountValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_value", values[i])
			} else if value.Valid {
				gf.AmountValue = int32(value.Int64)
			}
		case goodfee.FieldAmountUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amount_unit", values[i])
			} else if value.Valid {
				gf.AmountUnit = value.String
			}
		case goodfee.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gf.CreateAt = uint32(value.Int64)
			}
		case goodfee.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gf.UpdateAt = uint32(value.Int64)
			}
		case goodfee.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gf.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodFee.
// Note that you need to call GoodFee.Unwrap() before calling this method if this GoodFee
// was returned from a transaction, and the transaction was committed or rolled back.
func (gf *GoodFee) Update() *GoodFeeUpdateOne {
	return (&GoodFeeClient{config: gf.config}).UpdateOne(gf)
}

// Unwrap unwraps the GoodFee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gf *GoodFee) Unwrap() *GoodFee {
	tx, ok := gf.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodFee is not a transactional entity")
	}
	gf.config.driver = tx.drv
	return gf
}

// String implements the fmt.Stringer.
func (gf *GoodFee) String() string {
	var builder strings.Builder
	builder.WriteString("GoodFee(")
	builder.WriteString(fmt.Sprintf("id=%v", gf.ID))
	builder.WriteString(", good_id=")
	builder.WriteString(fmt.Sprintf("%v", gf.GoodID))
	builder.WriteString(", fee_type=")
	builder.WriteString(gf.FeeType)
	builder.WriteString(", pay_type=")
	builder.WriteString(fmt.Sprintf("%v", gf.PayType))
	builder.WriteString(", percent_value=")
	builder.WriteString(fmt.Sprintf("%v", gf.PercentValue))
	builder.WriteString(", amount_value=")
	builder.WriteString(fmt.Sprintf("%v", gf.AmountValue))
	builder.WriteString(", amount_unit=")
	builder.WriteString(gf.AmountUnit)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", gf.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", gf.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gf.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodFees is a parsable slice of GoodFee.
type GoodFees []*GoodFee

func (gf GoodFees) config(cfg config) {
	for _i := range gf {
		gf[_i].config = cfg
	}
}
