// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgoodtargetarea"
	"github.com/google/uuid"
)

// AppGoodTargetArea is the model entity for the AppGoodTargetArea schema.
type AppGoodTargetArea struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// TargetAreaID holds the value of the "target_area_id" field.
	TargetAreaID uuid.UUID `json:"target_area_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppGoodTargetArea) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appgoodtargetarea.FieldCreateAt, appgoodtargetarea.FieldUpdateAt, appgoodtargetarea.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appgoodtargetarea.FieldID, appgoodtargetarea.FieldAppID, appgoodtargetarea.FieldGoodID, appgoodtargetarea.FieldTargetAreaID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppGoodTargetArea", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppGoodTargetArea fields.
func (agta *AppGoodTargetArea) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appgoodtargetarea.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				agta.ID = *value
			}
		case appgoodtargetarea.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				agta.AppID = *value
			}
		case appgoodtargetarea.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				agta.GoodID = *value
			}
		case appgoodtargetarea.FieldTargetAreaID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_area_id", values[i])
			} else if value != nil {
				agta.TargetAreaID = *value
			}
		case appgoodtargetarea.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				agta.CreateAt = value.Int64
			}
		case appgoodtargetarea.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				agta.UpdateAt = value.Int64
			}
		case appgoodtargetarea.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				agta.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppGoodTargetArea.
// Note that you need to call AppGoodTargetArea.Unwrap() before calling this method if this AppGoodTargetArea
// was returned from a transaction, and the transaction was committed or rolled back.
func (agta *AppGoodTargetArea) Update() *AppGoodTargetAreaUpdateOne {
	return (&AppGoodTargetAreaClient{config: agta.config}).UpdateOne(agta)
}

// Unwrap unwraps the AppGoodTargetArea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (agta *AppGoodTargetArea) Unwrap() *AppGoodTargetArea {
	tx, ok := agta.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppGoodTargetArea is not a transactional entity")
	}
	agta.config.driver = tx.drv
	return agta
}

// String implements the fmt.Stringer.
func (agta *AppGoodTargetArea) String() string {
	var builder strings.Builder
	builder.WriteString("AppGoodTargetArea(")
	builder.WriteString(fmt.Sprintf("id=%v", agta.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", agta.AppID))
	builder.WriteString(", good_id=")
	builder.WriteString(fmt.Sprintf("%v", agta.GoodID))
	builder.WriteString(", target_area_id=")
	builder.WriteString(fmt.Sprintf("%v", agta.TargetAreaID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", agta.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", agta.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", agta.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppGoodTargetAreas is a parsable slice of AppGoodTargetArea.
type AppGoodTargetAreas []*AppGoodTargetArea

func (agta AppGoodTargetAreas) config(cfg config) {
	for _i := range agta {
		agta[_i].config = cfg
	}
}
