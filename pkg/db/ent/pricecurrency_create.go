// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/pricecurrency"
	"github.com/google/uuid"
)

// PriceCurrencyCreate is the builder for creating a PriceCurrency entity.
type PriceCurrencyCreate struct {
	config
	mutation *PriceCurrencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pcc *PriceCurrencyCreate) SetName(s string) *PriceCurrencyCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetUnit sets the "unit" field.
func (pcc *PriceCurrencyCreate) SetUnit(s string) *PriceCurrencyCreate {
	pcc.mutation.SetUnit(s)
	return pcc
}

// SetSymbol sets the "symbol" field.
func (pcc *PriceCurrencyCreate) SetSymbol(s string) *PriceCurrencyCreate {
	pcc.mutation.SetSymbol(s)
	return pcc
}

// SetCreateAt sets the "create_at" field.
func (pcc *PriceCurrencyCreate) SetCreateAt(u uint32) *PriceCurrencyCreate {
	pcc.mutation.SetCreateAt(u)
	return pcc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableCreateAt(u *uint32) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetCreateAt(*u)
	}
	return pcc
}

// SetUpdateAt sets the "update_at" field.
func (pcc *PriceCurrencyCreate) SetUpdateAt(u uint32) *PriceCurrencyCreate {
	pcc.mutation.SetUpdateAt(u)
	return pcc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableUpdateAt(u *uint32) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetUpdateAt(*u)
	}
	return pcc
}

// SetDeleteAt sets the "delete_at" field.
func (pcc *PriceCurrencyCreate) SetDeleteAt(u uint32) *PriceCurrencyCreate {
	pcc.mutation.SetDeleteAt(u)
	return pcc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableDeleteAt(u *uint32) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetDeleteAt(*u)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PriceCurrencyCreate) SetID(u uuid.UUID) *PriceCurrencyCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableID(u *uuid.UUID) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetID(*u)
	}
	return pcc
}

// Mutation returns the PriceCurrencyMutation object of the builder.
func (pcc *PriceCurrencyCreate) Mutation() *PriceCurrencyMutation {
	return pcc.mutation
}

// Save creates the PriceCurrency in the database.
func (pcc *PriceCurrencyCreate) Save(ctx context.Context) (*PriceCurrency, error) {
	var (
		err  error
		node *PriceCurrency
	)
	pcc.defaults()
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PriceCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			if pcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PriceCurrencyCreate) SaveX(ctx context.Context) *PriceCurrency {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PriceCurrencyCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PriceCurrencyCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PriceCurrencyCreate) defaults() {
	if _, ok := pcc.mutation.CreateAt(); !ok {
		v := pricecurrency.DefaultCreateAt()
		pcc.mutation.SetCreateAt(v)
	}
	if _, ok := pcc.mutation.UpdateAt(); !ok {
		v := pricecurrency.DefaultUpdateAt()
		pcc.mutation.SetUpdateAt(v)
	}
	if _, ok := pcc.mutation.DeleteAt(); !ok {
		v := pricecurrency.DefaultDeleteAt()
		pcc.mutation.SetDeleteAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := pricecurrency.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PriceCurrencyCreate) check() error {
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PriceCurrency.name"`)}
	}
	if _, ok := pcc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "PriceCurrency.unit"`)}
	}
	if _, ok := pcc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "PriceCurrency.symbol"`)}
	}
	if _, ok := pcc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "PriceCurrency.create_at"`)}
	}
	if _, ok := pcc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "PriceCurrency.update_at"`)}
	}
	if _, ok := pcc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "PriceCurrency.delete_at"`)}
	}
	return nil
}

func (pcc *PriceCurrencyCreate) sqlSave(ctx context.Context) (*PriceCurrency, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pcc *PriceCurrencyCreate) createSpec() (*PriceCurrency, *sqlgraph.CreateSpec) {
	var (
		_node = &PriceCurrency{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pricecurrency.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pricecurrency.FieldID,
			},
		}
	)
	_spec.OnConflict = pcc.conflict
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pcc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := pcc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := pcc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := pcc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := pcc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PriceCurrency.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PriceCurrencyUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (pcc *PriceCurrencyCreate) OnConflict(opts ...sql.ConflictOption) *PriceCurrencyUpsertOne {
	pcc.conflict = opts
	return &PriceCurrencyUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PriceCurrency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcc *PriceCurrencyCreate) OnConflictColumns(columns ...string) *PriceCurrencyUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PriceCurrencyUpsertOne{
		create: pcc,
	}
}

type (
	// PriceCurrencyUpsertOne is the builder for "upsert"-ing
	//  one PriceCurrency node.
	PriceCurrencyUpsertOne struct {
		create *PriceCurrencyCreate
	}

	// PriceCurrencyUpsert is the "OnConflict" setter.
	PriceCurrencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PriceCurrencyUpsert) SetName(v string) *PriceCurrencyUpsert {
	u.Set(pricecurrency.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PriceCurrencyUpsert) UpdateName() *PriceCurrencyUpsert {
	u.SetExcluded(pricecurrency.FieldName)
	return u
}

// SetUnit sets the "unit" field.
func (u *PriceCurrencyUpsert) SetUnit(v string) *PriceCurrencyUpsert {
	u.Set(pricecurrency.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *PriceCurrencyUpsert) UpdateUnit() *PriceCurrencyUpsert {
	u.SetExcluded(pricecurrency.FieldUnit)
	return u
}

// SetSymbol sets the "symbol" field.
func (u *PriceCurrencyUpsert) SetSymbol(v string) *PriceCurrencyUpsert {
	u.Set(pricecurrency.FieldSymbol, v)
	return u
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *PriceCurrencyUpsert) UpdateSymbol() *PriceCurrencyUpsert {
	u.SetExcluded(pricecurrency.FieldSymbol)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *PriceCurrencyUpsert) SetCreateAt(v uint32) *PriceCurrencyUpsert {
	u.Set(pricecurrency.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsert) UpdateCreateAt() *PriceCurrencyUpsert {
	u.SetExcluded(pricecurrency.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *PriceCurrencyUpsert) AddCreateAt(v uint32) *PriceCurrencyUpsert {
	u.Add(pricecurrency.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *PriceCurrencyUpsert) SetUpdateAt(v uint32) *PriceCurrencyUpsert {
	u.Set(pricecurrency.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsert) UpdateUpdateAt() *PriceCurrencyUpsert {
	u.SetExcluded(pricecurrency.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *PriceCurrencyUpsert) AddUpdateAt(v uint32) *PriceCurrencyUpsert {
	u.Add(pricecurrency.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *PriceCurrencyUpsert) SetDeleteAt(v uint32) *PriceCurrencyUpsert {
	u.Set(pricecurrency.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsert) UpdateDeleteAt() *PriceCurrencyUpsert {
	u.SetExcluded(pricecurrency.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *PriceCurrencyUpsert) AddDeleteAt(v uint32) *PriceCurrencyUpsert {
	u.Add(pricecurrency.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PriceCurrency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pricecurrency.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PriceCurrencyUpsertOne) UpdateNewValues() *PriceCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pricecurrency.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PriceCurrency.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PriceCurrencyUpsertOne) Ignore() *PriceCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PriceCurrencyUpsertOne) DoNothing() *PriceCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PriceCurrencyCreate.OnConflict
// documentation for more info.
func (u *PriceCurrencyUpsertOne) Update(set func(*PriceCurrencyUpsert)) *PriceCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PriceCurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PriceCurrencyUpsertOne) SetName(v string) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PriceCurrencyUpsertOne) UpdateName() *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateName()
	})
}

// SetUnit sets the "unit" field.
func (u *PriceCurrencyUpsertOne) SetUnit(v string) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *PriceCurrencyUpsertOne) UpdateUnit() *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateUnit()
	})
}

// SetSymbol sets the "symbol" field.
func (u *PriceCurrencyUpsertOne) SetSymbol(v string) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *PriceCurrencyUpsertOne) UpdateSymbol() *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateSymbol()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *PriceCurrencyUpsertOne) SetCreateAt(v uint32) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *PriceCurrencyUpsertOne) AddCreateAt(v uint32) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsertOne) UpdateCreateAt() *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *PriceCurrencyUpsertOne) SetUpdateAt(v uint32) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *PriceCurrencyUpsertOne) AddUpdateAt(v uint32) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsertOne) UpdateUpdateAt() *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *PriceCurrencyUpsertOne) SetDeleteAt(v uint32) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *PriceCurrencyUpsertOne) AddDeleteAt(v uint32) *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsertOne) UpdateDeleteAt() *PriceCurrencyUpsertOne {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *PriceCurrencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PriceCurrencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PriceCurrencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PriceCurrencyUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PriceCurrencyUpsertOne.ID is not supported by MySQL driver. Use PriceCurrencyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PriceCurrencyUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PriceCurrencyCreateBulk is the builder for creating many PriceCurrency entities in bulk.
type PriceCurrencyCreateBulk struct {
	config
	builders []*PriceCurrencyCreate
	conflict []sql.ConflictOption
}

// Save creates the PriceCurrency entities in the database.
func (pccb *PriceCurrencyCreateBulk) Save(ctx context.Context) ([]*PriceCurrency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PriceCurrency, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PriceCurrencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PriceCurrencyCreateBulk) SaveX(ctx context.Context) []*PriceCurrency {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PriceCurrencyCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PriceCurrencyCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PriceCurrency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PriceCurrencyUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (pccb *PriceCurrencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *PriceCurrencyUpsertBulk {
	pccb.conflict = opts
	return &PriceCurrencyUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PriceCurrency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pccb *PriceCurrencyCreateBulk) OnConflictColumns(columns ...string) *PriceCurrencyUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PriceCurrencyUpsertBulk{
		create: pccb,
	}
}

// PriceCurrencyUpsertBulk is the builder for "upsert"-ing
// a bulk of PriceCurrency nodes.
type PriceCurrencyUpsertBulk struct {
	create *PriceCurrencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PriceCurrency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pricecurrency.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PriceCurrencyUpsertBulk) UpdateNewValues() *PriceCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pricecurrency.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PriceCurrency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PriceCurrencyUpsertBulk) Ignore() *PriceCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PriceCurrencyUpsertBulk) DoNothing() *PriceCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PriceCurrencyCreateBulk.OnConflict
// documentation for more info.
func (u *PriceCurrencyUpsertBulk) Update(set func(*PriceCurrencyUpsert)) *PriceCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PriceCurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PriceCurrencyUpsertBulk) SetName(v string) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PriceCurrencyUpsertBulk) UpdateName() *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateName()
	})
}

// SetUnit sets the "unit" field.
func (u *PriceCurrencyUpsertBulk) SetUnit(v string) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *PriceCurrencyUpsertBulk) UpdateUnit() *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateUnit()
	})
}

// SetSymbol sets the "symbol" field.
func (u *PriceCurrencyUpsertBulk) SetSymbol(v string) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetSymbol(v)
	})
}

// UpdateSymbol sets the "symbol" field to the value that was provided on create.
func (u *PriceCurrencyUpsertBulk) UpdateSymbol() *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateSymbol()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *PriceCurrencyUpsertBulk) SetCreateAt(v uint32) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *PriceCurrencyUpsertBulk) AddCreateAt(v uint32) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsertBulk) UpdateCreateAt() *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *PriceCurrencyUpsertBulk) SetUpdateAt(v uint32) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *PriceCurrencyUpsertBulk) AddUpdateAt(v uint32) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsertBulk) UpdateUpdateAt() *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *PriceCurrencyUpsertBulk) SetDeleteAt(v uint32) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *PriceCurrencyUpsertBulk) AddDeleteAt(v uint32) *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *PriceCurrencyUpsertBulk) UpdateDeleteAt() *PriceCurrencyUpsertBulk {
	return u.Update(func(s *PriceCurrencyUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *PriceCurrencyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PriceCurrencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PriceCurrencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PriceCurrencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
