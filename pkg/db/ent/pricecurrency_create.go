// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/pricecurrency"
	"github.com/google/uuid"
)

// PriceCurrencyCreate is the builder for creating a PriceCurrency entity.
type PriceCurrencyCreate struct {
	config
	mutation *PriceCurrencyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pcc *PriceCurrencyCreate) SetName(s string) *PriceCurrencyCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetUnit sets the "unit" field.
func (pcc *PriceCurrencyCreate) SetUnit(s string) *PriceCurrencyCreate {
	pcc.mutation.SetUnit(s)
	return pcc
}

// SetSymbol sets the "symbol" field.
func (pcc *PriceCurrencyCreate) SetSymbol(s string) *PriceCurrencyCreate {
	pcc.mutation.SetSymbol(s)
	return pcc
}

// SetCreateAt sets the "create_at" field.
func (pcc *PriceCurrencyCreate) SetCreateAt(u uint32) *PriceCurrencyCreate {
	pcc.mutation.SetCreateAt(u)
	return pcc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableCreateAt(u *uint32) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetCreateAt(*u)
	}
	return pcc
}

// SetUpdateAt sets the "update_at" field.
func (pcc *PriceCurrencyCreate) SetUpdateAt(u uint32) *PriceCurrencyCreate {
	pcc.mutation.SetUpdateAt(u)
	return pcc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableUpdateAt(u *uint32) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetUpdateAt(*u)
	}
	return pcc
}

// SetDeleteAt sets the "delete_at" field.
func (pcc *PriceCurrencyCreate) SetDeleteAt(u uint32) *PriceCurrencyCreate {
	pcc.mutation.SetDeleteAt(u)
	return pcc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (pcc *PriceCurrencyCreate) SetNillableDeleteAt(u *uint32) *PriceCurrencyCreate {
	if u != nil {
		pcc.SetDeleteAt(*u)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PriceCurrencyCreate) SetID(u uuid.UUID) *PriceCurrencyCreate {
	pcc.mutation.SetID(u)
	return pcc
}

// Mutation returns the PriceCurrencyMutation object of the builder.
func (pcc *PriceCurrencyCreate) Mutation() *PriceCurrencyMutation {
	return pcc.mutation
}

// Save creates the PriceCurrency in the database.
func (pcc *PriceCurrencyCreate) Save(ctx context.Context) (*PriceCurrency, error) {
	var (
		err  error
		node *PriceCurrency
	)
	pcc.defaults()
	if len(pcc.hooks) == 0 {
		if err = pcc.check(); err != nil {
			return nil, err
		}
		node, err = pcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PriceCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcc.check(); err != nil {
				return nil, err
			}
			pcc.mutation = mutation
			if node, err = pcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcc.hooks) - 1; i >= 0; i-- {
			if pcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PriceCurrencyCreate) SaveX(ctx context.Context) *PriceCurrency {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PriceCurrencyCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PriceCurrencyCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PriceCurrencyCreate) defaults() {
	if _, ok := pcc.mutation.CreateAt(); !ok {
		v := pricecurrency.DefaultCreateAt()
		pcc.mutation.SetCreateAt(v)
	}
	if _, ok := pcc.mutation.UpdateAt(); !ok {
		v := pricecurrency.DefaultUpdateAt()
		pcc.mutation.SetUpdateAt(v)
	}
	if _, ok := pcc.mutation.DeleteAt(); !ok {
		v := pricecurrency.DefaultDeleteAt()
		pcc.mutation.SetDeleteAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := pricecurrency.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PriceCurrencyCreate) check() error {
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := pcc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "unit"`)}
	}
	if _, ok := pcc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "symbol"`)}
	}
	if _, ok := pcc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := pcc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := pcc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (pcc *PriceCurrencyCreate) sqlSave(ctx context.Context) (*PriceCurrency, error) {
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (pcc *PriceCurrencyCreate) createSpec() (*PriceCurrency, *sqlgraph.CreateSpec) {
	var (
		_node = &PriceCurrency{config: pcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pricecurrency.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pricecurrency.FieldID,
			},
		}
	)
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pcc.mutation.Unit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldUnit,
		})
		_node.Unit = value
	}
	if value, ok := pcc.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := pcc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := pcc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := pcc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// PriceCurrencyCreateBulk is the builder for creating many PriceCurrency entities in bulk.
type PriceCurrencyCreateBulk struct {
	config
	builders []*PriceCurrencyCreate
}

// Save creates the PriceCurrency entities in the database.
func (pccb *PriceCurrencyCreateBulk) Save(ctx context.Context) ([]*PriceCurrency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PriceCurrency, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PriceCurrencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PriceCurrencyCreateBulk) SaveX(ctx context.Context) []*PriceCurrency {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PriceCurrencyCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PriceCurrencyCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}
