// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/recommend"
	"github.com/google/uuid"
)

// Recommend is the model entity for the Recommend schema.
type Recommend struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// RecommenderID holds the value of the "recommender_id" field.
	RecommenderID uuid.UUID `json:"recommender_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recommend) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case recommend.FieldCreateAt, recommend.FieldUpdateAt, recommend.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case recommend.FieldMessage:
			values[i] = new(sql.NullString)
		case recommend.FieldID, recommend.FieldAppID, recommend.FieldGoodID, recommend.FieldRecommenderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Recommend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recommend fields.
func (r *Recommend) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recommend.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case recommend.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				r.AppID = *value
			}
		case recommend.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				r.GoodID = *value
			}
		case recommend.FieldRecommenderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field recommender_id", values[i])
			} else if value != nil {
				r.RecommenderID = *value
			}
		case recommend.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				r.Message = value.String
			}
		case recommend.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				r.CreateAt = uint32(value.Int64)
			}
		case recommend.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				r.UpdateAt = uint32(value.Int64)
			}
		case recommend.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				r.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Recommend.
// Note that you need to call Recommend.Unwrap() before calling this method if this Recommend
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recommend) Update() *RecommendUpdateOne {
	return (&RecommendClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Recommend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recommend) Unwrap() *Recommend {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recommend is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recommend) String() string {
	var builder strings.Builder
	builder.WriteString("Recommend(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", r.AppID))
	builder.WriteString(", good_id=")
	builder.WriteString(fmt.Sprintf("%v", r.GoodID))
	builder.WriteString(", recommender_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RecommenderID))
	builder.WriteString(", message=")
	builder.WriteString(r.Message)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", r.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", r.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", r.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// Recommends is a parsable slice of Recommend.
type Recommends []*Recommend

func (r Recommends) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
