// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/apptargetarea"
	"github.com/google/uuid"
)

// AppTargetArea is the model entity for the AppTargetArea schema.
type AppTargetArea struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TargetAreaID holds the value of the "target_area_id" field.
	TargetAreaID uuid.UUID `json:"target_area_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppTargetArea) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case apptargetarea.FieldCreateAt, apptargetarea.FieldUpdateAt, apptargetarea.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case apptargetarea.FieldID, apptargetarea.FieldTargetAreaID, apptargetarea.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppTargetArea", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppTargetArea fields.
func (ata *AppTargetArea) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apptargetarea.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ata.ID = *value
			}
		case apptargetarea.FieldTargetAreaID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field target_area_id", values[i])
			} else if value != nil {
				ata.TargetAreaID = *value
			}
		case apptargetarea.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ata.AppID = *value
			}
		case apptargetarea.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ata.CreateAt = value.Int64
			}
		case apptargetarea.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ata.UpdateAt = value.Int64
			}
		case apptargetarea.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ata.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppTargetArea.
// Note that you need to call AppTargetArea.Unwrap() before calling this method if this AppTargetArea
// was returned from a transaction, and the transaction was committed or rolled back.
func (ata *AppTargetArea) Update() *AppTargetAreaUpdateOne {
	return (&AppTargetAreaClient{config: ata.config}).UpdateOne(ata)
}

// Unwrap unwraps the AppTargetArea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ata *AppTargetArea) Unwrap() *AppTargetArea {
	tx, ok := ata.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppTargetArea is not a transactional entity")
	}
	ata.config.driver = tx.drv
	return ata
}

// String implements the fmt.Stringer.
func (ata *AppTargetArea) String() string {
	var builder strings.Builder
	builder.WriteString("AppTargetArea(")
	builder.WriteString(fmt.Sprintf("id=%v", ata.ID))
	builder.WriteString(", target_area_id=")
	builder.WriteString(fmt.Sprintf("%v", ata.TargetAreaID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", ata.AppID))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ata.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ata.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ata.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppTargetAreas is a parsable slice of AppTargetArea.
type AppTargetAreas []*AppTargetArea

func (ata AppTargetAreas) config(cfg config) {
	for _i := range ata {
		ata[_i].config = cfg
	}
}
