// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodextrainfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodExtraInfoUpdate is the builder for updating GoodExtraInfo entities.
type GoodExtraInfoUpdate struct {
	config
	hooks    []Hook
	mutation *GoodExtraInfoMutation
}

// Where appends a list predicates to the GoodExtraInfoUpdate builder.
func (geiu *GoodExtraInfoUpdate) Where(ps ...predicate.GoodExtraInfo) *GoodExtraInfoUpdate {
	geiu.mutation.Where(ps...)
	return geiu
}

// SetGoodID sets the "good_id" field.
func (geiu *GoodExtraInfoUpdate) SetGoodID(u uuid.UUID) *GoodExtraInfoUpdate {
	geiu.mutation.SetGoodID(u)
	return geiu
}

// SetPosters sets the "posters" field.
func (geiu *GoodExtraInfoUpdate) SetPosters(s []string) *GoodExtraInfoUpdate {
	geiu.mutation.SetPosters(s)
	return geiu
}

// SetLabels sets the "labels" field.
func (geiu *GoodExtraInfoUpdate) SetLabels(s []string) *GoodExtraInfoUpdate {
	geiu.mutation.SetLabels(s)
	return geiu
}

// SetOutSale sets the "out_sale" field.
func (geiu *GoodExtraInfoUpdate) SetOutSale(b bool) *GoodExtraInfoUpdate {
	geiu.mutation.SetOutSale(b)
	return geiu
}

// SetPreSale sets the "pre_sale" field.
func (geiu *GoodExtraInfoUpdate) SetPreSale(b bool) *GoodExtraInfoUpdate {
	geiu.mutation.SetPreSale(b)
	return geiu
}

// SetCreateAt sets the "create_at" field.
func (geiu *GoodExtraInfoUpdate) SetCreateAt(i int64) *GoodExtraInfoUpdate {
	geiu.mutation.ResetCreateAt()
	geiu.mutation.SetCreateAt(i)
	return geiu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (geiu *GoodExtraInfoUpdate) SetNillableCreateAt(i *int64) *GoodExtraInfoUpdate {
	if i != nil {
		geiu.SetCreateAt(*i)
	}
	return geiu
}

// AddCreateAt adds i to the "create_at" field.
func (geiu *GoodExtraInfoUpdate) AddCreateAt(i int64) *GoodExtraInfoUpdate {
	geiu.mutation.AddCreateAt(i)
	return geiu
}

// SetUpdateAt sets the "update_at" field.
func (geiu *GoodExtraInfoUpdate) SetUpdateAt(i int64) *GoodExtraInfoUpdate {
	geiu.mutation.ResetUpdateAt()
	geiu.mutation.SetUpdateAt(i)
	return geiu
}

// AddUpdateAt adds i to the "update_at" field.
func (geiu *GoodExtraInfoUpdate) AddUpdateAt(i int64) *GoodExtraInfoUpdate {
	geiu.mutation.AddUpdateAt(i)
	return geiu
}

// SetDeleteAt sets the "delete_at" field.
func (geiu *GoodExtraInfoUpdate) SetDeleteAt(i int64) *GoodExtraInfoUpdate {
	geiu.mutation.ResetDeleteAt()
	geiu.mutation.SetDeleteAt(i)
	return geiu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (geiu *GoodExtraInfoUpdate) SetNillableDeleteAt(i *int64) *GoodExtraInfoUpdate {
	if i != nil {
		geiu.SetDeleteAt(*i)
	}
	return geiu
}

// AddDeleteAt adds i to the "delete_at" field.
func (geiu *GoodExtraInfoUpdate) AddDeleteAt(i int64) *GoodExtraInfoUpdate {
	geiu.mutation.AddDeleteAt(i)
	return geiu
}

// Mutation returns the GoodExtraInfoMutation object of the builder.
func (geiu *GoodExtraInfoUpdate) Mutation() *GoodExtraInfoMutation {
	return geiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (geiu *GoodExtraInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	geiu.defaults()
	if len(geiu.hooks) == 0 {
		affected, err = geiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodExtraInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			geiu.mutation = mutation
			affected, err = geiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(geiu.hooks) - 1; i >= 0; i-- {
			if geiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = geiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, geiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (geiu *GoodExtraInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := geiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (geiu *GoodExtraInfoUpdate) Exec(ctx context.Context) error {
	_, err := geiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geiu *GoodExtraInfoUpdate) ExecX(ctx context.Context) {
	if err := geiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geiu *GoodExtraInfoUpdate) defaults() {
	if _, ok := geiu.mutation.UpdateAt(); !ok {
		v := goodextrainfo.UpdateDefaultUpdateAt()
		geiu.mutation.SetUpdateAt(v)
	}
}

func (geiu *GoodExtraInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodextrainfo.Table,
			Columns: goodextrainfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodextrainfo.FieldID,
			},
		},
	}
	if ps := geiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geiu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodextrainfo.FieldGoodID,
		})
	}
	if value, ok := geiu.mutation.Posters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodextrainfo.FieldPosters,
		})
	}
	if value, ok := geiu.mutation.Labels(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodextrainfo.FieldLabels,
		})
	}
	if value, ok := geiu.mutation.OutSale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodextrainfo.FieldOutSale,
		})
	}
	if value, ok := geiu.mutation.PreSale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodextrainfo.FieldPreSale,
		})
	}
	if value, ok := geiu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldCreateAt,
		})
	}
	if value, ok := geiu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldCreateAt,
		})
	}
	if value, ok := geiu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldUpdateAt,
		})
	}
	if value, ok := geiu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldUpdateAt,
		})
	}
	if value, ok := geiu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldDeleteAt,
		})
	}
	if value, ok := geiu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, geiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodextrainfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodExtraInfoUpdateOne is the builder for updating a single GoodExtraInfo entity.
type GoodExtraInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodExtraInfoMutation
}

// SetGoodID sets the "good_id" field.
func (geiuo *GoodExtraInfoUpdateOne) SetGoodID(u uuid.UUID) *GoodExtraInfoUpdateOne {
	geiuo.mutation.SetGoodID(u)
	return geiuo
}

// SetPosters sets the "posters" field.
func (geiuo *GoodExtraInfoUpdateOne) SetPosters(s []string) *GoodExtraInfoUpdateOne {
	geiuo.mutation.SetPosters(s)
	return geiuo
}

// SetLabels sets the "labels" field.
func (geiuo *GoodExtraInfoUpdateOne) SetLabels(s []string) *GoodExtraInfoUpdateOne {
	geiuo.mutation.SetLabels(s)
	return geiuo
}

// SetOutSale sets the "out_sale" field.
func (geiuo *GoodExtraInfoUpdateOne) SetOutSale(b bool) *GoodExtraInfoUpdateOne {
	geiuo.mutation.SetOutSale(b)
	return geiuo
}

// SetPreSale sets the "pre_sale" field.
func (geiuo *GoodExtraInfoUpdateOne) SetPreSale(b bool) *GoodExtraInfoUpdateOne {
	geiuo.mutation.SetPreSale(b)
	return geiuo
}

// SetCreateAt sets the "create_at" field.
func (geiuo *GoodExtraInfoUpdateOne) SetCreateAt(i int64) *GoodExtraInfoUpdateOne {
	geiuo.mutation.ResetCreateAt()
	geiuo.mutation.SetCreateAt(i)
	return geiuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (geiuo *GoodExtraInfoUpdateOne) SetNillableCreateAt(i *int64) *GoodExtraInfoUpdateOne {
	if i != nil {
		geiuo.SetCreateAt(*i)
	}
	return geiuo
}

// AddCreateAt adds i to the "create_at" field.
func (geiuo *GoodExtraInfoUpdateOne) AddCreateAt(i int64) *GoodExtraInfoUpdateOne {
	geiuo.mutation.AddCreateAt(i)
	return geiuo
}

// SetUpdateAt sets the "update_at" field.
func (geiuo *GoodExtraInfoUpdateOne) SetUpdateAt(i int64) *GoodExtraInfoUpdateOne {
	geiuo.mutation.ResetUpdateAt()
	geiuo.mutation.SetUpdateAt(i)
	return geiuo
}

// AddUpdateAt adds i to the "update_at" field.
func (geiuo *GoodExtraInfoUpdateOne) AddUpdateAt(i int64) *GoodExtraInfoUpdateOne {
	geiuo.mutation.AddUpdateAt(i)
	return geiuo
}

// SetDeleteAt sets the "delete_at" field.
func (geiuo *GoodExtraInfoUpdateOne) SetDeleteAt(i int64) *GoodExtraInfoUpdateOne {
	geiuo.mutation.ResetDeleteAt()
	geiuo.mutation.SetDeleteAt(i)
	return geiuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (geiuo *GoodExtraInfoUpdateOne) SetNillableDeleteAt(i *int64) *GoodExtraInfoUpdateOne {
	if i != nil {
		geiuo.SetDeleteAt(*i)
	}
	return geiuo
}

// AddDeleteAt adds i to the "delete_at" field.
func (geiuo *GoodExtraInfoUpdateOne) AddDeleteAt(i int64) *GoodExtraInfoUpdateOne {
	geiuo.mutation.AddDeleteAt(i)
	return geiuo
}

// Mutation returns the GoodExtraInfoMutation object of the builder.
func (geiuo *GoodExtraInfoUpdateOne) Mutation() *GoodExtraInfoMutation {
	return geiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (geiuo *GoodExtraInfoUpdateOne) Select(field string, fields ...string) *GoodExtraInfoUpdateOne {
	geiuo.fields = append([]string{field}, fields...)
	return geiuo
}

// Save executes the query and returns the updated GoodExtraInfo entity.
func (geiuo *GoodExtraInfoUpdateOne) Save(ctx context.Context) (*GoodExtraInfo, error) {
	var (
		err  error
		node *GoodExtraInfo
	)
	geiuo.defaults()
	if len(geiuo.hooks) == 0 {
		node, err = geiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodExtraInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			geiuo.mutation = mutation
			node, err = geiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(geiuo.hooks) - 1; i >= 0; i-- {
			if geiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = geiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, geiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (geiuo *GoodExtraInfoUpdateOne) SaveX(ctx context.Context) *GoodExtraInfo {
	node, err := geiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (geiuo *GoodExtraInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := geiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geiuo *GoodExtraInfoUpdateOne) ExecX(ctx context.Context) {
	if err := geiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geiuo *GoodExtraInfoUpdateOne) defaults() {
	if _, ok := geiuo.mutation.UpdateAt(); !ok {
		v := goodextrainfo.UpdateDefaultUpdateAt()
		geiuo.mutation.SetUpdateAt(v)
	}
}

func (geiuo *GoodExtraInfoUpdateOne) sqlSave(ctx context.Context) (_node *GoodExtraInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodextrainfo.Table,
			Columns: goodextrainfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodextrainfo.FieldID,
			},
		},
	}
	id, ok := geiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodExtraInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := geiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodextrainfo.FieldID)
		for _, f := range fields {
			if !goodextrainfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodextrainfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := geiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geiuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodextrainfo.FieldGoodID,
		})
	}
	if value, ok := geiuo.mutation.Posters(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodextrainfo.FieldPosters,
		})
	}
	if value, ok := geiuo.mutation.Labels(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodextrainfo.FieldLabels,
		})
	}
	if value, ok := geiuo.mutation.OutSale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodextrainfo.FieldOutSale,
		})
	}
	if value, ok := geiuo.mutation.PreSale(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodextrainfo.FieldPreSale,
		})
	}
	if value, ok := geiuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldCreateAt,
		})
	}
	if value, ok := geiuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldCreateAt,
		})
	}
	if value, ok := geiuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldUpdateAt,
		})
	}
	if value, ok := geiuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldUpdateAt,
		})
	}
	if value, ok := geiuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldDeleteAt,
		})
	}
	if value, ok := geiuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodextrainfo.FieldDeleteAt,
		})
	}
	_node = &GoodExtraInfo{config: geiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, geiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodextrainfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
