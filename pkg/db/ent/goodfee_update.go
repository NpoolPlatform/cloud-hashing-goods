// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodfee"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodFeeUpdate is the builder for updating GoodFee entities.
type GoodFeeUpdate struct {
	config
	hooks    []Hook
	mutation *GoodFeeMutation
}

// Where appends a list predicates to the GoodFeeUpdate builder.
func (gfu *GoodFeeUpdate) Where(ps ...predicate.GoodFee) *GoodFeeUpdate {
	gfu.mutation.Where(ps...)
	return gfu
}

// SetAppID sets the "app_id" field.
func (gfu *GoodFeeUpdate) SetAppID(u uuid.UUID) *GoodFeeUpdate {
	gfu.mutation.SetAppID(u)
	return gfu
}

// SetFeeType sets the "fee_type" field.
func (gfu *GoodFeeUpdate) SetFeeType(s string) *GoodFeeUpdate {
	gfu.mutation.SetFeeType(s)
	return gfu
}

// SetFeeDescription sets the "fee_description" field.
func (gfu *GoodFeeUpdate) SetFeeDescription(s string) *GoodFeeUpdate {
	gfu.mutation.SetFeeDescription(s)
	return gfu
}

// SetPayType sets the "pay_type" field.
func (gfu *GoodFeeUpdate) SetPayType(gt goodfee.PayType) *GoodFeeUpdate {
	gfu.mutation.SetPayType(gt)
	return gfu
}

// SetCreateAt sets the "create_at" field.
func (gfu *GoodFeeUpdate) SetCreateAt(u uint32) *GoodFeeUpdate {
	gfu.mutation.ResetCreateAt()
	gfu.mutation.SetCreateAt(u)
	return gfu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gfu *GoodFeeUpdate) SetNillableCreateAt(u *uint32) *GoodFeeUpdate {
	if u != nil {
		gfu.SetCreateAt(*u)
	}
	return gfu
}

// AddCreateAt adds u to the "create_at" field.
func (gfu *GoodFeeUpdate) AddCreateAt(u uint32) *GoodFeeUpdate {
	gfu.mutation.AddCreateAt(u)
	return gfu
}

// SetUpdateAt sets the "update_at" field.
func (gfu *GoodFeeUpdate) SetUpdateAt(u uint32) *GoodFeeUpdate {
	gfu.mutation.ResetUpdateAt()
	gfu.mutation.SetUpdateAt(u)
	return gfu
}

// AddUpdateAt adds u to the "update_at" field.
func (gfu *GoodFeeUpdate) AddUpdateAt(u uint32) *GoodFeeUpdate {
	gfu.mutation.AddUpdateAt(u)
	return gfu
}

// SetDeleteAt sets the "delete_at" field.
func (gfu *GoodFeeUpdate) SetDeleteAt(u uint32) *GoodFeeUpdate {
	gfu.mutation.ResetDeleteAt()
	gfu.mutation.SetDeleteAt(u)
	return gfu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gfu *GoodFeeUpdate) SetNillableDeleteAt(u *uint32) *GoodFeeUpdate {
	if u != nil {
		gfu.SetDeleteAt(*u)
	}
	return gfu
}

// AddDeleteAt adds u to the "delete_at" field.
func (gfu *GoodFeeUpdate) AddDeleteAt(u uint32) *GoodFeeUpdate {
	gfu.mutation.AddDeleteAt(u)
	return gfu
}

// Mutation returns the GoodFeeMutation object of the builder.
func (gfu *GoodFeeUpdate) Mutation() *GoodFeeMutation {
	return gfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gfu *GoodFeeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gfu.defaults()
	if len(gfu.hooks) == 0 {
		if err = gfu.check(); err != nil {
			return 0, err
		}
		affected, err = gfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodFeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gfu.check(); err != nil {
				return 0, err
			}
			gfu.mutation = mutation
			affected, err = gfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gfu.hooks) - 1; i >= 0; i-- {
			if gfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gfu *GoodFeeUpdate) SaveX(ctx context.Context) int {
	affected, err := gfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gfu *GoodFeeUpdate) Exec(ctx context.Context) error {
	_, err := gfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfu *GoodFeeUpdate) ExecX(ctx context.Context) {
	if err := gfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gfu *GoodFeeUpdate) defaults() {
	if _, ok := gfu.mutation.UpdateAt(); !ok {
		v := goodfee.UpdateDefaultUpdateAt()
		gfu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfu *GoodFeeUpdate) check() error {
	if v, ok := gfu.mutation.FeeDescription(); ok {
		if err := goodfee.FeeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fee_description", err: fmt.Errorf("ent: validator failed for field \"fee_description\": %w", err)}
		}
	}
	if v, ok := gfu.mutation.PayType(); ok {
		if err := goodfee.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "pay_type", err: fmt.Errorf("ent: validator failed for field \"pay_type\": %w", err)}
		}
	}
	return nil
}

func (gfu *GoodFeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodfee.Table,
			Columns: goodfee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodfee.FieldID,
			},
		},
	}
	if ps := gfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gfu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodfee.FieldAppID,
		})
	}
	if value, ok := gfu.mutation.FeeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodfee.FieldFeeType,
		})
	}
	if value, ok := gfu.mutation.FeeDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodfee.FieldFeeDescription,
		})
	}
	if value, ok := gfu.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodfee.FieldPayType,
		})
	}
	if value, ok := gfu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldCreateAt,
		})
	}
	if value, ok := gfu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldCreateAt,
		})
	}
	if value, ok := gfu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldUpdateAt,
		})
	}
	if value, ok := gfu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldUpdateAt,
		})
	}
	if value, ok := gfu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldDeleteAt,
		})
	}
	if value, ok := gfu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodfee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodFeeUpdateOne is the builder for updating a single GoodFee entity.
type GoodFeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodFeeMutation
}

// SetAppID sets the "app_id" field.
func (gfuo *GoodFeeUpdateOne) SetAppID(u uuid.UUID) *GoodFeeUpdateOne {
	gfuo.mutation.SetAppID(u)
	return gfuo
}

// SetFeeType sets the "fee_type" field.
func (gfuo *GoodFeeUpdateOne) SetFeeType(s string) *GoodFeeUpdateOne {
	gfuo.mutation.SetFeeType(s)
	return gfuo
}

// SetFeeDescription sets the "fee_description" field.
func (gfuo *GoodFeeUpdateOne) SetFeeDescription(s string) *GoodFeeUpdateOne {
	gfuo.mutation.SetFeeDescription(s)
	return gfuo
}

// SetPayType sets the "pay_type" field.
func (gfuo *GoodFeeUpdateOne) SetPayType(gt goodfee.PayType) *GoodFeeUpdateOne {
	gfuo.mutation.SetPayType(gt)
	return gfuo
}

// SetCreateAt sets the "create_at" field.
func (gfuo *GoodFeeUpdateOne) SetCreateAt(u uint32) *GoodFeeUpdateOne {
	gfuo.mutation.ResetCreateAt()
	gfuo.mutation.SetCreateAt(u)
	return gfuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gfuo *GoodFeeUpdateOne) SetNillableCreateAt(u *uint32) *GoodFeeUpdateOne {
	if u != nil {
		gfuo.SetCreateAt(*u)
	}
	return gfuo
}

// AddCreateAt adds u to the "create_at" field.
func (gfuo *GoodFeeUpdateOne) AddCreateAt(u uint32) *GoodFeeUpdateOne {
	gfuo.mutation.AddCreateAt(u)
	return gfuo
}

// SetUpdateAt sets the "update_at" field.
func (gfuo *GoodFeeUpdateOne) SetUpdateAt(u uint32) *GoodFeeUpdateOne {
	gfuo.mutation.ResetUpdateAt()
	gfuo.mutation.SetUpdateAt(u)
	return gfuo
}

// AddUpdateAt adds u to the "update_at" field.
func (gfuo *GoodFeeUpdateOne) AddUpdateAt(u uint32) *GoodFeeUpdateOne {
	gfuo.mutation.AddUpdateAt(u)
	return gfuo
}

// SetDeleteAt sets the "delete_at" field.
func (gfuo *GoodFeeUpdateOne) SetDeleteAt(u uint32) *GoodFeeUpdateOne {
	gfuo.mutation.ResetDeleteAt()
	gfuo.mutation.SetDeleteAt(u)
	return gfuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gfuo *GoodFeeUpdateOne) SetNillableDeleteAt(u *uint32) *GoodFeeUpdateOne {
	if u != nil {
		gfuo.SetDeleteAt(*u)
	}
	return gfuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (gfuo *GoodFeeUpdateOne) AddDeleteAt(u uint32) *GoodFeeUpdateOne {
	gfuo.mutation.AddDeleteAt(u)
	return gfuo
}

// Mutation returns the GoodFeeMutation object of the builder.
func (gfuo *GoodFeeUpdateOne) Mutation() *GoodFeeMutation {
	return gfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gfuo *GoodFeeUpdateOne) Select(field string, fields ...string) *GoodFeeUpdateOne {
	gfuo.fields = append([]string{field}, fields...)
	return gfuo
}

// Save executes the query and returns the updated GoodFee entity.
func (gfuo *GoodFeeUpdateOne) Save(ctx context.Context) (*GoodFee, error) {
	var (
		err  error
		node *GoodFee
	)
	gfuo.defaults()
	if len(gfuo.hooks) == 0 {
		if err = gfuo.check(); err != nil {
			return nil, err
		}
		node, err = gfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodFeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gfuo.check(); err != nil {
				return nil, err
			}
			gfuo.mutation = mutation
			node, err = gfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gfuo.hooks) - 1; i >= 0; i-- {
			if gfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gfuo *GoodFeeUpdateOne) SaveX(ctx context.Context) *GoodFee {
	node, err := gfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gfuo *GoodFeeUpdateOne) Exec(ctx context.Context) error {
	_, err := gfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfuo *GoodFeeUpdateOne) ExecX(ctx context.Context) {
	if err := gfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gfuo *GoodFeeUpdateOne) defaults() {
	if _, ok := gfuo.mutation.UpdateAt(); !ok {
		v := goodfee.UpdateDefaultUpdateAt()
		gfuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfuo *GoodFeeUpdateOne) check() error {
	if v, ok := gfuo.mutation.FeeDescription(); ok {
		if err := goodfee.FeeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fee_description", err: fmt.Errorf("ent: validator failed for field \"fee_description\": %w", err)}
		}
	}
	if v, ok := gfuo.mutation.PayType(); ok {
		if err := goodfee.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "pay_type", err: fmt.Errorf("ent: validator failed for field \"pay_type\": %w", err)}
		}
	}
	return nil
}

func (gfuo *GoodFeeUpdateOne) sqlSave(ctx context.Context) (_node *GoodFee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodfee.Table,
			Columns: goodfee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodfee.FieldID,
			},
		},
	}
	id, ok := gfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodFee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodfee.FieldID)
		for _, f := range fields {
			if !goodfee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodfee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gfuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodfee.FieldAppID,
		})
	}
	if value, ok := gfuo.mutation.FeeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodfee.FieldFeeType,
		})
	}
	if value, ok := gfuo.mutation.FeeDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodfee.FieldFeeDescription,
		})
	}
	if value, ok := gfuo.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodfee.FieldPayType,
		})
	}
	if value, ok := gfuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldCreateAt,
		})
	}
	if value, ok := gfuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldCreateAt,
		})
	}
	if value, ok := gfuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldUpdateAt,
		})
	}
	if value, ok := gfuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldUpdateAt,
		})
	}
	if value, ok := gfuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldDeleteAt,
		})
	}
	if value, ok := gfuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldDeleteAt,
		})
	}
	_node = &GoodFee{config: gfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodfee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
