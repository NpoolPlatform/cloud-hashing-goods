// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgood"
	"github.com/google/uuid"
)

// AppGoodCreate is the builder for creating a AppGood entity.
type AppGoodCreate struct {
	config
	mutation *AppGoodMutation
	hooks    []Hook
}

// SetAppID sets the "app_id" field.
func (agc *AppGoodCreate) SetAppID(u uuid.UUID) *AppGoodCreate {
	agc.mutation.SetAppID(u)
	return agc
}

// SetGoodID sets the "good_id" field.
func (agc *AppGoodCreate) SetGoodID(u uuid.UUID) *AppGoodCreate {
	agc.mutation.SetGoodID(u)
	return agc
}

// SetAuthorized sets the "authorized" field.
func (agc *AppGoodCreate) SetAuthorized(b bool) *AppGoodCreate {
	agc.mutation.SetAuthorized(b)
	return agc
}

// SetNillableAuthorized sets the "authorized" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableAuthorized(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetAuthorized(*b)
	}
	return agc
}

// SetOnline sets the "online" field.
func (agc *AppGoodCreate) SetOnline(b bool) *AppGoodCreate {
	agc.mutation.SetOnline(b)
	return agc
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableOnline(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetOnline(*b)
	}
	return agc
}

// SetInitAreaStrategy sets the "init_area_strategy" field.
func (agc *AppGoodCreate) SetInitAreaStrategy(aas appgood.InitAreaStrategy) *AppGoodCreate {
	agc.mutation.SetInitAreaStrategy(aas)
	return agc
}

// SetPrice sets the "price" field.
func (agc *AppGoodCreate) SetPrice(u uint64) *AppGoodCreate {
	agc.mutation.SetPrice(u)
	return agc
}

// SetInvitationOnly sets the "invitation_only" field.
func (agc *AppGoodCreate) SetInvitationOnly(b bool) *AppGoodCreate {
	agc.mutation.SetInvitationOnly(b)
	return agc
}

// SetNillableInvitationOnly sets the "invitation_only" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableInvitationOnly(b *bool) *AppGoodCreate {
	if b != nil {
		agc.SetInvitationOnly(*b)
	}
	return agc
}

// SetCreateAt sets the "create_at" field.
func (agc *AppGoodCreate) SetCreateAt(i int64) *AppGoodCreate {
	agc.mutation.SetCreateAt(i)
	return agc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableCreateAt(i *int64) *AppGoodCreate {
	if i != nil {
		agc.SetCreateAt(*i)
	}
	return agc
}

// SetUpdateAt sets the "update_at" field.
func (agc *AppGoodCreate) SetUpdateAt(i int64) *AppGoodCreate {
	agc.mutation.SetUpdateAt(i)
	return agc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableUpdateAt(i *int64) *AppGoodCreate {
	if i != nil {
		agc.SetUpdateAt(*i)
	}
	return agc
}

// SetDeleteAt sets the "delete_at" field.
func (agc *AppGoodCreate) SetDeleteAt(i int64) *AppGoodCreate {
	agc.mutation.SetDeleteAt(i)
	return agc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agc *AppGoodCreate) SetNillableDeleteAt(i *int64) *AppGoodCreate {
	if i != nil {
		agc.SetDeleteAt(*i)
	}
	return agc
}

// SetID sets the "id" field.
func (agc *AppGoodCreate) SetID(u uuid.UUID) *AppGoodCreate {
	agc.mutation.SetID(u)
	return agc
}

// Mutation returns the AppGoodMutation object of the builder.
func (agc *AppGoodCreate) Mutation() *AppGoodMutation {
	return agc.mutation
}

// Save creates the AppGood in the database.
func (agc *AppGoodCreate) Save(ctx context.Context) (*AppGood, error) {
	var (
		err  error
		node *AppGood
	)
	agc.defaults()
	if len(agc.hooks) == 0 {
		if err = agc.check(); err != nil {
			return nil, err
		}
		node, err = agc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agc.check(); err != nil {
				return nil, err
			}
			agc.mutation = mutation
			if node, err = agc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(agc.hooks) - 1; i >= 0; i-- {
			if agc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agc *AppGoodCreate) SaveX(ctx context.Context) *AppGood {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *AppGoodCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *AppGoodCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *AppGoodCreate) defaults() {
	if _, ok := agc.mutation.Authorized(); !ok {
		v := appgood.DefaultAuthorized
		agc.mutation.SetAuthorized(v)
	}
	if _, ok := agc.mutation.Online(); !ok {
		v := appgood.DefaultOnline
		agc.mutation.SetOnline(v)
	}
	if _, ok := agc.mutation.InvitationOnly(); !ok {
		v := appgood.DefaultInvitationOnly
		agc.mutation.SetInvitationOnly(v)
	}
	if _, ok := agc.mutation.CreateAt(); !ok {
		v := appgood.DefaultCreateAt()
		agc.mutation.SetCreateAt(v)
	}
	if _, ok := agc.mutation.UpdateAt(); !ok {
		v := appgood.DefaultUpdateAt()
		agc.mutation.SetUpdateAt(v)
	}
	if _, ok := agc.mutation.DeleteAt(); !ok {
		v := appgood.DefaultDeleteAt()
		agc.mutation.SetDeleteAt(v)
	}
	if _, ok := agc.mutation.ID(); !ok {
		v := appgood.DefaultID()
		agc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agc *AppGoodCreate) check() error {
	if _, ok := agc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := agc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "good_id"`)}
	}
	if _, ok := agc.mutation.Authorized(); !ok {
		return &ValidationError{Name: "authorized", err: errors.New(`ent: missing required field "authorized"`)}
	}
	if _, ok := agc.mutation.Online(); !ok {
		return &ValidationError{Name: "online", err: errors.New(`ent: missing required field "online"`)}
	}
	if _, ok := agc.mutation.InitAreaStrategy(); !ok {
		return &ValidationError{Name: "init_area_strategy", err: errors.New(`ent: missing required field "init_area_strategy"`)}
	}
	if v, ok := agc.mutation.InitAreaStrategy(); ok {
		if err := appgood.InitAreaStrategyValidator(v); err != nil {
			return &ValidationError{Name: "init_area_strategy", err: fmt.Errorf(`ent: validator failed for field "init_area_strategy": %w`, err)}
		}
	}
	if _, ok := agc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "price"`)}
	}
	if _, ok := agc.mutation.InvitationOnly(); !ok {
		return &ValidationError{Name: "invitation_only", err: errors.New(`ent: missing required field "invitation_only"`)}
	}
	if _, ok := agc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := agc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := agc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (agc *AppGoodCreate) sqlSave(ctx context.Context) (*AppGood, error) {
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (agc *AppGoodCreate) createSpec() (*AppGood, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGood{config: agc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appgood.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgood.FieldID,
			},
		}
	)
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := agc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := agc.mutation.Authorized(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldAuthorized,
		})
		_node.Authorized = value
	}
	if value, ok := agc.mutation.Online(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldOnline,
		})
		_node.Online = value
	}
	if value, ok := agc.mutation.InitAreaStrategy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appgood.FieldInitAreaStrategy,
		})
		_node.InitAreaStrategy = value
	}
	if value, ok := agc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgood.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := agc.mutation.InvitationOnly(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldInvitationOnly,
		})
		_node.InvitationOnly = value
	}
	if value, ok := agc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := agc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := agc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// AppGoodCreateBulk is the builder for creating many AppGood entities in bulk.
type AppGoodCreateBulk struct {
	config
	builders []*AppGoodCreate
}

// Save creates the AppGood entities in the database.
func (agcb *AppGoodCreateBulk) Save(ctx context.Context) ([]*AppGood, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*AppGood, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *AppGoodCreateBulk) SaveX(ctx context.Context) []*AppGood {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *AppGoodCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *AppGoodCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}
