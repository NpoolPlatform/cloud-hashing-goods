// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodcomment"
	"github.com/google/uuid"
)

// GoodComment is the model entity for the GoodComment schema.
type GoodComment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ReplyToID holds the value of the "reply_to_id" field.
	ReplyToID uuid.UUID `json:"reply_to_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodComment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodcomment.FieldCreateAt, goodcomment.FieldUpdateAt, goodcomment.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case goodcomment.FieldContent:
			values[i] = new(sql.NullString)
		case goodcomment.FieldID, goodcomment.FieldReplyToID, goodcomment.FieldUserID, goodcomment.FieldAppID, goodcomment.FieldGoodID, goodcomment.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodComment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodComment fields.
func (gc *GoodComment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodcomment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gc.ID = *value
			}
		case goodcomment.FieldReplyToID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reply_to_id", values[i])
			} else if value != nil {
				gc.ReplyToID = *value
			}
		case goodcomment.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				gc.UserID = *value
			}
		case goodcomment.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				gc.AppID = *value
			}
		case goodcomment.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gc.GoodID = *value
			}
		case goodcomment.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				gc.OrderID = *value
			}
		case goodcomment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				gc.Content = value.String
			}
		case goodcomment.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gc.CreateAt = value.Int64
			}
		case goodcomment.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gc.UpdateAt = value.Int64
			}
		case goodcomment.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gc.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodComment.
// Note that you need to call GoodComment.Unwrap() before calling this method if this GoodComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GoodComment) Update() *GoodCommentUpdateOne {
	return (&GoodCommentClient{config: gc.config}).UpdateOne(gc)
}

// Unwrap unwraps the GoodComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GoodComment) Unwrap() *GoodComment {
	tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodComment is not a transactional entity")
	}
	gc.config.driver = tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GoodComment) String() string {
	var builder strings.Builder
	builder.WriteString("GoodComment(")
	builder.WriteString(fmt.Sprintf("id=%v", gc.ID))
	builder.WriteString(", reply_to_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.ReplyToID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.UserID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.AppID))
	builder.WriteString(", good_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.GoodID))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", gc.OrderID))
	builder.WriteString(", content=")
	builder.WriteString(gc.Content)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", gc.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", gc.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gc.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodComments is a parsable slice of GoodComment.
type GoodComments []*GoodComment

func (gc GoodComments) config(cfg config) {
	for _i := range gc {
		gc[_i].config = cfg
	}
}
