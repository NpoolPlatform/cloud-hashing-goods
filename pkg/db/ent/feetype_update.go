// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/feetype"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
)

// FeeTypeUpdate is the builder for updating FeeType entities.
type FeeTypeUpdate struct {
	config
	hooks    []Hook
	mutation *FeeTypeMutation
}

// Where appends a list predicates to the FeeTypeUpdate builder.
func (ftu *FeeTypeUpdate) Where(ps ...predicate.FeeType) *FeeTypeUpdate {
	ftu.mutation.Where(ps...)
	return ftu
}

// SetFeeType sets the "fee_type" field.
func (ftu *FeeTypeUpdate) SetFeeType(s string) *FeeTypeUpdate {
	ftu.mutation.SetFeeType(s)
	return ftu
}

// SetFeeDescription sets the "fee_description" field.
func (ftu *FeeTypeUpdate) SetFeeDescription(s string) *FeeTypeUpdate {
	ftu.mutation.SetFeeDescription(s)
	return ftu
}

// SetPayType sets the "pay_type" field.
func (ftu *FeeTypeUpdate) SetPayType(ft feetype.PayType) *FeeTypeUpdate {
	ftu.mutation.SetPayType(ft)
	return ftu
}

// SetCreateAt sets the "create_at" field.
func (ftu *FeeTypeUpdate) SetCreateAt(u uint32) *FeeTypeUpdate {
	ftu.mutation.ResetCreateAt()
	ftu.mutation.SetCreateAt(u)
	return ftu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ftu *FeeTypeUpdate) SetNillableCreateAt(u *uint32) *FeeTypeUpdate {
	if u != nil {
		ftu.SetCreateAt(*u)
	}
	return ftu
}

// AddCreateAt adds u to the "create_at" field.
func (ftu *FeeTypeUpdate) AddCreateAt(u uint32) *FeeTypeUpdate {
	ftu.mutation.AddCreateAt(u)
	return ftu
}

// SetUpdateAt sets the "update_at" field.
func (ftu *FeeTypeUpdate) SetUpdateAt(u uint32) *FeeTypeUpdate {
	ftu.mutation.ResetUpdateAt()
	ftu.mutation.SetUpdateAt(u)
	return ftu
}

// AddUpdateAt adds u to the "update_at" field.
func (ftu *FeeTypeUpdate) AddUpdateAt(u uint32) *FeeTypeUpdate {
	ftu.mutation.AddUpdateAt(u)
	return ftu
}

// SetDeleteAt sets the "delete_at" field.
func (ftu *FeeTypeUpdate) SetDeleteAt(u uint32) *FeeTypeUpdate {
	ftu.mutation.ResetDeleteAt()
	ftu.mutation.SetDeleteAt(u)
	return ftu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ftu *FeeTypeUpdate) SetNillableDeleteAt(u *uint32) *FeeTypeUpdate {
	if u != nil {
		ftu.SetDeleteAt(*u)
	}
	return ftu
}

// AddDeleteAt adds u to the "delete_at" field.
func (ftu *FeeTypeUpdate) AddDeleteAt(u uint32) *FeeTypeUpdate {
	ftu.mutation.AddDeleteAt(u)
	return ftu
}

// Mutation returns the FeeTypeMutation object of the builder.
func (ftu *FeeTypeUpdate) Mutation() *FeeTypeMutation {
	return ftu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ftu *FeeTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ftu.defaults()
	if len(ftu.hooks) == 0 {
		if err = ftu.check(); err != nil {
			return 0, err
		}
		affected, err = ftu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftu.check(); err != nil {
				return 0, err
			}
			ftu.mutation = mutation
			affected, err = ftu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ftu.hooks) - 1; i >= 0; i-- {
			if ftu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftu *FeeTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ftu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ftu *FeeTypeUpdate) Exec(ctx context.Context) error {
	_, err := ftu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftu *FeeTypeUpdate) ExecX(ctx context.Context) {
	if err := ftu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftu *FeeTypeUpdate) defaults() {
	if _, ok := ftu.mutation.UpdateAt(); !ok {
		v := feetype.UpdateDefaultUpdateAt()
		ftu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftu *FeeTypeUpdate) check() error {
	if v, ok := ftu.mutation.FeeDescription(); ok {
		if err := feetype.FeeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fee_description", err: fmt.Errorf("ent: validator failed for field \"fee_description\": %w", err)}
		}
	}
	if v, ok := ftu.mutation.PayType(); ok {
		if err := feetype.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "pay_type", err: fmt.Errorf("ent: validator failed for field \"pay_type\": %w", err)}
		}
	}
	return nil
}

func (ftu *FeeTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feetype.Table,
			Columns: feetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feetype.FieldID,
			},
		},
	}
	if ps := ftu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftu.mutation.FeeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feetype.FieldFeeType,
		})
	}
	if value, ok := ftu.mutation.FeeDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feetype.FieldFeeDescription,
		})
	}
	if value, ok := ftu.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: feetype.FieldPayType,
		})
	}
	if value, ok := ftu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldCreateAt,
		})
	}
	if value, ok := ftu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldCreateAt,
		})
	}
	if value, ok := ftu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldUpdateAt,
		})
	}
	if value, ok := ftu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldUpdateAt,
		})
	}
	if value, ok := ftu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldDeleteAt,
		})
	}
	if value, ok := ftu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ftu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FeeTypeUpdateOne is the builder for updating a single FeeType entity.
type FeeTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeeTypeMutation
}

// SetFeeType sets the "fee_type" field.
func (ftuo *FeeTypeUpdateOne) SetFeeType(s string) *FeeTypeUpdateOne {
	ftuo.mutation.SetFeeType(s)
	return ftuo
}

// SetFeeDescription sets the "fee_description" field.
func (ftuo *FeeTypeUpdateOne) SetFeeDescription(s string) *FeeTypeUpdateOne {
	ftuo.mutation.SetFeeDescription(s)
	return ftuo
}

// SetPayType sets the "pay_type" field.
func (ftuo *FeeTypeUpdateOne) SetPayType(ft feetype.PayType) *FeeTypeUpdateOne {
	ftuo.mutation.SetPayType(ft)
	return ftuo
}

// SetCreateAt sets the "create_at" field.
func (ftuo *FeeTypeUpdateOne) SetCreateAt(u uint32) *FeeTypeUpdateOne {
	ftuo.mutation.ResetCreateAt()
	ftuo.mutation.SetCreateAt(u)
	return ftuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (ftuo *FeeTypeUpdateOne) SetNillableCreateAt(u *uint32) *FeeTypeUpdateOne {
	if u != nil {
		ftuo.SetCreateAt(*u)
	}
	return ftuo
}

// AddCreateAt adds u to the "create_at" field.
func (ftuo *FeeTypeUpdateOne) AddCreateAt(u uint32) *FeeTypeUpdateOne {
	ftuo.mutation.AddCreateAt(u)
	return ftuo
}

// SetUpdateAt sets the "update_at" field.
func (ftuo *FeeTypeUpdateOne) SetUpdateAt(u uint32) *FeeTypeUpdateOne {
	ftuo.mutation.ResetUpdateAt()
	ftuo.mutation.SetUpdateAt(u)
	return ftuo
}

// AddUpdateAt adds u to the "update_at" field.
func (ftuo *FeeTypeUpdateOne) AddUpdateAt(u uint32) *FeeTypeUpdateOne {
	ftuo.mutation.AddUpdateAt(u)
	return ftuo
}

// SetDeleteAt sets the "delete_at" field.
func (ftuo *FeeTypeUpdateOne) SetDeleteAt(u uint32) *FeeTypeUpdateOne {
	ftuo.mutation.ResetDeleteAt()
	ftuo.mutation.SetDeleteAt(u)
	return ftuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (ftuo *FeeTypeUpdateOne) SetNillableDeleteAt(u *uint32) *FeeTypeUpdateOne {
	if u != nil {
		ftuo.SetDeleteAt(*u)
	}
	return ftuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (ftuo *FeeTypeUpdateOne) AddDeleteAt(u uint32) *FeeTypeUpdateOne {
	ftuo.mutation.AddDeleteAt(u)
	return ftuo
}

// Mutation returns the FeeTypeMutation object of the builder.
func (ftuo *FeeTypeUpdateOne) Mutation() *FeeTypeMutation {
	return ftuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ftuo *FeeTypeUpdateOne) Select(field string, fields ...string) *FeeTypeUpdateOne {
	ftuo.fields = append([]string{field}, fields...)
	return ftuo
}

// Save executes the query and returns the updated FeeType entity.
func (ftuo *FeeTypeUpdateOne) Save(ctx context.Context) (*FeeType, error) {
	var (
		err  error
		node *FeeType
	)
	ftuo.defaults()
	if len(ftuo.hooks) == 0 {
		if err = ftuo.check(); err != nil {
			return nil, err
		}
		node, err = ftuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ftuo.check(); err != nil {
				return nil, err
			}
			ftuo.mutation = mutation
			node, err = ftuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ftuo.hooks) - 1; i >= 0; i-- {
			if ftuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ftuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ftuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ftuo *FeeTypeUpdateOne) SaveX(ctx context.Context) *FeeType {
	node, err := ftuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ftuo *FeeTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ftuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftuo *FeeTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ftuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ftuo *FeeTypeUpdateOne) defaults() {
	if _, ok := ftuo.mutation.UpdateAt(); !ok {
		v := feetype.UpdateDefaultUpdateAt()
		ftuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftuo *FeeTypeUpdateOne) check() error {
	if v, ok := ftuo.mutation.FeeDescription(); ok {
		if err := feetype.FeeDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fee_description", err: fmt.Errorf("ent: validator failed for field \"fee_description\": %w", err)}
		}
	}
	if v, ok := ftuo.mutation.PayType(); ok {
		if err := feetype.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "pay_type", err: fmt.Errorf("ent: validator failed for field \"pay_type\": %w", err)}
		}
	}
	return nil
}

func (ftuo *FeeTypeUpdateOne) sqlSave(ctx context.Context) (_node *FeeType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feetype.Table,
			Columns: feetype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feetype.FieldID,
			},
		},
	}
	id, ok := ftuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FeeType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ftuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feetype.FieldID)
		for _, f := range fields {
			if !feetype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feetype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ftuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ftuo.mutation.FeeType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feetype.FieldFeeType,
		})
	}
	if value, ok := ftuo.mutation.FeeDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feetype.FieldFeeDescription,
		})
	}
	if value, ok := ftuo.mutation.PayType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: feetype.FieldPayType,
		})
	}
	if value, ok := ftuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldCreateAt,
		})
	}
	if value, ok := ftuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldCreateAt,
		})
	}
	if value, ok := ftuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldUpdateAt,
		})
	}
	if value, ok := ftuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldUpdateAt,
		})
	}
	if value, ok := ftuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldDeleteAt,
		})
	}
	if value, ok := ftuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feetype.FieldDeleteAt,
		})
	}
	_node = &FeeType{config: ftuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ftuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feetype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
