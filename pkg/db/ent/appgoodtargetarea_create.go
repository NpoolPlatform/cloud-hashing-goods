// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgoodtargetarea"
	"github.com/google/uuid"
)

// AppGoodTargetAreaCreate is the builder for creating a AppGoodTargetArea entity.
type AppGoodTargetAreaCreate struct {
	config
	mutation *AppGoodTargetAreaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (agtac *AppGoodTargetAreaCreate) SetAppID(u uuid.UUID) *AppGoodTargetAreaCreate {
	agtac.mutation.SetAppID(u)
	return agtac
}

// SetGoodID sets the "good_id" field.
func (agtac *AppGoodTargetAreaCreate) SetGoodID(u uuid.UUID) *AppGoodTargetAreaCreate {
	agtac.mutation.SetGoodID(u)
	return agtac
}

// SetTargetAreaID sets the "target_area_id" field.
func (agtac *AppGoodTargetAreaCreate) SetTargetAreaID(u uuid.UUID) *AppGoodTargetAreaCreate {
	agtac.mutation.SetTargetAreaID(u)
	return agtac
}

// SetCreateAt sets the "create_at" field.
func (agtac *AppGoodTargetAreaCreate) SetCreateAt(i int64) *AppGoodTargetAreaCreate {
	agtac.mutation.SetCreateAt(i)
	return agtac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agtac *AppGoodTargetAreaCreate) SetNillableCreateAt(i *int64) *AppGoodTargetAreaCreate {
	if i != nil {
		agtac.SetCreateAt(*i)
	}
	return agtac
}

// SetUpdateAt sets the "update_at" field.
func (agtac *AppGoodTargetAreaCreate) SetUpdateAt(i int64) *AppGoodTargetAreaCreate {
	agtac.mutation.SetUpdateAt(i)
	return agtac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (agtac *AppGoodTargetAreaCreate) SetNillableUpdateAt(i *int64) *AppGoodTargetAreaCreate {
	if i != nil {
		agtac.SetUpdateAt(*i)
	}
	return agtac
}

// SetDeleteAt sets the "delete_at" field.
func (agtac *AppGoodTargetAreaCreate) SetDeleteAt(i int64) *AppGoodTargetAreaCreate {
	agtac.mutation.SetDeleteAt(i)
	return agtac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agtac *AppGoodTargetAreaCreate) SetNillableDeleteAt(i *int64) *AppGoodTargetAreaCreate {
	if i != nil {
		agtac.SetDeleteAt(*i)
	}
	return agtac
}

// SetID sets the "id" field.
func (agtac *AppGoodTargetAreaCreate) SetID(u uuid.UUID) *AppGoodTargetAreaCreate {
	agtac.mutation.SetID(u)
	return agtac
}

// Mutation returns the AppGoodTargetAreaMutation object of the builder.
func (agtac *AppGoodTargetAreaCreate) Mutation() *AppGoodTargetAreaMutation {
	return agtac.mutation
}

// Save creates the AppGoodTargetArea in the database.
func (agtac *AppGoodTargetAreaCreate) Save(ctx context.Context) (*AppGoodTargetArea, error) {
	var (
		err  error
		node *AppGoodTargetArea
	)
	agtac.defaults()
	if len(agtac.hooks) == 0 {
		if err = agtac.check(); err != nil {
			return nil, err
		}
		node, err = agtac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodTargetAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agtac.check(); err != nil {
				return nil, err
			}
			agtac.mutation = mutation
			if node, err = agtac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(agtac.hooks) - 1; i >= 0; i-- {
			if agtac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agtac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agtac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (agtac *AppGoodTargetAreaCreate) SaveX(ctx context.Context) *AppGoodTargetArea {
	v, err := agtac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agtac *AppGoodTargetAreaCreate) Exec(ctx context.Context) error {
	_, err := agtac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agtac *AppGoodTargetAreaCreate) ExecX(ctx context.Context) {
	if err := agtac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agtac *AppGoodTargetAreaCreate) defaults() {
	if _, ok := agtac.mutation.CreateAt(); !ok {
		v := appgoodtargetarea.DefaultCreateAt()
		agtac.mutation.SetCreateAt(v)
	}
	if _, ok := agtac.mutation.UpdateAt(); !ok {
		v := appgoodtargetarea.DefaultUpdateAt()
		agtac.mutation.SetUpdateAt(v)
	}
	if _, ok := agtac.mutation.DeleteAt(); !ok {
		v := appgoodtargetarea.DefaultDeleteAt()
		agtac.mutation.SetDeleteAt(v)
	}
	if _, ok := agtac.mutation.ID(); !ok {
		v := appgoodtargetarea.DefaultID()
		agtac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agtac *AppGoodTargetAreaCreate) check() error {
	if _, ok := agtac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := agtac.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "good_id"`)}
	}
	if _, ok := agtac.mutation.TargetAreaID(); !ok {
		return &ValidationError{Name: "target_area_id", err: errors.New(`ent: missing required field "target_area_id"`)}
	}
	if _, ok := agtac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := agtac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := agtac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (agtac *AppGoodTargetAreaCreate) sqlSave(ctx context.Context) (*AppGoodTargetArea, error) {
	_node, _spec := agtac.createSpec()
	if err := sqlgraph.CreateNode(ctx, agtac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (agtac *AppGoodTargetAreaCreate) createSpec() (*AppGoodTargetArea, *sqlgraph.CreateSpec) {
	var (
		_node = &AppGoodTargetArea{config: agtac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appgoodtargetarea.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgoodtargetarea.FieldID,
			},
		}
	)
	_spec.OnConflict = agtac.conflict
	if id, ok := agtac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := agtac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodtargetarea.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := agtac.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodtargetarea.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := agtac.mutation.TargetAreaID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodtargetarea.FieldTargetAreaID,
		})
		_node.TargetAreaID = value
	}
	if value, ok := agtac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgoodtargetarea.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := agtac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgoodtargetarea.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := agtac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgoodtargetarea.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodTargetArea.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodTargetAreaUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (agtac *AppGoodTargetAreaCreate) OnConflict(opts ...sql.ConflictOption) *AppGoodTargetAreaUpsertOne {
	agtac.conflict = opts
	return &AppGoodTargetAreaUpsertOne{
		create: agtac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodTargetArea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agtac *AppGoodTargetAreaCreate) OnConflictColumns(columns ...string) *AppGoodTargetAreaUpsertOne {
	agtac.conflict = append(agtac.conflict, sql.ConflictColumns(columns...))
	return &AppGoodTargetAreaUpsertOne{
		create: agtac,
	}
}

type (
	// AppGoodTargetAreaUpsertOne is the builder for "upsert"-ing
	//  one AppGoodTargetArea node.
	AppGoodTargetAreaUpsertOne struct {
		create *AppGoodTargetAreaCreate
	}

	// AppGoodTargetAreaUpsert is the "OnConflict" setter.
	AppGoodTargetAreaUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppGoodTargetAreaUpsert) SetAppID(v uuid.UUID) *AppGoodTargetAreaUpsert {
	u.Set(appgoodtargetarea.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsert) UpdateAppID() *AppGoodTargetAreaUpsert {
	u.SetExcluded(appgoodtargetarea.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodTargetAreaUpsert) SetGoodID(v uuid.UUID) *AppGoodTargetAreaUpsert {
	u.Set(appgoodtargetarea.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsert) UpdateGoodID() *AppGoodTargetAreaUpsert {
	u.SetExcluded(appgoodtargetarea.FieldGoodID)
	return u
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppGoodTargetAreaUpsert) SetTargetAreaID(v uuid.UUID) *AppGoodTargetAreaUpsert {
	u.Set(appgoodtargetarea.FieldTargetAreaID, v)
	return u
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsert) UpdateTargetAreaID() *AppGoodTargetAreaUpsert {
	u.SetExcluded(appgoodtargetarea.FieldTargetAreaID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppGoodTargetAreaUpsert) SetCreateAt(v int64) *AppGoodTargetAreaUpsert {
	u.Set(appgoodtargetarea.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsert) UpdateCreateAt() *AppGoodTargetAreaUpsert {
	u.SetExcluded(appgoodtargetarea.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppGoodTargetAreaUpsert) SetUpdateAt(v int64) *AppGoodTargetAreaUpsert {
	u.Set(appgoodtargetarea.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsert) UpdateUpdateAt() *AppGoodTargetAreaUpsert {
	u.SetExcluded(appgoodtargetarea.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppGoodTargetAreaUpsert) SetDeleteAt(v int64) *AppGoodTargetAreaUpsert {
	u.Set(appgoodtargetarea.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsert) UpdateDeleteAt() *AppGoodTargetAreaUpsert {
	u.SetExcluded(appgoodtargetarea.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppGoodTargetArea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodtargetarea.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppGoodTargetAreaUpsertOne) UpdateNewValues() *AppGoodTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appgoodtargetarea.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppGoodTargetArea.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppGoodTargetAreaUpsertOne) Ignore() *AppGoodTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodTargetAreaUpsertOne) DoNothing() *AppGoodTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodTargetAreaCreate.OnConflict
// documentation for more info.
func (u *AppGoodTargetAreaUpsertOne) Update(set func(*AppGoodTargetAreaUpsert)) *AppGoodTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodTargetAreaUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodTargetAreaUpsertOne) SetAppID(v uuid.UUID) *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertOne) UpdateAppID() *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodTargetAreaUpsertOne) SetGoodID(v uuid.UUID) *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertOne) UpdateGoodID() *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateGoodID()
	})
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppGoodTargetAreaUpsertOne) SetTargetAreaID(v uuid.UUID) *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetTargetAreaID(v)
	})
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertOne) UpdateTargetAreaID() *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateTargetAreaID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppGoodTargetAreaUpsertOne) SetCreateAt(v int64) *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertOne) UpdateCreateAt() *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppGoodTargetAreaUpsertOne) SetUpdateAt(v int64) *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertOne) UpdateUpdateAt() *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppGoodTargetAreaUpsertOne) SetDeleteAt(v int64) *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertOne) UpdateDeleteAt() *AppGoodTargetAreaUpsertOne {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppGoodTargetAreaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppGoodTargetAreaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodTargetAreaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppGoodTargetAreaUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppGoodTargetAreaUpsertOne.ID is not supported by MySQL driver. Use AppGoodTargetAreaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppGoodTargetAreaUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppGoodTargetAreaCreateBulk is the builder for creating many AppGoodTargetArea entities in bulk.
type AppGoodTargetAreaCreateBulk struct {
	config
	builders []*AppGoodTargetAreaCreate
	conflict []sql.ConflictOption
}

// Save creates the AppGoodTargetArea entities in the database.
func (agtacb *AppGoodTargetAreaCreateBulk) Save(ctx context.Context) ([]*AppGoodTargetArea, error) {
	specs := make([]*sqlgraph.CreateSpec, len(agtacb.builders))
	nodes := make([]*AppGoodTargetArea, len(agtacb.builders))
	mutators := make([]Mutator, len(agtacb.builders))
	for i := range agtacb.builders {
		func(i int, root context.Context) {
			builder := agtacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppGoodTargetAreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agtacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agtacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agtacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agtacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agtacb *AppGoodTargetAreaCreateBulk) SaveX(ctx context.Context) []*AppGoodTargetArea {
	v, err := agtacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agtacb *AppGoodTargetAreaCreateBulk) Exec(ctx context.Context) error {
	_, err := agtacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agtacb *AppGoodTargetAreaCreateBulk) ExecX(ctx context.Context) {
	if err := agtacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppGoodTargetArea.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppGoodTargetAreaUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (agtacb *AppGoodTargetAreaCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppGoodTargetAreaUpsertBulk {
	agtacb.conflict = opts
	return &AppGoodTargetAreaUpsertBulk{
		create: agtacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppGoodTargetArea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (agtacb *AppGoodTargetAreaCreateBulk) OnConflictColumns(columns ...string) *AppGoodTargetAreaUpsertBulk {
	agtacb.conflict = append(agtacb.conflict, sql.ConflictColumns(columns...))
	return &AppGoodTargetAreaUpsertBulk{
		create: agtacb,
	}
}

// AppGoodTargetAreaUpsertBulk is the builder for "upsert"-ing
// a bulk of AppGoodTargetArea nodes.
type AppGoodTargetAreaUpsertBulk struct {
	create *AppGoodTargetAreaCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppGoodTargetArea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appgoodtargetarea.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppGoodTargetAreaUpsertBulk) UpdateNewValues() *AppGoodTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appgoodtargetarea.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppGoodTargetArea.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppGoodTargetAreaUpsertBulk) Ignore() *AppGoodTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppGoodTargetAreaUpsertBulk) DoNothing() *AppGoodTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppGoodTargetAreaCreateBulk.OnConflict
// documentation for more info.
func (u *AppGoodTargetAreaUpsertBulk) Update(set func(*AppGoodTargetAreaUpsert)) *AppGoodTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppGoodTargetAreaUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppGoodTargetAreaUpsertBulk) SetAppID(v uuid.UUID) *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertBulk) UpdateAppID() *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *AppGoodTargetAreaUpsertBulk) SetGoodID(v uuid.UUID) *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertBulk) UpdateGoodID() *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateGoodID()
	})
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppGoodTargetAreaUpsertBulk) SetTargetAreaID(v uuid.UUID) *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetTargetAreaID(v)
	})
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertBulk) UpdateTargetAreaID() *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateTargetAreaID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppGoodTargetAreaUpsertBulk) SetCreateAt(v int64) *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertBulk) UpdateCreateAt() *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppGoodTargetAreaUpsertBulk) SetUpdateAt(v int64) *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertBulk) UpdateUpdateAt() *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppGoodTargetAreaUpsertBulk) SetDeleteAt(v int64) *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppGoodTargetAreaUpsertBulk) UpdateDeleteAt() *AppGoodTargetAreaUpsertBulk {
	return u.Update(func(s *AppGoodTargetAreaUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppGoodTargetAreaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppGoodTargetAreaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppGoodTargetAreaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppGoodTargetAreaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
