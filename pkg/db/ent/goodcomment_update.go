// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodcomment"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodCommentUpdate is the builder for updating GoodComment entities.
type GoodCommentUpdate struct {
	config
	hooks    []Hook
	mutation *GoodCommentMutation
}

// Where appends a list predicates to the GoodCommentUpdate builder.
func (gcu *GoodCommentUpdate) Where(ps ...predicate.GoodComment) *GoodCommentUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetReplyToID sets the "reply_to_id" field.
func (gcu *GoodCommentUpdate) SetReplyToID(u uuid.UUID) *GoodCommentUpdate {
	gcu.mutation.SetReplyToID(u)
	return gcu
}

// SetNillableReplyToID sets the "reply_to_id" field if the given value is not nil.
func (gcu *GoodCommentUpdate) SetNillableReplyToID(u *uuid.UUID) *GoodCommentUpdate {
	if u != nil {
		gcu.SetReplyToID(*u)
	}
	return gcu
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (gcu *GoodCommentUpdate) ClearReplyToID() *GoodCommentUpdate {
	gcu.mutation.ClearReplyToID()
	return gcu
}

// SetUserID sets the "user_id" field.
func (gcu *GoodCommentUpdate) SetUserID(u uuid.UUID) *GoodCommentUpdate {
	gcu.mutation.SetUserID(u)
	return gcu
}

// SetAppID sets the "app_id" field.
func (gcu *GoodCommentUpdate) SetAppID(u uuid.UUID) *GoodCommentUpdate {
	gcu.mutation.SetAppID(u)
	return gcu
}

// SetGoodID sets the "good_id" field.
func (gcu *GoodCommentUpdate) SetGoodID(u uuid.UUID) *GoodCommentUpdate {
	gcu.mutation.SetGoodID(u)
	return gcu
}

// SetOrderID sets the "order_id" field.
func (gcu *GoodCommentUpdate) SetOrderID(u uuid.UUID) *GoodCommentUpdate {
	gcu.mutation.SetOrderID(u)
	return gcu
}

// SetContent sets the "content" field.
func (gcu *GoodCommentUpdate) SetContent(s string) *GoodCommentUpdate {
	gcu.mutation.SetContent(s)
	return gcu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (gcu *GoodCommentUpdate) SetNillableContent(s *string) *GoodCommentUpdate {
	if s != nil {
		gcu.SetContent(*s)
	}
	return gcu
}

// SetCreateAt sets the "create_at" field.
func (gcu *GoodCommentUpdate) SetCreateAt(i int64) *GoodCommentUpdate {
	gcu.mutation.ResetCreateAt()
	gcu.mutation.SetCreateAt(i)
	return gcu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gcu *GoodCommentUpdate) SetNillableCreateAt(i *int64) *GoodCommentUpdate {
	if i != nil {
		gcu.SetCreateAt(*i)
	}
	return gcu
}

// AddCreateAt adds i to the "create_at" field.
func (gcu *GoodCommentUpdate) AddCreateAt(i int64) *GoodCommentUpdate {
	gcu.mutation.AddCreateAt(i)
	return gcu
}

// SetUpdateAt sets the "update_at" field.
func (gcu *GoodCommentUpdate) SetUpdateAt(i int64) *GoodCommentUpdate {
	gcu.mutation.ResetUpdateAt()
	gcu.mutation.SetUpdateAt(i)
	return gcu
}

// AddUpdateAt adds i to the "update_at" field.
func (gcu *GoodCommentUpdate) AddUpdateAt(i int64) *GoodCommentUpdate {
	gcu.mutation.AddUpdateAt(i)
	return gcu
}

// SetDeleteAt sets the "delete_at" field.
func (gcu *GoodCommentUpdate) SetDeleteAt(i int64) *GoodCommentUpdate {
	gcu.mutation.ResetDeleteAt()
	gcu.mutation.SetDeleteAt(i)
	return gcu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gcu *GoodCommentUpdate) SetNillableDeleteAt(i *int64) *GoodCommentUpdate {
	if i != nil {
		gcu.SetDeleteAt(*i)
	}
	return gcu
}

// AddDeleteAt adds i to the "delete_at" field.
func (gcu *GoodCommentUpdate) AddDeleteAt(i int64) *GoodCommentUpdate {
	gcu.mutation.AddDeleteAt(i)
	return gcu
}

// Mutation returns the GoodCommentMutation object of the builder.
func (gcu *GoodCommentUpdate) Mutation() *GoodCommentMutation {
	return gcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GoodCommentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gcu.defaults()
	if len(gcu.hooks) == 0 {
		affected, err = gcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcu.mutation = mutation
			affected, err = gcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gcu.hooks) - 1; i >= 0; i-- {
			if gcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GoodCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GoodCommentUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GoodCommentUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcu *GoodCommentUpdate) defaults() {
	if _, ok := gcu.mutation.UpdateAt(); !ok {
		v := goodcomment.UpdateDefaultUpdateAt()
		gcu.mutation.SetUpdateAt(v)
	}
}

func (gcu *GoodCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodcomment.Table,
			Columns: goodcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodcomment.FieldID,
			},
		},
	}
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.ReplyToID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldReplyToID,
		})
	}
	if gcu.mutation.ReplyToIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcomment.FieldReplyToID,
		})
	}
	if value, ok := gcu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldUserID,
		})
	}
	if value, ok := gcu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldAppID,
		})
	}
	if value, ok := gcu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldGoodID,
		})
	}
	if value, ok := gcu.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldOrderID,
		})
	}
	if value, ok := gcu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodcomment.FieldContent,
		})
	}
	if value, ok := gcu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldCreateAt,
		})
	}
	if value, ok := gcu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldCreateAt,
		})
	}
	if value, ok := gcu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldUpdateAt,
		})
	}
	if value, ok := gcu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldUpdateAt,
		})
	}
	if value, ok := gcu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldDeleteAt,
		})
	}
	if value, ok := gcu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodCommentUpdateOne is the builder for updating a single GoodComment entity.
type GoodCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodCommentMutation
}

// SetReplyToID sets the "reply_to_id" field.
func (gcuo *GoodCommentUpdateOne) SetReplyToID(u uuid.UUID) *GoodCommentUpdateOne {
	gcuo.mutation.SetReplyToID(u)
	return gcuo
}

// SetNillableReplyToID sets the "reply_to_id" field if the given value is not nil.
func (gcuo *GoodCommentUpdateOne) SetNillableReplyToID(u *uuid.UUID) *GoodCommentUpdateOne {
	if u != nil {
		gcuo.SetReplyToID(*u)
	}
	return gcuo
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (gcuo *GoodCommentUpdateOne) ClearReplyToID() *GoodCommentUpdateOne {
	gcuo.mutation.ClearReplyToID()
	return gcuo
}

// SetUserID sets the "user_id" field.
func (gcuo *GoodCommentUpdateOne) SetUserID(u uuid.UUID) *GoodCommentUpdateOne {
	gcuo.mutation.SetUserID(u)
	return gcuo
}

// SetAppID sets the "app_id" field.
func (gcuo *GoodCommentUpdateOne) SetAppID(u uuid.UUID) *GoodCommentUpdateOne {
	gcuo.mutation.SetAppID(u)
	return gcuo
}

// SetGoodID sets the "good_id" field.
func (gcuo *GoodCommentUpdateOne) SetGoodID(u uuid.UUID) *GoodCommentUpdateOne {
	gcuo.mutation.SetGoodID(u)
	return gcuo
}

// SetOrderID sets the "order_id" field.
func (gcuo *GoodCommentUpdateOne) SetOrderID(u uuid.UUID) *GoodCommentUpdateOne {
	gcuo.mutation.SetOrderID(u)
	return gcuo
}

// SetContent sets the "content" field.
func (gcuo *GoodCommentUpdateOne) SetContent(s string) *GoodCommentUpdateOne {
	gcuo.mutation.SetContent(s)
	return gcuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (gcuo *GoodCommentUpdateOne) SetNillableContent(s *string) *GoodCommentUpdateOne {
	if s != nil {
		gcuo.SetContent(*s)
	}
	return gcuo
}

// SetCreateAt sets the "create_at" field.
func (gcuo *GoodCommentUpdateOne) SetCreateAt(i int64) *GoodCommentUpdateOne {
	gcuo.mutation.ResetCreateAt()
	gcuo.mutation.SetCreateAt(i)
	return gcuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gcuo *GoodCommentUpdateOne) SetNillableCreateAt(i *int64) *GoodCommentUpdateOne {
	if i != nil {
		gcuo.SetCreateAt(*i)
	}
	return gcuo
}

// AddCreateAt adds i to the "create_at" field.
func (gcuo *GoodCommentUpdateOne) AddCreateAt(i int64) *GoodCommentUpdateOne {
	gcuo.mutation.AddCreateAt(i)
	return gcuo
}

// SetUpdateAt sets the "update_at" field.
func (gcuo *GoodCommentUpdateOne) SetUpdateAt(i int64) *GoodCommentUpdateOne {
	gcuo.mutation.ResetUpdateAt()
	gcuo.mutation.SetUpdateAt(i)
	return gcuo
}

// AddUpdateAt adds i to the "update_at" field.
func (gcuo *GoodCommentUpdateOne) AddUpdateAt(i int64) *GoodCommentUpdateOne {
	gcuo.mutation.AddUpdateAt(i)
	return gcuo
}

// SetDeleteAt sets the "delete_at" field.
func (gcuo *GoodCommentUpdateOne) SetDeleteAt(i int64) *GoodCommentUpdateOne {
	gcuo.mutation.ResetDeleteAt()
	gcuo.mutation.SetDeleteAt(i)
	return gcuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gcuo *GoodCommentUpdateOne) SetNillableDeleteAt(i *int64) *GoodCommentUpdateOne {
	if i != nil {
		gcuo.SetDeleteAt(*i)
	}
	return gcuo
}

// AddDeleteAt adds i to the "delete_at" field.
func (gcuo *GoodCommentUpdateOne) AddDeleteAt(i int64) *GoodCommentUpdateOne {
	gcuo.mutation.AddDeleteAt(i)
	return gcuo
}

// Mutation returns the GoodCommentMutation object of the builder.
func (gcuo *GoodCommentUpdateOne) Mutation() *GoodCommentMutation {
	return gcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GoodCommentUpdateOne) Select(field string, fields ...string) *GoodCommentUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GoodComment entity.
func (gcuo *GoodCommentUpdateOne) Save(ctx context.Context) (*GoodComment, error) {
	var (
		err  error
		node *GoodComment
	)
	gcuo.defaults()
	if len(gcuo.hooks) == 0 {
		node, err = gcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gcuo.mutation = mutation
			node, err = gcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gcuo.hooks) - 1; i >= 0; i-- {
			if gcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GoodCommentUpdateOne) SaveX(ctx context.Context) *GoodComment {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GoodCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GoodCommentUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcuo *GoodCommentUpdateOne) defaults() {
	if _, ok := gcuo.mutation.UpdateAt(); !ok {
		v := goodcomment.UpdateDefaultUpdateAt()
		gcuo.mutation.SetUpdateAt(v)
	}
}

func (gcuo *GoodCommentUpdateOne) sqlSave(ctx context.Context) (_node *GoodComment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodcomment.Table,
			Columns: goodcomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodcomment.FieldID,
			},
		},
	}
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodcomment.FieldID)
		for _, f := range fields {
			if !goodcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.ReplyToID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldReplyToID,
		})
	}
	if gcuo.mutation.ReplyToIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: goodcomment.FieldReplyToID,
		})
	}
	if value, ok := gcuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldUserID,
		})
	}
	if value, ok := gcuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldAppID,
		})
	}
	if value, ok := gcuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldGoodID,
		})
	}
	if value, ok := gcuo.mutation.OrderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldOrderID,
		})
	}
	if value, ok := gcuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodcomment.FieldContent,
		})
	}
	if value, ok := gcuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldCreateAt,
		})
	}
	if value, ok := gcuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldCreateAt,
		})
	}
	if value, ok := gcuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldUpdateAt,
		})
	}
	if value, ok := gcuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldUpdateAt,
		})
	}
	if value, ok := gcuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldDeleteAt,
		})
	}
	if value, ok := gcuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldDeleteAt,
		})
	}
	_node = &GoodComment{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
