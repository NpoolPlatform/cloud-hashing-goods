// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodrecommand"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodRecommandUpdate is the builder for updating GoodRecommand entities.
type GoodRecommandUpdate struct {
	config
	hooks    []Hook
	mutation *GoodRecommandMutation
}

// Where appends a list predicates to the GoodRecommandUpdate builder.
func (gru *GoodRecommandUpdate) Where(ps ...predicate.GoodRecommand) *GoodRecommandUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetAppID sets the "app_id" field.
func (gru *GoodRecommandUpdate) SetAppID(u uuid.UUID) *GoodRecommandUpdate {
	gru.mutation.SetAppID(u)
	return gru
}

// SetUserID sets the "user_id" field.
func (gru *GoodRecommandUpdate) SetUserID(u uuid.UUID) *GoodRecommandUpdate {
	gru.mutation.SetUserID(u)
	return gru
}

// SetGoodID sets the "good_id" field.
func (gru *GoodRecommandUpdate) SetGoodID(u uuid.UUID) *GoodRecommandUpdate {
	gru.mutation.SetGoodID(u)
	return gru
}

// SetContent sets the "content" field.
func (gru *GoodRecommandUpdate) SetContent(s string) *GoodRecommandUpdate {
	gru.mutation.SetContent(s)
	return gru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (gru *GoodRecommandUpdate) SetNillableContent(s *string) *GoodRecommandUpdate {
	if s != nil {
		gru.SetContent(*s)
	}
	return gru
}

// SetCreateAt sets the "create_at" field.
func (gru *GoodRecommandUpdate) SetCreateAt(i int64) *GoodRecommandUpdate {
	gru.mutation.ResetCreateAt()
	gru.mutation.SetCreateAt(i)
	return gru
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gru *GoodRecommandUpdate) SetNillableCreateAt(i *int64) *GoodRecommandUpdate {
	if i != nil {
		gru.SetCreateAt(*i)
	}
	return gru
}

// AddCreateAt adds i to the "create_at" field.
func (gru *GoodRecommandUpdate) AddCreateAt(i int64) *GoodRecommandUpdate {
	gru.mutation.AddCreateAt(i)
	return gru
}

// SetUpdateAt sets the "update_at" field.
func (gru *GoodRecommandUpdate) SetUpdateAt(i int64) *GoodRecommandUpdate {
	gru.mutation.ResetUpdateAt()
	gru.mutation.SetUpdateAt(i)
	return gru
}

// AddUpdateAt adds i to the "update_at" field.
func (gru *GoodRecommandUpdate) AddUpdateAt(i int64) *GoodRecommandUpdate {
	gru.mutation.AddUpdateAt(i)
	return gru
}

// SetDeleteAt sets the "delete_at" field.
func (gru *GoodRecommandUpdate) SetDeleteAt(i int64) *GoodRecommandUpdate {
	gru.mutation.ResetDeleteAt()
	gru.mutation.SetDeleteAt(i)
	return gru
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gru *GoodRecommandUpdate) SetNillableDeleteAt(i *int64) *GoodRecommandUpdate {
	if i != nil {
		gru.SetDeleteAt(*i)
	}
	return gru
}

// AddDeleteAt adds i to the "delete_at" field.
func (gru *GoodRecommandUpdate) AddDeleteAt(i int64) *GoodRecommandUpdate {
	gru.mutation.AddDeleteAt(i)
	return gru
}

// Mutation returns the GoodRecommandMutation object of the builder.
func (gru *GoodRecommandUpdate) Mutation() *GoodRecommandMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GoodRecommandUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gru.defaults()
	if len(gru.hooks) == 0 {
		affected, err = gru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodRecommandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gru.mutation = mutation
			affected, err = gru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gru.hooks) - 1; i >= 0; i-- {
			if gru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GoodRecommandUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GoodRecommandUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GoodRecommandUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GoodRecommandUpdate) defaults() {
	if _, ok := gru.mutation.UpdateAt(); !ok {
		v := goodrecommand.UpdateDefaultUpdateAt()
		gru.mutation.SetUpdateAt(v)
	}
}

func (gru *GoodRecommandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodrecommand.Table,
			Columns: goodrecommand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodrecommand.FieldID,
			},
		},
	}
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommand.FieldAppID,
		})
	}
	if value, ok := gru.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommand.FieldUserID,
		})
	}
	if value, ok := gru.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommand.FieldGoodID,
		})
	}
	if value, ok := gru.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodrecommand.FieldContent,
		})
	}
	if value, ok := gru.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldCreateAt,
		})
	}
	if value, ok := gru.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldCreateAt,
		})
	}
	if value, ok := gru.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldUpdateAt,
		})
	}
	if value, ok := gru.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldUpdateAt,
		})
	}
	if value, ok := gru.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldDeleteAt,
		})
	}
	if value, ok := gru.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodrecommand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodRecommandUpdateOne is the builder for updating a single GoodRecommand entity.
type GoodRecommandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodRecommandMutation
}

// SetAppID sets the "app_id" field.
func (gruo *GoodRecommandUpdateOne) SetAppID(u uuid.UUID) *GoodRecommandUpdateOne {
	gruo.mutation.SetAppID(u)
	return gruo
}

// SetUserID sets the "user_id" field.
func (gruo *GoodRecommandUpdateOne) SetUserID(u uuid.UUID) *GoodRecommandUpdateOne {
	gruo.mutation.SetUserID(u)
	return gruo
}

// SetGoodID sets the "good_id" field.
func (gruo *GoodRecommandUpdateOne) SetGoodID(u uuid.UUID) *GoodRecommandUpdateOne {
	gruo.mutation.SetGoodID(u)
	return gruo
}

// SetContent sets the "content" field.
func (gruo *GoodRecommandUpdateOne) SetContent(s string) *GoodRecommandUpdateOne {
	gruo.mutation.SetContent(s)
	return gruo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (gruo *GoodRecommandUpdateOne) SetNillableContent(s *string) *GoodRecommandUpdateOne {
	if s != nil {
		gruo.SetContent(*s)
	}
	return gruo
}

// SetCreateAt sets the "create_at" field.
func (gruo *GoodRecommandUpdateOne) SetCreateAt(i int64) *GoodRecommandUpdateOne {
	gruo.mutation.ResetCreateAt()
	gruo.mutation.SetCreateAt(i)
	return gruo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gruo *GoodRecommandUpdateOne) SetNillableCreateAt(i *int64) *GoodRecommandUpdateOne {
	if i != nil {
		gruo.SetCreateAt(*i)
	}
	return gruo
}

// AddCreateAt adds i to the "create_at" field.
func (gruo *GoodRecommandUpdateOne) AddCreateAt(i int64) *GoodRecommandUpdateOne {
	gruo.mutation.AddCreateAt(i)
	return gruo
}

// SetUpdateAt sets the "update_at" field.
func (gruo *GoodRecommandUpdateOne) SetUpdateAt(i int64) *GoodRecommandUpdateOne {
	gruo.mutation.ResetUpdateAt()
	gruo.mutation.SetUpdateAt(i)
	return gruo
}

// AddUpdateAt adds i to the "update_at" field.
func (gruo *GoodRecommandUpdateOne) AddUpdateAt(i int64) *GoodRecommandUpdateOne {
	gruo.mutation.AddUpdateAt(i)
	return gruo
}

// SetDeleteAt sets the "delete_at" field.
func (gruo *GoodRecommandUpdateOne) SetDeleteAt(i int64) *GoodRecommandUpdateOne {
	gruo.mutation.ResetDeleteAt()
	gruo.mutation.SetDeleteAt(i)
	return gruo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gruo *GoodRecommandUpdateOne) SetNillableDeleteAt(i *int64) *GoodRecommandUpdateOne {
	if i != nil {
		gruo.SetDeleteAt(*i)
	}
	return gruo
}

// AddDeleteAt adds i to the "delete_at" field.
func (gruo *GoodRecommandUpdateOne) AddDeleteAt(i int64) *GoodRecommandUpdateOne {
	gruo.mutation.AddDeleteAt(i)
	return gruo
}

// Mutation returns the GoodRecommandMutation object of the builder.
func (gruo *GoodRecommandUpdateOne) Mutation() *GoodRecommandMutation {
	return gruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GoodRecommandUpdateOne) Select(field string, fields ...string) *GoodRecommandUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GoodRecommand entity.
func (gruo *GoodRecommandUpdateOne) Save(ctx context.Context) (*GoodRecommand, error) {
	var (
		err  error
		node *GoodRecommand
	)
	gruo.defaults()
	if len(gruo.hooks) == 0 {
		node, err = gruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodRecommandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gruo.mutation = mutation
			node, err = gruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gruo.hooks) - 1; i >= 0; i-- {
			if gruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GoodRecommandUpdateOne) SaveX(ctx context.Context) *GoodRecommand {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GoodRecommandUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GoodRecommandUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GoodRecommandUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdateAt(); !ok {
		v := goodrecommand.UpdateDefaultUpdateAt()
		gruo.mutation.SetUpdateAt(v)
	}
}

func (gruo *GoodRecommandUpdateOne) sqlSave(ctx context.Context) (_node *GoodRecommand, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodrecommand.Table,
			Columns: goodrecommand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodrecommand.FieldID,
			},
		},
	}
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodRecommand.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodrecommand.FieldID)
		for _, f := range fields {
			if !goodrecommand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodrecommand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommand.FieldAppID,
		})
	}
	if value, ok := gruo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommand.FieldUserID,
		})
	}
	if value, ok := gruo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommand.FieldGoodID,
		})
	}
	if value, ok := gruo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodrecommand.FieldContent,
		})
	}
	if value, ok := gruo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldCreateAt,
		})
	}
	if value, ok := gruo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldCreateAt,
		})
	}
	if value, ok := gruo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldUpdateAt,
		})
	}
	if value, ok := gruo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldUpdateAt,
		})
	}
	if value, ok := gruo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldDeleteAt,
		})
	}
	if value, ok := gruo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommand.FieldDeleteAt,
		})
	}
	_node = &GoodRecommand{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodrecommand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
