// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppGoodUpdate is the builder for updating AppGood entities.
type AppGoodUpdate struct {
	config
	hooks    []Hook
	mutation *AppGoodMutation
}

// Where appends a list predicates to the AppGoodUpdate builder.
func (agu *AppGoodUpdate) Where(ps ...predicate.AppGood) *AppGoodUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetAppID sets the "app_id" field.
func (agu *AppGoodUpdate) SetAppID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetAppID(u)
	return agu
}

// SetGoodID sets the "good_id" field.
func (agu *AppGoodUpdate) SetGoodID(u uuid.UUID) *AppGoodUpdate {
	agu.mutation.SetGoodID(u)
	return agu
}

// SetAuthorized sets the "authorized" field.
func (agu *AppGoodUpdate) SetAuthorized(b bool) *AppGoodUpdate {
	agu.mutation.SetAuthorized(b)
	return agu
}

// SetNillableAuthorized sets the "authorized" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableAuthorized(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetAuthorized(*b)
	}
	return agu
}

// SetOnline sets the "online" field.
func (agu *AppGoodUpdate) SetOnline(b bool) *AppGoodUpdate {
	agu.mutation.SetOnline(b)
	return agu
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableOnline(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetOnline(*b)
	}
	return agu
}

// SetInitAreaStrategy sets the "init_area_strategy" field.
func (agu *AppGoodUpdate) SetInitAreaStrategy(aas appgood.InitAreaStrategy) *AppGoodUpdate {
	agu.mutation.SetInitAreaStrategy(aas)
	return agu
}

// SetPrice sets the "price" field.
func (agu *AppGoodUpdate) SetPrice(u uint64) *AppGoodUpdate {
	agu.mutation.ResetPrice()
	agu.mutation.SetPrice(u)
	return agu
}

// AddPrice adds u to the "price" field.
func (agu *AppGoodUpdate) AddPrice(u int64) *AppGoodUpdate {
	agu.mutation.AddPrice(u)
	return agu
}

// SetInvitationOnly sets the "invitation_only" field.
func (agu *AppGoodUpdate) SetInvitationOnly(b bool) *AppGoodUpdate {
	agu.mutation.SetInvitationOnly(b)
	return agu
}

// SetNillableInvitationOnly sets the "invitation_only" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableInvitationOnly(b *bool) *AppGoodUpdate {
	if b != nil {
		agu.SetInvitationOnly(*b)
	}
	return agu
}

// SetCreateAt sets the "create_at" field.
func (agu *AppGoodUpdate) SetCreateAt(i int64) *AppGoodUpdate {
	agu.mutation.ResetCreateAt()
	agu.mutation.SetCreateAt(i)
	return agu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableCreateAt(i *int64) *AppGoodUpdate {
	if i != nil {
		agu.SetCreateAt(*i)
	}
	return agu
}

// AddCreateAt adds i to the "create_at" field.
func (agu *AppGoodUpdate) AddCreateAt(i int64) *AppGoodUpdate {
	agu.mutation.AddCreateAt(i)
	return agu
}

// SetUpdateAt sets the "update_at" field.
func (agu *AppGoodUpdate) SetUpdateAt(i int64) *AppGoodUpdate {
	agu.mutation.ResetUpdateAt()
	agu.mutation.SetUpdateAt(i)
	return agu
}

// AddUpdateAt adds i to the "update_at" field.
func (agu *AppGoodUpdate) AddUpdateAt(i int64) *AppGoodUpdate {
	agu.mutation.AddUpdateAt(i)
	return agu
}

// SetDeleteAt sets the "delete_at" field.
func (agu *AppGoodUpdate) SetDeleteAt(i int64) *AppGoodUpdate {
	agu.mutation.ResetDeleteAt()
	agu.mutation.SetDeleteAt(i)
	return agu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agu *AppGoodUpdate) SetNillableDeleteAt(i *int64) *AppGoodUpdate {
	if i != nil {
		agu.SetDeleteAt(*i)
	}
	return agu
}

// AddDeleteAt adds i to the "delete_at" field.
func (agu *AppGoodUpdate) AddDeleteAt(i int64) *AppGoodUpdate {
	agu.mutation.AddDeleteAt(i)
	return agu
}

// Mutation returns the AppGoodMutation object of the builder.
func (agu *AppGoodUpdate) Mutation() *AppGoodMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AppGoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	agu.defaults()
	if len(agu.hooks) == 0 {
		if err = agu.check(); err != nil {
			return 0, err
		}
		affected, err = agu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = agu.check(); err != nil {
				return 0, err
			}
			agu.mutation = mutation
			affected, err = agu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agu.hooks) - 1; i >= 0; i-- {
			if agu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AppGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AppGoodUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AppGoodUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agu *AppGoodUpdate) defaults() {
	if _, ok := agu.mutation.UpdateAt(); !ok {
		v := appgood.UpdateDefaultUpdateAt()
		agu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agu *AppGoodUpdate) check() error {
	if v, ok := agu.mutation.InitAreaStrategy(); ok {
		if err := appgood.InitAreaStrategyValidator(v); err != nil {
			return &ValidationError{Name: "init_area_strategy", err: fmt.Errorf(`ent: validator failed for field "AppGood.init_area_strategy": %w`, err)}
		}
	}
	return nil
}

func (agu *AppGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgood.FieldID,
			},
		},
	}
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldAppID,
		})
	}
	if value, ok := agu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldGoodID,
		})
	}
	if value, ok := agu.mutation.Authorized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldAuthorized,
		})
	}
	if value, ok := agu.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldOnline,
		})
	}
	if value, ok := agu.mutation.InitAreaStrategy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appgood.FieldInitAreaStrategy,
		})
	}
	if value, ok := agu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgood.FieldPrice,
		})
	}
	if value, ok := agu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgood.FieldPrice,
		})
	}
	if value, ok := agu.mutation.InvitationOnly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldInvitationOnly,
		})
	}
	if value, ok := agu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldCreateAt,
		})
	}
	if value, ok := agu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldCreateAt,
		})
	}
	if value, ok := agu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldUpdateAt,
		})
	}
	if value, ok := agu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldUpdateAt,
		})
	}
	if value, ok := agu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldDeleteAt,
		})
	}
	if value, ok := agu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppGoodUpdateOne is the builder for updating a single AppGood entity.
type AppGoodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppGoodMutation
}

// SetAppID sets the "app_id" field.
func (aguo *AppGoodUpdateOne) SetAppID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetAppID(u)
	return aguo
}

// SetGoodID sets the "good_id" field.
func (aguo *AppGoodUpdateOne) SetGoodID(u uuid.UUID) *AppGoodUpdateOne {
	aguo.mutation.SetGoodID(u)
	return aguo
}

// SetAuthorized sets the "authorized" field.
func (aguo *AppGoodUpdateOne) SetAuthorized(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetAuthorized(b)
	return aguo
}

// SetNillableAuthorized sets the "authorized" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableAuthorized(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetAuthorized(*b)
	}
	return aguo
}

// SetOnline sets the "online" field.
func (aguo *AppGoodUpdateOne) SetOnline(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetOnline(b)
	return aguo
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableOnline(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetOnline(*b)
	}
	return aguo
}

// SetInitAreaStrategy sets the "init_area_strategy" field.
func (aguo *AppGoodUpdateOne) SetInitAreaStrategy(aas appgood.InitAreaStrategy) *AppGoodUpdateOne {
	aguo.mutation.SetInitAreaStrategy(aas)
	return aguo
}

// SetPrice sets the "price" field.
func (aguo *AppGoodUpdateOne) SetPrice(u uint64) *AppGoodUpdateOne {
	aguo.mutation.ResetPrice()
	aguo.mutation.SetPrice(u)
	return aguo
}

// AddPrice adds u to the "price" field.
func (aguo *AppGoodUpdateOne) AddPrice(u int64) *AppGoodUpdateOne {
	aguo.mutation.AddPrice(u)
	return aguo
}

// SetInvitationOnly sets the "invitation_only" field.
func (aguo *AppGoodUpdateOne) SetInvitationOnly(b bool) *AppGoodUpdateOne {
	aguo.mutation.SetInvitationOnly(b)
	return aguo
}

// SetNillableInvitationOnly sets the "invitation_only" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableInvitationOnly(b *bool) *AppGoodUpdateOne {
	if b != nil {
		aguo.SetInvitationOnly(*b)
	}
	return aguo
}

// SetCreateAt sets the "create_at" field.
func (aguo *AppGoodUpdateOne) SetCreateAt(i int64) *AppGoodUpdateOne {
	aguo.mutation.ResetCreateAt()
	aguo.mutation.SetCreateAt(i)
	return aguo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableCreateAt(i *int64) *AppGoodUpdateOne {
	if i != nil {
		aguo.SetCreateAt(*i)
	}
	return aguo
}

// AddCreateAt adds i to the "create_at" field.
func (aguo *AppGoodUpdateOne) AddCreateAt(i int64) *AppGoodUpdateOne {
	aguo.mutation.AddCreateAt(i)
	return aguo
}

// SetUpdateAt sets the "update_at" field.
func (aguo *AppGoodUpdateOne) SetUpdateAt(i int64) *AppGoodUpdateOne {
	aguo.mutation.ResetUpdateAt()
	aguo.mutation.SetUpdateAt(i)
	return aguo
}

// AddUpdateAt adds i to the "update_at" field.
func (aguo *AppGoodUpdateOne) AddUpdateAt(i int64) *AppGoodUpdateOne {
	aguo.mutation.AddUpdateAt(i)
	return aguo
}

// SetDeleteAt sets the "delete_at" field.
func (aguo *AppGoodUpdateOne) SetDeleteAt(i int64) *AppGoodUpdateOne {
	aguo.mutation.ResetDeleteAt()
	aguo.mutation.SetDeleteAt(i)
	return aguo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aguo *AppGoodUpdateOne) SetNillableDeleteAt(i *int64) *AppGoodUpdateOne {
	if i != nil {
		aguo.SetDeleteAt(*i)
	}
	return aguo
}

// AddDeleteAt adds i to the "delete_at" field.
func (aguo *AppGoodUpdateOne) AddDeleteAt(i int64) *AppGoodUpdateOne {
	aguo.mutation.AddDeleteAt(i)
	return aguo
}

// Mutation returns the AppGoodMutation object of the builder.
func (aguo *AppGoodUpdateOne) Mutation() *AppGoodMutation {
	return aguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AppGoodUpdateOne) Select(field string, fields ...string) *AppGoodUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AppGood entity.
func (aguo *AppGoodUpdateOne) Save(ctx context.Context) (*AppGood, error) {
	var (
		err  error
		node *AppGood
	)
	aguo.defaults()
	if len(aguo.hooks) == 0 {
		if err = aguo.check(); err != nil {
			return nil, err
		}
		node, err = aguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aguo.check(); err != nil {
				return nil, err
			}
			aguo.mutation = mutation
			node, err = aguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aguo.hooks) - 1; i >= 0; i-- {
			if aguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AppGoodUpdateOne) SaveX(ctx context.Context) *AppGood {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AppGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AppGoodUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aguo *AppGoodUpdateOne) defaults() {
	if _, ok := aguo.mutation.UpdateAt(); !ok {
		v := appgood.UpdateDefaultUpdateAt()
		aguo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aguo *AppGoodUpdateOne) check() error {
	if v, ok := aguo.mutation.InitAreaStrategy(); ok {
		if err := appgood.InitAreaStrategyValidator(v); err != nil {
			return &ValidationError{Name: "init_area_strategy", err: fmt.Errorf(`ent: validator failed for field "AppGood.init_area_strategy": %w`, err)}
		}
	}
	return nil
}

func (aguo *AppGoodUpdateOne) sqlSave(ctx context.Context) (_node *AppGood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgood.Table,
			Columns: appgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgood.FieldID,
			},
		},
	}
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppGood.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgood.FieldID)
		for _, f := range fields {
			if !appgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldAppID,
		})
	}
	if value, ok := aguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgood.FieldGoodID,
		})
	}
	if value, ok := aguo.mutation.Authorized(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldAuthorized,
		})
	}
	if value, ok := aguo.mutation.Online(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldOnline,
		})
	}
	if value, ok := aguo.mutation.InitAreaStrategy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: appgood.FieldInitAreaStrategy,
		})
	}
	if value, ok := aguo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgood.FieldPrice,
		})
	}
	if value, ok := aguo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgood.FieldPrice,
		})
	}
	if value, ok := aguo.mutation.InvitationOnly(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: appgood.FieldInvitationOnly,
		})
	}
	if value, ok := aguo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldCreateAt,
		})
	}
	if value, ok := aguo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldCreateAt,
		})
	}
	if value, ok := aguo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldUpdateAt,
		})
	}
	if value, ok := aguo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldUpdateAt,
		})
	}
	if value, ok := aguo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldDeleteAt,
		})
	}
	if value, ok := aguo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appgood.FieldDeleteAt,
		})
	}
	_node = &AppGood{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
