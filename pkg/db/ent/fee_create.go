// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/fee"
	"github.com/google/uuid"
)

// FeeCreate is the builder for creating a Fee entity.
type FeeCreate struct {
	config
	mutation *FeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (fc *FeeCreate) SetAppID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetAppID(u)
	return fc
}

// SetFeeTypeID sets the "fee_type_id" field.
func (fc *FeeCreate) SetFeeTypeID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetFeeTypeID(u)
	return fc
}

// SetValue sets the "value" field.
func (fc *FeeCreate) SetValue(u uint64) *FeeCreate {
	fc.mutation.SetValue(u)
	return fc
}

// SetCreateAt sets the "create_at" field.
func (fc *FeeCreate) SetCreateAt(u uint32) *FeeCreate {
	fc.mutation.SetCreateAt(u)
	return fc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (fc *FeeCreate) SetNillableCreateAt(u *uint32) *FeeCreate {
	if u != nil {
		fc.SetCreateAt(*u)
	}
	return fc
}

// SetUpdateAt sets the "update_at" field.
func (fc *FeeCreate) SetUpdateAt(u uint32) *FeeCreate {
	fc.mutation.SetUpdateAt(u)
	return fc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (fc *FeeCreate) SetNillableUpdateAt(u *uint32) *FeeCreate {
	if u != nil {
		fc.SetUpdateAt(*u)
	}
	return fc
}

// SetDeleteAt sets the "delete_at" field.
func (fc *FeeCreate) SetDeleteAt(u uint32) *FeeCreate {
	fc.mutation.SetDeleteAt(u)
	return fc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (fc *FeeCreate) SetNillableDeleteAt(u *uint32) *FeeCreate {
	if u != nil {
		fc.SetDeleteAt(*u)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeeCreate) SetID(u uuid.UUID) *FeeCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FeeCreate) SetNillableID(u *uuid.UUID) *FeeCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// Mutation returns the FeeMutation object of the builder.
func (fc *FeeCreate) Mutation() *FeeMutation {
	return fc.mutation
}

// Save creates the Fee in the database.
func (fc *FeeCreate) Save(ctx context.Context) (*Fee, error) {
	var (
		err  error
		node *Fee
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeeCreate) SaveX(ctx context.Context) *Fee {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeeCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeeCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeeCreate) defaults() {
	if _, ok := fc.mutation.CreateAt(); !ok {
		v := fee.DefaultCreateAt()
		fc.mutation.SetCreateAt(v)
	}
	if _, ok := fc.mutation.UpdateAt(); !ok {
		v := fee.DefaultUpdateAt()
		fc.mutation.SetUpdateAt(v)
	}
	if _, ok := fc.mutation.DeleteAt(); !ok {
		v := fee.DefaultDeleteAt()
		fc.mutation.SetDeleteAt(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := fee.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeeCreate) check() error {
	if _, ok := fc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Fee.app_id"`)}
	}
	if _, ok := fc.mutation.FeeTypeID(); !ok {
		return &ValidationError{Name: "fee_type_id", err: errors.New(`ent: missing required field "Fee.fee_type_id"`)}
	}
	if _, ok := fc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Fee.value"`)}
	}
	if _, ok := fc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "Fee.create_at"`)}
	}
	if _, ok := fc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "Fee.update_at"`)}
	}
	if _, ok := fc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "Fee.delete_at"`)}
	}
	return nil
}

func (fc *FeeCreate) sqlSave(ctx context.Context) (*Fee, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fc *FeeCreate) createSpec() (*Fee, *sqlgraph.CreateSpec) {
	var (
		_node = &Fee{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fee.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fee.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := fc.mutation.FeeTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldFeeTypeID,
		})
		_node.FeeTypeID = value
	}
	if value, ok := fc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: fee.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := fc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := fc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := fc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fee.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (fc *FeeCreate) OnConflict(opts ...sql.ConflictOption) *FeeUpsertOne {
	fc.conflict = opts
	return &FeeUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fc *FeeCreate) OnConflictColumns(columns ...string) *FeeUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeeUpsertOne{
		create: fc,
	}
}

type (
	// FeeUpsertOne is the builder for "upsert"-ing
	//  one Fee node.
	FeeUpsertOne struct {
		create *FeeCreate
	}

	// FeeUpsert is the "OnConflict" setter.
	FeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *FeeUpsert) SetAppID(v uuid.UUID) *FeeUpsert {
	u.Set(fee.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FeeUpsert) UpdateAppID() *FeeUpsert {
	u.SetExcluded(fee.FieldAppID)
	return u
}

// SetFeeTypeID sets the "fee_type_id" field.
func (u *FeeUpsert) SetFeeTypeID(v uuid.UUID) *FeeUpsert {
	u.Set(fee.FieldFeeTypeID, v)
	return u
}

// UpdateFeeTypeID sets the "fee_type_id" field to the value that was provided on create.
func (u *FeeUpsert) UpdateFeeTypeID() *FeeUpsert {
	u.SetExcluded(fee.FieldFeeTypeID)
	return u
}

// SetValue sets the "value" field.
func (u *FeeUpsert) SetValue(v uint64) *FeeUpsert {
	u.Set(fee.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *FeeUpsert) UpdateValue() *FeeUpsert {
	u.SetExcluded(fee.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *FeeUpsert) AddValue(v uint64) *FeeUpsert {
	u.Add(fee.FieldValue, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *FeeUpsert) SetCreateAt(v uint32) *FeeUpsert {
	u.Set(fee.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *FeeUpsert) UpdateCreateAt() *FeeUpsert {
	u.SetExcluded(fee.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *FeeUpsert) AddCreateAt(v uint32) *FeeUpsert {
	u.Add(fee.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *FeeUpsert) SetUpdateAt(v uint32) *FeeUpsert {
	u.Set(fee.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *FeeUpsert) UpdateUpdateAt() *FeeUpsert {
	u.SetExcluded(fee.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *FeeUpsert) AddUpdateAt(v uint32) *FeeUpsert {
	u.Add(fee.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *FeeUpsert) SetDeleteAt(v uint32) *FeeUpsert {
	u.Set(fee.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *FeeUpsert) UpdateDeleteAt() *FeeUpsert {
	u.SetExcluded(fee.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *FeeUpsert) AddDeleteAt(v uint32) *FeeUpsert {
	u.Add(fee.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fee.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeUpsertOne) UpdateNewValues() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fee.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Fee.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FeeUpsertOne) Ignore() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeUpsertOne) DoNothing() *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeCreate.OnConflict
// documentation for more info.
func (u *FeeUpsertOne) Update(set func(*FeeUpsert)) *FeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *FeeUpsertOne) SetAppID(v uuid.UUID) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateAppID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateAppID()
	})
}

// SetFeeTypeID sets the "fee_type_id" field.
func (u *FeeUpsertOne) SetFeeTypeID(v uuid.UUID) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetFeeTypeID(v)
	})
}

// UpdateFeeTypeID sets the "fee_type_id" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateFeeTypeID() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateFeeTypeID()
	})
}

// SetValue sets the "value" field.
func (u *FeeUpsertOne) SetValue(v uint64) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *FeeUpsertOne) AddValue(v uint64) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateValue() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateValue()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *FeeUpsertOne) SetCreateAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *FeeUpsertOne) AddCreateAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateCreateAt() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *FeeUpsertOne) SetUpdateAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *FeeUpsertOne) AddUpdateAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateUpdateAt() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *FeeUpsertOne) SetDeleteAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *FeeUpsertOne) AddDeleteAt(v uint32) *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *FeeUpsertOne) UpdateDeleteAt() *FeeUpsertOne {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *FeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FeeUpsertOne.ID is not supported by MySQL driver. Use FeeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeeCreateBulk is the builder for creating many Fee entities in bulk.
type FeeCreateBulk struct {
	config
	builders []*FeeCreate
	conflict []sql.ConflictOption
}

// Save creates the Fee entities in the database.
func (fcb *FeeCreateBulk) Save(ctx context.Context) ([]*Fee, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fee, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeeCreateBulk) SaveX(ctx context.Context) []*Fee {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeeCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeeCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeeUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (fcb *FeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeeUpsertBulk {
	fcb.conflict = opts
	return &FeeUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fcb *FeeCreateBulk) OnConflictColumns(columns ...string) *FeeUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeeUpsertBulk{
		create: fcb,
	}
}

// FeeUpsertBulk is the builder for "upsert"-ing
// a bulk of Fee nodes.
type FeeUpsertBulk struct {
	create *FeeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fee.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FeeUpsertBulk) UpdateNewValues() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fee.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FeeUpsertBulk) Ignore() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeeUpsertBulk) DoNothing() *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeeCreateBulk.OnConflict
// documentation for more info.
func (u *FeeUpsertBulk) Update(set func(*FeeUpsert)) *FeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *FeeUpsertBulk) SetAppID(v uuid.UUID) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateAppID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateAppID()
	})
}

// SetFeeTypeID sets the "fee_type_id" field.
func (u *FeeUpsertBulk) SetFeeTypeID(v uuid.UUID) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetFeeTypeID(v)
	})
}

// UpdateFeeTypeID sets the "fee_type_id" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateFeeTypeID() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateFeeTypeID()
	})
}

// SetValue sets the "value" field.
func (u *FeeUpsertBulk) SetValue(v uint64) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *FeeUpsertBulk) AddValue(v uint64) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateValue() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateValue()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *FeeUpsertBulk) SetCreateAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *FeeUpsertBulk) AddCreateAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateCreateAt() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *FeeUpsertBulk) SetUpdateAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *FeeUpsertBulk) AddUpdateAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateUpdateAt() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *FeeUpsertBulk) SetDeleteAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *FeeUpsertBulk) AddDeleteAt(v uint32) *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *FeeUpsertBulk) UpdateDeleteAt() *FeeUpsertBulk {
	return u.Update(func(s *FeeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *FeeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
