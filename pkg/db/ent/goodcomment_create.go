// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodcomment"
	"github.com/google/uuid"
)

// GoodCommentCreate is the builder for creating a GoodComment entity.
type GoodCommentCreate struct {
	config
	mutation *GoodCommentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetReplyToID sets the "reply_to_id" field.
func (gcc *GoodCommentCreate) SetReplyToID(u uuid.UUID) *GoodCommentCreate {
	gcc.mutation.SetReplyToID(u)
	return gcc
}

// SetNillableReplyToID sets the "reply_to_id" field if the given value is not nil.
func (gcc *GoodCommentCreate) SetNillableReplyToID(u *uuid.UUID) *GoodCommentCreate {
	if u != nil {
		gcc.SetReplyToID(*u)
	}
	return gcc
}

// SetUserID sets the "user_id" field.
func (gcc *GoodCommentCreate) SetUserID(u uuid.UUID) *GoodCommentCreate {
	gcc.mutation.SetUserID(u)
	return gcc
}

// SetAppID sets the "app_id" field.
func (gcc *GoodCommentCreate) SetAppID(u uuid.UUID) *GoodCommentCreate {
	gcc.mutation.SetAppID(u)
	return gcc
}

// SetGoodID sets the "good_id" field.
func (gcc *GoodCommentCreate) SetGoodID(u uuid.UUID) *GoodCommentCreate {
	gcc.mutation.SetGoodID(u)
	return gcc
}

// SetOrderID sets the "order_id" field.
func (gcc *GoodCommentCreate) SetOrderID(u uuid.UUID) *GoodCommentCreate {
	gcc.mutation.SetOrderID(u)
	return gcc
}

// SetContent sets the "content" field.
func (gcc *GoodCommentCreate) SetContent(s string) *GoodCommentCreate {
	gcc.mutation.SetContent(s)
	return gcc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (gcc *GoodCommentCreate) SetNillableContent(s *string) *GoodCommentCreate {
	if s != nil {
		gcc.SetContent(*s)
	}
	return gcc
}

// SetCreateAt sets the "create_at" field.
func (gcc *GoodCommentCreate) SetCreateAt(i int64) *GoodCommentCreate {
	gcc.mutation.SetCreateAt(i)
	return gcc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gcc *GoodCommentCreate) SetNillableCreateAt(i *int64) *GoodCommentCreate {
	if i != nil {
		gcc.SetCreateAt(*i)
	}
	return gcc
}

// SetUpdateAt sets the "update_at" field.
func (gcc *GoodCommentCreate) SetUpdateAt(i int64) *GoodCommentCreate {
	gcc.mutation.SetUpdateAt(i)
	return gcc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (gcc *GoodCommentCreate) SetNillableUpdateAt(i *int64) *GoodCommentCreate {
	if i != nil {
		gcc.SetUpdateAt(*i)
	}
	return gcc
}

// SetDeleteAt sets the "delete_at" field.
func (gcc *GoodCommentCreate) SetDeleteAt(i int64) *GoodCommentCreate {
	gcc.mutation.SetDeleteAt(i)
	return gcc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gcc *GoodCommentCreate) SetNillableDeleteAt(i *int64) *GoodCommentCreate {
	if i != nil {
		gcc.SetDeleteAt(*i)
	}
	return gcc
}

// SetID sets the "id" field.
func (gcc *GoodCommentCreate) SetID(u uuid.UUID) *GoodCommentCreate {
	gcc.mutation.SetID(u)
	return gcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gcc *GoodCommentCreate) SetNillableID(u *uuid.UUID) *GoodCommentCreate {
	if u != nil {
		gcc.SetID(*u)
	}
	return gcc
}

// Mutation returns the GoodCommentMutation object of the builder.
func (gcc *GoodCommentCreate) Mutation() *GoodCommentMutation {
	return gcc.mutation
}

// Save creates the GoodComment in the database.
func (gcc *GoodCommentCreate) Save(ctx context.Context) (*GoodComment, error) {
	var (
		err  error
		node *GoodComment
	)
	gcc.defaults()
	if len(gcc.hooks) == 0 {
		if err = gcc.check(); err != nil {
			return nil, err
		}
		node, err = gcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gcc.check(); err != nil {
				return nil, err
			}
			gcc.mutation = mutation
			if node, err = gcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gcc.hooks) - 1; i >= 0; i-- {
			if gcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gcc *GoodCommentCreate) SaveX(ctx context.Context) *GoodComment {
	v, err := gcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcc *GoodCommentCreate) Exec(ctx context.Context) error {
	_, err := gcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcc *GoodCommentCreate) ExecX(ctx context.Context) {
	if err := gcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcc *GoodCommentCreate) defaults() {
	if _, ok := gcc.mutation.Content(); !ok {
		v := goodcomment.DefaultContent
		gcc.mutation.SetContent(v)
	}
	if _, ok := gcc.mutation.CreateAt(); !ok {
		v := goodcomment.DefaultCreateAt()
		gcc.mutation.SetCreateAt(v)
	}
	if _, ok := gcc.mutation.UpdateAt(); !ok {
		v := goodcomment.DefaultUpdateAt()
		gcc.mutation.SetUpdateAt(v)
	}
	if _, ok := gcc.mutation.DeleteAt(); !ok {
		v := goodcomment.DefaultDeleteAt()
		gcc.mutation.SetDeleteAt(v)
	}
	if _, ok := gcc.mutation.ID(); !ok {
		v := goodcomment.DefaultID()
		gcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gcc *GoodCommentCreate) check() error {
	if _, ok := gcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GoodComment.user_id"`)}
	}
	if _, ok := gcc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "GoodComment.app_id"`)}
	}
	if _, ok := gcc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "GoodComment.good_id"`)}
	}
	if _, ok := gcc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "GoodComment.order_id"`)}
	}
	if _, ok := gcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "GoodComment.content"`)}
	}
	if _, ok := gcc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "GoodComment.create_at"`)}
	}
	if _, ok := gcc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "GoodComment.update_at"`)}
	}
	if _, ok := gcc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "GoodComment.delete_at"`)}
	}
	return nil
}

func (gcc *GoodCommentCreate) sqlSave(ctx context.Context) (*GoodComment, error) {
	_node, _spec := gcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gcc *GoodCommentCreate) createSpec() (*GoodComment, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodComment{config: gcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodcomment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodcomment.FieldID,
			},
		}
	)
	_spec.OnConflict = gcc.conflict
	if id, ok := gcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gcc.mutation.ReplyToID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldReplyToID,
		})
		_node.ReplyToID = value
	}
	if value, ok := gcc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := gcc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := gcc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gcc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodcomment.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := gcc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodcomment.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := gcc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := gcc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := gcc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodcomment.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodComment.Create().
//		SetReplyToID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodCommentUpsert) {
//			SetReplyToID(v+v).
//		}).
//		Exec(ctx)
//
func (gcc *GoodCommentCreate) OnConflict(opts ...sql.ConflictOption) *GoodCommentUpsertOne {
	gcc.conflict = opts
	return &GoodCommentUpsertOne{
		create: gcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gcc *GoodCommentCreate) OnConflictColumns(columns ...string) *GoodCommentUpsertOne {
	gcc.conflict = append(gcc.conflict, sql.ConflictColumns(columns...))
	return &GoodCommentUpsertOne{
		create: gcc,
	}
}

type (
	// GoodCommentUpsertOne is the builder for "upsert"-ing
	//  one GoodComment node.
	GoodCommentUpsertOne struct {
		create *GoodCommentCreate
	}

	// GoodCommentUpsert is the "OnConflict" setter.
	GoodCommentUpsert struct {
		*sql.UpdateSet
	}
)

// SetReplyToID sets the "reply_to_id" field.
func (u *GoodCommentUpsert) SetReplyToID(v uuid.UUID) *GoodCommentUpsert {
	u.Set(goodcomment.FieldReplyToID, v)
	return u
}

// UpdateReplyToID sets the "reply_to_id" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateReplyToID() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldReplyToID)
	return u
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (u *GoodCommentUpsert) ClearReplyToID() *GoodCommentUpsert {
	u.SetNull(goodcomment.FieldReplyToID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GoodCommentUpsert) SetUserID(v uuid.UUID) *GoodCommentUpsert {
	u.Set(goodcomment.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateUserID() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldUserID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *GoodCommentUpsert) SetAppID(v uuid.UUID) *GoodCommentUpsert {
	u.Set(goodcomment.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateAppID() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldAppID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodCommentUpsert) SetGoodID(v uuid.UUID) *GoodCommentUpsert {
	u.Set(goodcomment.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateGoodID() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldGoodID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *GoodCommentUpsert) SetOrderID(v uuid.UUID) *GoodCommentUpsert {
	u.Set(goodcomment.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateOrderID() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldOrderID)
	return u
}

// SetContent sets the "content" field.
func (u *GoodCommentUpsert) SetContent(v string) *GoodCommentUpsert {
	u.Set(goodcomment.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateContent() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldContent)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *GoodCommentUpsert) SetCreateAt(v int64) *GoodCommentUpsert {
	u.Set(goodcomment.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateCreateAt() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodCommentUpsert) AddCreateAt(v int64) *GoodCommentUpsert {
	u.Add(goodcomment.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodCommentUpsert) SetUpdateAt(v int64) *GoodCommentUpsert {
	u.Set(goodcomment.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateUpdateAt() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodCommentUpsert) AddUpdateAt(v int64) *GoodCommentUpsert {
	u.Add(goodcomment.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodCommentUpsert) SetDeleteAt(v int64) *GoodCommentUpsert {
	u.Set(goodcomment.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodCommentUpsert) UpdateDeleteAt() *GoodCommentUpsert {
	u.SetExcluded(goodcomment.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodCommentUpsert) AddDeleteAt(v int64) *GoodCommentUpsert {
	u.Add(goodcomment.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodcomment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodCommentUpsertOne) UpdateNewValues() *GoodCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodcomment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodComment.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodCommentUpsertOne) Ignore() *GoodCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodCommentUpsertOne) DoNothing() *GoodCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCommentCreate.OnConflict
// documentation for more info.
func (u *GoodCommentUpsertOne) Update(set func(*GoodCommentUpsert)) *GoodCommentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetReplyToID sets the "reply_to_id" field.
func (u *GoodCommentUpsertOne) SetReplyToID(v uuid.UUID) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetReplyToID(v)
	})
}

// UpdateReplyToID sets the "reply_to_id" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateReplyToID() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateReplyToID()
	})
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (u *GoodCommentUpsertOne) ClearReplyToID() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.ClearReplyToID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodCommentUpsertOne) SetUserID(v uuid.UUID) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateUserID() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodCommentUpsertOne) SetAppID(v uuid.UUID) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateAppID() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodCommentUpsertOne) SetGoodID(v uuid.UUID) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateGoodID() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *GoodCommentUpsertOne) SetOrderID(v uuid.UUID) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateOrderID() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateOrderID()
	})
}

// SetContent sets the "content" field.
func (u *GoodCommentUpsertOne) SetContent(v string) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateContent() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateContent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodCommentUpsertOne) SetCreateAt(v int64) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodCommentUpsertOne) AddCreateAt(v int64) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateCreateAt() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodCommentUpsertOne) SetUpdateAt(v int64) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodCommentUpsertOne) AddUpdateAt(v int64) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateUpdateAt() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodCommentUpsertOne) SetDeleteAt(v int64) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodCommentUpsertOne) AddDeleteAt(v int64) *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodCommentUpsertOne) UpdateDeleteAt() *GoodCommentUpsertOne {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodCommentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodCommentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodCommentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodCommentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodCommentUpsertOne.ID is not supported by MySQL driver. Use GoodCommentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodCommentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodCommentCreateBulk is the builder for creating many GoodComment entities in bulk.
type GoodCommentCreateBulk struct {
	config
	builders []*GoodCommentCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodComment entities in the database.
func (gccb *GoodCommentCreateBulk) Save(ctx context.Context) ([]*GoodComment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gccb.builders))
	nodes := make([]*GoodComment, len(gccb.builders))
	mutators := make([]Mutator, len(gccb.builders))
	for i := range gccb.builders {
		func(i int, root context.Context) {
			builder := gccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gccb *GoodCommentCreateBulk) SaveX(ctx context.Context) []*GoodComment {
	v, err := gccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gccb *GoodCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := gccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gccb *GoodCommentCreateBulk) ExecX(ctx context.Context) {
	if err := gccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodComment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodCommentUpsert) {
//			SetReplyToID(v+v).
//		}).
//		Exec(ctx)
//
func (gccb *GoodCommentCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodCommentUpsertBulk {
	gccb.conflict = opts
	return &GoodCommentUpsertBulk{
		create: gccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodComment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gccb *GoodCommentCreateBulk) OnConflictColumns(columns ...string) *GoodCommentUpsertBulk {
	gccb.conflict = append(gccb.conflict, sql.ConflictColumns(columns...))
	return &GoodCommentUpsertBulk{
		create: gccb,
	}
}

// GoodCommentUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodComment nodes.
type GoodCommentUpsertBulk struct {
	create *GoodCommentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodComment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodcomment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodCommentUpsertBulk) UpdateNewValues() *GoodCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodcomment.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodComment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodCommentUpsertBulk) Ignore() *GoodCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodCommentUpsertBulk) DoNothing() *GoodCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodCommentCreateBulk.OnConflict
// documentation for more info.
func (u *GoodCommentUpsertBulk) Update(set func(*GoodCommentUpsert)) *GoodCommentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodCommentUpsert{UpdateSet: update})
	}))
	return u
}

// SetReplyToID sets the "reply_to_id" field.
func (u *GoodCommentUpsertBulk) SetReplyToID(v uuid.UUID) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetReplyToID(v)
	})
}

// UpdateReplyToID sets the "reply_to_id" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateReplyToID() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateReplyToID()
	})
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (u *GoodCommentUpsertBulk) ClearReplyToID() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.ClearReplyToID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GoodCommentUpsertBulk) SetUserID(v uuid.UUID) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateUserID() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateUserID()
	})
}

// SetAppID sets the "app_id" field.
func (u *GoodCommentUpsertBulk) SetAppID(v uuid.UUID) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateAppID() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateAppID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *GoodCommentUpsertBulk) SetGoodID(v uuid.UUID) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateGoodID() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateGoodID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *GoodCommentUpsertBulk) SetOrderID(v uuid.UUID) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateOrderID() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateOrderID()
	})
}

// SetContent sets the "content" field.
func (u *GoodCommentUpsertBulk) SetContent(v string) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateContent() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateContent()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodCommentUpsertBulk) SetCreateAt(v int64) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *GoodCommentUpsertBulk) AddCreateAt(v int64) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateCreateAt() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodCommentUpsertBulk) SetUpdateAt(v int64) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *GoodCommentUpsertBulk) AddUpdateAt(v int64) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateUpdateAt() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodCommentUpsertBulk) SetDeleteAt(v int64) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *GoodCommentUpsertBulk) AddDeleteAt(v int64) *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodCommentUpsertBulk) UpdateDeleteAt() *GoodCommentUpsertBulk {
	return u.Update(func(s *GoodCommentUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodCommentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodCommentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodCommentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodCommentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
