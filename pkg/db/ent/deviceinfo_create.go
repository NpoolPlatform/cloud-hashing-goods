// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/deviceinfo"
	"github.com/google/uuid"
)

// DeviceInfoCreate is the builder for creating a DeviceInfo entity.
type DeviceInfoCreate struct {
	config
	mutation *DeviceInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (dic *DeviceInfoCreate) SetType(s string) *DeviceInfoCreate {
	dic.mutation.SetType(s)
	return dic
}

// SetManufacturer sets the "manufacturer" field.
func (dic *DeviceInfoCreate) SetManufacturer(s string) *DeviceInfoCreate {
	dic.mutation.SetManufacturer(s)
	return dic
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableManufacturer(s *string) *DeviceInfoCreate {
	if s != nil {
		dic.SetManufacturer(*s)
	}
	return dic
}

// SetPowerComsuption sets the "power_comsuption" field.
func (dic *DeviceInfoCreate) SetPowerComsuption(i int32) *DeviceInfoCreate {
	dic.mutation.SetPowerComsuption(i)
	return dic
}

// SetShipmentAt sets the "shipment_at" field.
func (dic *DeviceInfoCreate) SetShipmentAt(i int32) *DeviceInfoCreate {
	dic.mutation.SetShipmentAt(i)
	return dic
}

// SetCreateAt sets the "create_at" field.
func (dic *DeviceInfoCreate) SetCreateAt(i int64) *DeviceInfoCreate {
	dic.mutation.SetCreateAt(i)
	return dic
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableCreateAt(i *int64) *DeviceInfoCreate {
	if i != nil {
		dic.SetCreateAt(*i)
	}
	return dic
}

// SetUpdateAt sets the "update_at" field.
func (dic *DeviceInfoCreate) SetUpdateAt(i int64) *DeviceInfoCreate {
	dic.mutation.SetUpdateAt(i)
	return dic
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableUpdateAt(i *int64) *DeviceInfoCreate {
	if i != nil {
		dic.SetUpdateAt(*i)
	}
	return dic
}

// SetDeleteAt sets the "delete_at" field.
func (dic *DeviceInfoCreate) SetDeleteAt(i int64) *DeviceInfoCreate {
	dic.mutation.SetDeleteAt(i)
	return dic
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableDeleteAt(i *int64) *DeviceInfoCreate {
	if i != nil {
		dic.SetDeleteAt(*i)
	}
	return dic
}

// SetID sets the "id" field.
func (dic *DeviceInfoCreate) SetID(u uuid.UUID) *DeviceInfoCreate {
	dic.mutation.SetID(u)
	return dic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableID(u *uuid.UUID) *DeviceInfoCreate {
	if u != nil {
		dic.SetID(*u)
	}
	return dic
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (dic *DeviceInfoCreate) Mutation() *DeviceInfoMutation {
	return dic.mutation
}

// Save creates the DeviceInfo in the database.
func (dic *DeviceInfoCreate) Save(ctx context.Context) (*DeviceInfo, error) {
	var (
		err  error
		node *DeviceInfo
	)
	dic.defaults()
	if len(dic.hooks) == 0 {
		if err = dic.check(); err != nil {
			return nil, err
		}
		node, err = dic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dic.check(); err != nil {
				return nil, err
			}
			dic.mutation = mutation
			if node, err = dic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dic.hooks) - 1; i >= 0; i-- {
			if dic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DeviceInfoCreate) SaveX(ctx context.Context) *DeviceInfo {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DeviceInfoCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DeviceInfoCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DeviceInfoCreate) defaults() {
	if _, ok := dic.mutation.Manufacturer(); !ok {
		v := deviceinfo.DefaultManufacturer
		dic.mutation.SetManufacturer(v)
	}
	if _, ok := dic.mutation.CreateAt(); !ok {
		v := deviceinfo.DefaultCreateAt()
		dic.mutation.SetCreateAt(v)
	}
	if _, ok := dic.mutation.UpdateAt(); !ok {
		v := deviceinfo.DefaultUpdateAt()
		dic.mutation.SetUpdateAt(v)
	}
	if _, ok := dic.mutation.DeleteAt(); !ok {
		v := deviceinfo.DefaultDeleteAt()
		dic.mutation.SetDeleteAt(v)
	}
	if _, ok := dic.mutation.ID(); !ok {
		v := deviceinfo.DefaultID()
		dic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DeviceInfoCreate) check() error {
	if _, ok := dic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "DeviceInfo.type"`)}
	}
	if v, ok := dic.mutation.GetType(); ok {
		if err := deviceinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "DeviceInfo.type": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Manufacturer(); !ok {
		return &ValidationError{Name: "manufacturer", err: errors.New(`ent: missing required field "DeviceInfo.manufacturer"`)}
	}
	if v, ok := dic.mutation.Manufacturer(); ok {
		if err := deviceinfo.ManufacturerValidator(v); err != nil {
			return &ValidationError{Name: "manufacturer", err: fmt.Errorf(`ent: validator failed for field "DeviceInfo.manufacturer": %w`, err)}
		}
	}
	if _, ok := dic.mutation.PowerComsuption(); !ok {
		return &ValidationError{Name: "power_comsuption", err: errors.New(`ent: missing required field "DeviceInfo.power_comsuption"`)}
	}
	if _, ok := dic.mutation.ShipmentAt(); !ok {
		return &ValidationError{Name: "shipment_at", err: errors.New(`ent: missing required field "DeviceInfo.shipment_at"`)}
	}
	if _, ok := dic.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "DeviceInfo.create_at"`)}
	}
	if _, ok := dic.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "DeviceInfo.update_at"`)}
	}
	if _, ok := dic.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "DeviceInfo.delete_at"`)}
	}
	return nil
}

func (dic *DeviceInfoCreate) sqlSave(ctx context.Context) (*DeviceInfo, error) {
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (dic *DeviceInfoCreate) createSpec() (*DeviceInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceInfo{config: dic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deviceinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deviceinfo.FieldID,
			},
		}
	)
	_spec.OnConflict = dic.conflict
	if id, ok := dic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dic.mutation.Manufacturer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldManufacturer,
		})
		_node.Manufacturer = value
	}
	if value, ok := dic.mutation.PowerComsuption(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldPowerComsuption,
		})
		_node.PowerComsuption = value
	}
	if value, ok := dic.mutation.ShipmentAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldShipmentAt,
		})
		_node.ShipmentAt = value
	}
	if value, ok := dic.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := dic.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := dic.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceInfo.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceInfoUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (dic *DeviceInfoCreate) OnConflict(opts ...sql.ConflictOption) *DeviceInfoUpsertOne {
	dic.conflict = opts
	return &DeviceInfoUpsertOne{
		create: dic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dic *DeviceInfoCreate) OnConflictColumns(columns ...string) *DeviceInfoUpsertOne {
	dic.conflict = append(dic.conflict, sql.ConflictColumns(columns...))
	return &DeviceInfoUpsertOne{
		create: dic,
	}
}

type (
	// DeviceInfoUpsertOne is the builder for "upsert"-ing
	//  one DeviceInfo node.
	DeviceInfoUpsertOne struct {
		create *DeviceInfoCreate
	}

	// DeviceInfoUpsert is the "OnConflict" setter.
	DeviceInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *DeviceInfoUpsert) SetType(v string) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdateType() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldType)
	return u
}

// SetManufacturer sets the "manufacturer" field.
func (u *DeviceInfoUpsert) SetManufacturer(v string) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldManufacturer, v)
	return u
}

// UpdateManufacturer sets the "manufacturer" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdateManufacturer() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldManufacturer)
	return u
}

// SetPowerComsuption sets the "power_comsuption" field.
func (u *DeviceInfoUpsert) SetPowerComsuption(v int32) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldPowerComsuption, v)
	return u
}

// UpdatePowerComsuption sets the "power_comsuption" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdatePowerComsuption() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldPowerComsuption)
	return u
}

// AddPowerComsuption adds v to the "power_comsuption" field.
func (u *DeviceInfoUpsert) AddPowerComsuption(v int32) *DeviceInfoUpsert {
	u.Add(deviceinfo.FieldPowerComsuption, v)
	return u
}

// SetShipmentAt sets the "shipment_at" field.
func (u *DeviceInfoUpsert) SetShipmentAt(v int32) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldShipmentAt, v)
	return u
}

// UpdateShipmentAt sets the "shipment_at" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdateShipmentAt() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldShipmentAt)
	return u
}

// AddShipmentAt adds v to the "shipment_at" field.
func (u *DeviceInfoUpsert) AddShipmentAt(v int32) *DeviceInfoUpsert {
	u.Add(deviceinfo.FieldShipmentAt, v)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *DeviceInfoUpsert) SetCreateAt(v int64) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdateCreateAt() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *DeviceInfoUpsert) AddCreateAt(v int64) *DeviceInfoUpsert {
	u.Add(deviceinfo.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *DeviceInfoUpsert) SetUpdateAt(v int64) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdateUpdateAt() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *DeviceInfoUpsert) AddUpdateAt(v int64) *DeviceInfoUpsert {
	u.Add(deviceinfo.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *DeviceInfoUpsert) SetDeleteAt(v int64) *DeviceInfoUpsert {
	u.Set(deviceinfo.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *DeviceInfoUpsert) UpdateDeleteAt() *DeviceInfoUpsert {
	u.SetExcluded(deviceinfo.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *DeviceInfoUpsert) AddDeleteAt(v int64) *DeviceInfoUpsert {
	u.Add(deviceinfo.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeviceInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deviceinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeviceInfoUpsertOne) UpdateNewValues() *DeviceInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deviceinfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.DeviceInfo.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *DeviceInfoUpsertOne) Ignore() *DeviceInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceInfoUpsertOne) DoNothing() *DeviceInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceInfoCreate.OnConflict
// documentation for more info.
func (u *DeviceInfoUpsertOne) Update(set func(*DeviceInfoUpsert)) *DeviceInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *DeviceInfoUpsertOne) SetType(v string) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdateType() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateType()
	})
}

// SetManufacturer sets the "manufacturer" field.
func (u *DeviceInfoUpsertOne) SetManufacturer(v string) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetManufacturer(v)
	})
}

// UpdateManufacturer sets the "manufacturer" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdateManufacturer() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateManufacturer()
	})
}

// SetPowerComsuption sets the "power_comsuption" field.
func (u *DeviceInfoUpsertOne) SetPowerComsuption(v int32) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetPowerComsuption(v)
	})
}

// AddPowerComsuption adds v to the "power_comsuption" field.
func (u *DeviceInfoUpsertOne) AddPowerComsuption(v int32) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddPowerComsuption(v)
	})
}

// UpdatePowerComsuption sets the "power_comsuption" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdatePowerComsuption() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdatePowerComsuption()
	})
}

// SetShipmentAt sets the "shipment_at" field.
func (u *DeviceInfoUpsertOne) SetShipmentAt(v int32) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetShipmentAt(v)
	})
}

// AddShipmentAt adds v to the "shipment_at" field.
func (u *DeviceInfoUpsertOne) AddShipmentAt(v int32) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddShipmentAt(v)
	})
}

// UpdateShipmentAt sets the "shipment_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdateShipmentAt() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateShipmentAt()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DeviceInfoUpsertOne) SetCreateAt(v int64) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *DeviceInfoUpsertOne) AddCreateAt(v int64) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdateCreateAt() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *DeviceInfoUpsertOne) SetUpdateAt(v int64) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *DeviceInfoUpsertOne) AddUpdateAt(v int64) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdateUpdateAt() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *DeviceInfoUpsertOne) SetDeleteAt(v int64) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *DeviceInfoUpsertOne) AddDeleteAt(v int64) *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertOne) UpdateDeleteAt() *DeviceInfoUpsertOne {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *DeviceInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeviceInfoUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeviceInfoUpsertOne.ID is not supported by MySQL driver. Use DeviceInfoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeviceInfoUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeviceInfoCreateBulk is the builder for creating many DeviceInfo entities in bulk.
type DeviceInfoCreateBulk struct {
	config
	builders []*DeviceInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the DeviceInfo entities in the database.
func (dicb *DeviceInfoCreateBulk) Save(ctx context.Context) ([]*DeviceInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DeviceInfo, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DeviceInfoCreateBulk) SaveX(ctx context.Context) []*DeviceInfo {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DeviceInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DeviceInfoCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeviceInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeviceInfoUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
//
func (dicb *DeviceInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeviceInfoUpsertBulk {
	dicb.conflict = opts
	return &DeviceInfoUpsertBulk{
		create: dicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeviceInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (dicb *DeviceInfoCreateBulk) OnConflictColumns(columns ...string) *DeviceInfoUpsertBulk {
	dicb.conflict = append(dicb.conflict, sql.ConflictColumns(columns...))
	return &DeviceInfoUpsertBulk{
		create: dicb,
	}
}

// DeviceInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of DeviceInfo nodes.
type DeviceInfoUpsertBulk struct {
	create *DeviceInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeviceInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deviceinfo.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *DeviceInfoUpsertBulk) UpdateNewValues() *DeviceInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deviceinfo.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeviceInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *DeviceInfoUpsertBulk) Ignore() *DeviceInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeviceInfoUpsertBulk) DoNothing() *DeviceInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeviceInfoCreateBulk.OnConflict
// documentation for more info.
func (u *DeviceInfoUpsertBulk) Update(set func(*DeviceInfoUpsert)) *DeviceInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeviceInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *DeviceInfoUpsertBulk) SetType(v string) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdateType() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateType()
	})
}

// SetManufacturer sets the "manufacturer" field.
func (u *DeviceInfoUpsertBulk) SetManufacturer(v string) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetManufacturer(v)
	})
}

// UpdateManufacturer sets the "manufacturer" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdateManufacturer() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateManufacturer()
	})
}

// SetPowerComsuption sets the "power_comsuption" field.
func (u *DeviceInfoUpsertBulk) SetPowerComsuption(v int32) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetPowerComsuption(v)
	})
}

// AddPowerComsuption adds v to the "power_comsuption" field.
func (u *DeviceInfoUpsertBulk) AddPowerComsuption(v int32) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddPowerComsuption(v)
	})
}

// UpdatePowerComsuption sets the "power_comsuption" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdatePowerComsuption() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdatePowerComsuption()
	})
}

// SetShipmentAt sets the "shipment_at" field.
func (u *DeviceInfoUpsertBulk) SetShipmentAt(v int32) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetShipmentAt(v)
	})
}

// AddShipmentAt adds v to the "shipment_at" field.
func (u *DeviceInfoUpsertBulk) AddShipmentAt(v int32) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddShipmentAt(v)
	})
}

// UpdateShipmentAt sets the "shipment_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdateShipmentAt() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateShipmentAt()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *DeviceInfoUpsertBulk) SetCreateAt(v int64) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *DeviceInfoUpsertBulk) AddCreateAt(v int64) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdateCreateAt() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *DeviceInfoUpsertBulk) SetUpdateAt(v int64) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *DeviceInfoUpsertBulk) AddUpdateAt(v int64) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdateUpdateAt() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *DeviceInfoUpsertBulk) SetDeleteAt(v int64) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *DeviceInfoUpsertBulk) AddDeleteAt(v int64) *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *DeviceInfoUpsertBulk) UpdateDeleteAt() *DeviceInfoUpsertBulk {
	return u.Update(func(s *DeviceInfoUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *DeviceInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeviceInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeviceInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeviceInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
