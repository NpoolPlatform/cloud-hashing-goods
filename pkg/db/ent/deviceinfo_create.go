// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/deviceinfo"
	"github.com/google/uuid"
)

// DeviceInfoCreate is the builder for creating a DeviceInfo entity.
type DeviceInfoCreate struct {
	config
	mutation *DeviceInfoMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (dic *DeviceInfoCreate) SetType(s string) *DeviceInfoCreate {
	dic.mutation.SetType(s)
	return dic
}

// SetManufacturer sets the "manufacturer" field.
func (dic *DeviceInfoCreate) SetManufacturer(s string) *DeviceInfoCreate {
	dic.mutation.SetManufacturer(s)
	return dic
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableManufacturer(s *string) *DeviceInfoCreate {
	if s != nil {
		dic.SetManufacturer(*s)
	}
	return dic
}

// SetPowerComsuption sets the "power_comsuption" field.
func (dic *DeviceInfoCreate) SetPowerComsuption(i int32) *DeviceInfoCreate {
	dic.mutation.SetPowerComsuption(i)
	return dic
}

// SetShipmentAt sets the "shipment_at" field.
func (dic *DeviceInfoCreate) SetShipmentAt(i int32) *DeviceInfoCreate {
	dic.mutation.SetShipmentAt(i)
	return dic
}

// SetCreateAt sets the "create_at" field.
func (dic *DeviceInfoCreate) SetCreateAt(i int64) *DeviceInfoCreate {
	dic.mutation.SetCreateAt(i)
	return dic
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableCreateAt(i *int64) *DeviceInfoCreate {
	if i != nil {
		dic.SetCreateAt(*i)
	}
	return dic
}

// SetUpdateAt sets the "update_at" field.
func (dic *DeviceInfoCreate) SetUpdateAt(i int64) *DeviceInfoCreate {
	dic.mutation.SetUpdateAt(i)
	return dic
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableUpdateAt(i *int64) *DeviceInfoCreate {
	if i != nil {
		dic.SetUpdateAt(*i)
	}
	return dic
}

// SetDeleteAt sets the "delete_at" field.
func (dic *DeviceInfoCreate) SetDeleteAt(i int64) *DeviceInfoCreate {
	dic.mutation.SetDeleteAt(i)
	return dic
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (dic *DeviceInfoCreate) SetNillableDeleteAt(i *int64) *DeviceInfoCreate {
	if i != nil {
		dic.SetDeleteAt(*i)
	}
	return dic
}

// SetID sets the "id" field.
func (dic *DeviceInfoCreate) SetID(u uuid.UUID) *DeviceInfoCreate {
	dic.mutation.SetID(u)
	return dic
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (dic *DeviceInfoCreate) Mutation() *DeviceInfoMutation {
	return dic.mutation
}

// Save creates the DeviceInfo in the database.
func (dic *DeviceInfoCreate) Save(ctx context.Context) (*DeviceInfo, error) {
	var (
		err  error
		node *DeviceInfo
	)
	dic.defaults()
	if len(dic.hooks) == 0 {
		if err = dic.check(); err != nil {
			return nil, err
		}
		node, err = dic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dic.check(); err != nil {
				return nil, err
			}
			dic.mutation = mutation
			if node, err = dic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dic.hooks) - 1; i >= 0; i-- {
			if dic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DeviceInfoCreate) SaveX(ctx context.Context) *DeviceInfo {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DeviceInfoCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DeviceInfoCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DeviceInfoCreate) defaults() {
	if _, ok := dic.mutation.Manufacturer(); !ok {
		v := deviceinfo.DefaultManufacturer
		dic.mutation.SetManufacturer(v)
	}
	if _, ok := dic.mutation.CreateAt(); !ok {
		v := deviceinfo.DefaultCreateAt()
		dic.mutation.SetCreateAt(v)
	}
	if _, ok := dic.mutation.UpdateAt(); !ok {
		v := deviceinfo.DefaultUpdateAt()
		dic.mutation.SetUpdateAt(v)
	}
	if _, ok := dic.mutation.DeleteAt(); !ok {
		v := deviceinfo.DefaultDeleteAt()
		dic.mutation.SetDeleteAt(v)
	}
	if _, ok := dic.mutation.ID(); !ok {
		v := deviceinfo.DefaultID()
		dic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DeviceInfoCreate) check() error {
	if _, ok := dic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if v, ok := dic.mutation.GetType(); ok {
		if err := deviceinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "type": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Manufacturer(); !ok {
		return &ValidationError{Name: "manufacturer", err: errors.New(`ent: missing required field "manufacturer"`)}
	}
	if v, ok := dic.mutation.Manufacturer(); ok {
		if err := deviceinfo.ManufacturerValidator(v); err != nil {
			return &ValidationError{Name: "manufacturer", err: fmt.Errorf(`ent: validator failed for field "manufacturer": %w`, err)}
		}
	}
	if _, ok := dic.mutation.PowerComsuption(); !ok {
		return &ValidationError{Name: "power_comsuption", err: errors.New(`ent: missing required field "power_comsuption"`)}
	}
	if _, ok := dic.mutation.ShipmentAt(); !ok {
		return &ValidationError{Name: "shipment_at", err: errors.New(`ent: missing required field "shipment_at"`)}
	}
	if _, ok := dic.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := dic.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := dic.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (dic *DeviceInfoCreate) sqlSave(ctx context.Context) (*DeviceInfo, error) {
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (dic *DeviceInfoCreate) createSpec() (*DeviceInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &DeviceInfo{config: dic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deviceinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deviceinfo.FieldID,
			},
		}
	)
	if id, ok := dic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dic.mutation.Manufacturer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldManufacturer,
		})
		_node.Manufacturer = value
	}
	if value, ok := dic.mutation.PowerComsuption(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldPowerComsuption,
		})
		_node.PowerComsuption = value
	}
	if value, ok := dic.mutation.ShipmentAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldShipmentAt,
		})
		_node.ShipmentAt = value
	}
	if value, ok := dic.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := dic.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := dic.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// DeviceInfoCreateBulk is the builder for creating many DeviceInfo entities in bulk.
type DeviceInfoCreateBulk struct {
	config
	builders []*DeviceInfoCreate
}

// Save creates the DeviceInfo entities in the database.
func (dicb *DeviceInfoCreateBulk) Save(ctx context.Context) ([]*DeviceInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DeviceInfo, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DeviceInfoCreateBulk) SaveX(ctx context.Context) []*DeviceInfo {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DeviceInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DeviceInfoCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
