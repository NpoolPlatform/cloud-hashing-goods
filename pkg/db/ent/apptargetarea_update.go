// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/apptargetarea"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppTargetAreaUpdate is the builder for updating AppTargetArea entities.
type AppTargetAreaUpdate struct {
	config
	hooks    []Hook
	mutation *AppTargetAreaMutation
}

// Where appends a list predicates to the AppTargetAreaUpdate builder.
func (atau *AppTargetAreaUpdate) Where(ps ...predicate.AppTargetArea) *AppTargetAreaUpdate {
	atau.mutation.Where(ps...)
	return atau
}

// SetTargetAreaID sets the "target_area_id" field.
func (atau *AppTargetAreaUpdate) SetTargetAreaID(u uuid.UUID) *AppTargetAreaUpdate {
	atau.mutation.SetTargetAreaID(u)
	return atau
}

// SetAppID sets the "app_id" field.
func (atau *AppTargetAreaUpdate) SetAppID(u uuid.UUID) *AppTargetAreaUpdate {
	atau.mutation.SetAppID(u)
	return atau
}

// SetCreateAt sets the "create_at" field.
func (atau *AppTargetAreaUpdate) SetCreateAt(i int64) *AppTargetAreaUpdate {
	atau.mutation.ResetCreateAt()
	atau.mutation.SetCreateAt(i)
	return atau
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (atau *AppTargetAreaUpdate) SetNillableCreateAt(i *int64) *AppTargetAreaUpdate {
	if i != nil {
		atau.SetCreateAt(*i)
	}
	return atau
}

// AddCreateAt adds i to the "create_at" field.
func (atau *AppTargetAreaUpdate) AddCreateAt(i int64) *AppTargetAreaUpdate {
	atau.mutation.AddCreateAt(i)
	return atau
}

// SetUpdateAt sets the "update_at" field.
func (atau *AppTargetAreaUpdate) SetUpdateAt(i int64) *AppTargetAreaUpdate {
	atau.mutation.ResetUpdateAt()
	atau.mutation.SetUpdateAt(i)
	return atau
}

// AddUpdateAt adds i to the "update_at" field.
func (atau *AppTargetAreaUpdate) AddUpdateAt(i int64) *AppTargetAreaUpdate {
	atau.mutation.AddUpdateAt(i)
	return atau
}

// SetDeleteAt sets the "delete_at" field.
func (atau *AppTargetAreaUpdate) SetDeleteAt(i int64) *AppTargetAreaUpdate {
	atau.mutation.ResetDeleteAt()
	atau.mutation.SetDeleteAt(i)
	return atau
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (atau *AppTargetAreaUpdate) SetNillableDeleteAt(i *int64) *AppTargetAreaUpdate {
	if i != nil {
		atau.SetDeleteAt(*i)
	}
	return atau
}

// AddDeleteAt adds i to the "delete_at" field.
func (atau *AppTargetAreaUpdate) AddDeleteAt(i int64) *AppTargetAreaUpdate {
	atau.mutation.AddDeleteAt(i)
	return atau
}

// Mutation returns the AppTargetAreaMutation object of the builder.
func (atau *AppTargetAreaUpdate) Mutation() *AppTargetAreaMutation {
	return atau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atau *AppTargetAreaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	atau.defaults()
	if len(atau.hooks) == 0 {
		affected, err = atau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppTargetAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atau.mutation = mutation
			affected, err = atau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(atau.hooks) - 1; i >= 0; i-- {
			if atau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (atau *AppTargetAreaUpdate) SaveX(ctx context.Context) int {
	affected, err := atau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atau *AppTargetAreaUpdate) Exec(ctx context.Context) error {
	_, err := atau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atau *AppTargetAreaUpdate) ExecX(ctx context.Context) {
	if err := atau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atau *AppTargetAreaUpdate) defaults() {
	if _, ok := atau.mutation.UpdateAt(); !ok {
		v := apptargetarea.UpdateDefaultUpdateAt()
		atau.mutation.SetUpdateAt(v)
	}
}

func (atau *AppTargetAreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apptargetarea.Table,
			Columns: apptargetarea.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apptargetarea.FieldID,
			},
		},
	}
	if ps := atau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atau.mutation.TargetAreaID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apptargetarea.FieldTargetAreaID,
		})
	}
	if value, ok := atau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apptargetarea.FieldAppID,
		})
	}
	if value, ok := atau.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldCreateAt,
		})
	}
	if value, ok := atau.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldCreateAt,
		})
	}
	if value, ok := atau.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldUpdateAt,
		})
	}
	if value, ok := atau.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldUpdateAt,
		})
	}
	if value, ok := atau.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldDeleteAt,
		})
	}
	if value, ok := atau.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apptargetarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppTargetAreaUpdateOne is the builder for updating a single AppTargetArea entity.
type AppTargetAreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppTargetAreaMutation
}

// SetTargetAreaID sets the "target_area_id" field.
func (atauo *AppTargetAreaUpdateOne) SetTargetAreaID(u uuid.UUID) *AppTargetAreaUpdateOne {
	atauo.mutation.SetTargetAreaID(u)
	return atauo
}

// SetAppID sets the "app_id" field.
func (atauo *AppTargetAreaUpdateOne) SetAppID(u uuid.UUID) *AppTargetAreaUpdateOne {
	atauo.mutation.SetAppID(u)
	return atauo
}

// SetCreateAt sets the "create_at" field.
func (atauo *AppTargetAreaUpdateOne) SetCreateAt(i int64) *AppTargetAreaUpdateOne {
	atauo.mutation.ResetCreateAt()
	atauo.mutation.SetCreateAt(i)
	return atauo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (atauo *AppTargetAreaUpdateOne) SetNillableCreateAt(i *int64) *AppTargetAreaUpdateOne {
	if i != nil {
		atauo.SetCreateAt(*i)
	}
	return atauo
}

// AddCreateAt adds i to the "create_at" field.
func (atauo *AppTargetAreaUpdateOne) AddCreateAt(i int64) *AppTargetAreaUpdateOne {
	atauo.mutation.AddCreateAt(i)
	return atauo
}

// SetUpdateAt sets the "update_at" field.
func (atauo *AppTargetAreaUpdateOne) SetUpdateAt(i int64) *AppTargetAreaUpdateOne {
	atauo.mutation.ResetUpdateAt()
	atauo.mutation.SetUpdateAt(i)
	return atauo
}

// AddUpdateAt adds i to the "update_at" field.
func (atauo *AppTargetAreaUpdateOne) AddUpdateAt(i int64) *AppTargetAreaUpdateOne {
	atauo.mutation.AddUpdateAt(i)
	return atauo
}

// SetDeleteAt sets the "delete_at" field.
func (atauo *AppTargetAreaUpdateOne) SetDeleteAt(i int64) *AppTargetAreaUpdateOne {
	atauo.mutation.ResetDeleteAt()
	atauo.mutation.SetDeleteAt(i)
	return atauo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (atauo *AppTargetAreaUpdateOne) SetNillableDeleteAt(i *int64) *AppTargetAreaUpdateOne {
	if i != nil {
		atauo.SetDeleteAt(*i)
	}
	return atauo
}

// AddDeleteAt adds i to the "delete_at" field.
func (atauo *AppTargetAreaUpdateOne) AddDeleteAt(i int64) *AppTargetAreaUpdateOne {
	atauo.mutation.AddDeleteAt(i)
	return atauo
}

// Mutation returns the AppTargetAreaMutation object of the builder.
func (atauo *AppTargetAreaUpdateOne) Mutation() *AppTargetAreaMutation {
	return atauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atauo *AppTargetAreaUpdateOne) Select(field string, fields ...string) *AppTargetAreaUpdateOne {
	atauo.fields = append([]string{field}, fields...)
	return atauo
}

// Save executes the query and returns the updated AppTargetArea entity.
func (atauo *AppTargetAreaUpdateOne) Save(ctx context.Context) (*AppTargetArea, error) {
	var (
		err  error
		node *AppTargetArea
	)
	atauo.defaults()
	if len(atauo.hooks) == 0 {
		node, err = atauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppTargetAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			atauo.mutation = mutation
			node, err = atauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(atauo.hooks) - 1; i >= 0; i-- {
			if atauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (atauo *AppTargetAreaUpdateOne) SaveX(ctx context.Context) *AppTargetArea {
	node, err := atauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atauo *AppTargetAreaUpdateOne) Exec(ctx context.Context) error {
	_, err := atauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atauo *AppTargetAreaUpdateOne) ExecX(ctx context.Context) {
	if err := atauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atauo *AppTargetAreaUpdateOne) defaults() {
	if _, ok := atauo.mutation.UpdateAt(); !ok {
		v := apptargetarea.UpdateDefaultUpdateAt()
		atauo.mutation.SetUpdateAt(v)
	}
}

func (atauo *AppTargetAreaUpdateOne) sqlSave(ctx context.Context) (_node *AppTargetArea, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   apptargetarea.Table,
			Columns: apptargetarea.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apptargetarea.FieldID,
			},
		},
	}
	id, ok := atauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppTargetArea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apptargetarea.FieldID)
		for _, f := range fields {
			if !apptargetarea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apptargetarea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atauo.mutation.TargetAreaID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apptargetarea.FieldTargetAreaID,
		})
	}
	if value, ok := atauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apptargetarea.FieldAppID,
		})
	}
	if value, ok := atauo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldCreateAt,
		})
	}
	if value, ok := atauo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldCreateAt,
		})
	}
	if value, ok := atauo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldUpdateAt,
		})
	}
	if value, ok := atauo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldUpdateAt,
		})
	}
	if value, ok := atauo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldDeleteAt,
		})
	}
	if value, ok := atauo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldDeleteAt,
		})
	}
	_node = &AppTargetArea{config: atauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apptargetarea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
