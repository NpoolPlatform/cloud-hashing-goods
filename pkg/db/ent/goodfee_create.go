// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodfee"
	"github.com/google/uuid"
)

// GoodFeeCreate is the builder for creating a GoodFee entity.
type GoodFeeCreate struct {
	config
	mutation *GoodFeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGoodID sets the "good_id" field.
func (gfc *GoodFeeCreate) SetGoodID(u uuid.UUID) *GoodFeeCreate {
	gfc.mutation.SetGoodID(u)
	return gfc
}

// SetFeeType sets the "fee_type" field.
func (gfc *GoodFeeCreate) SetFeeType(s string) *GoodFeeCreate {
	gfc.mutation.SetFeeType(s)
	return gfc
}

// SetPayType sets the "pay_type" field.
func (gfc *GoodFeeCreate) SetPayType(gt goodfee.PayType) *GoodFeeCreate {
	gfc.mutation.SetPayType(gt)
	return gfc
}

// SetPercentValue sets the "percent_value" field.
func (gfc *GoodFeeCreate) SetPercentValue(i int32) *GoodFeeCreate {
	gfc.mutation.SetPercentValue(i)
	return gfc
}

// SetAmountValue sets the "amount_value" field.
func (gfc *GoodFeeCreate) SetAmountValue(i int32) *GoodFeeCreate {
	gfc.mutation.SetAmountValue(i)
	return gfc
}

// SetAmountUnit sets the "amount_unit" field.
func (gfc *GoodFeeCreate) SetAmountUnit(s string) *GoodFeeCreate {
	gfc.mutation.SetAmountUnit(s)
	return gfc
}

// SetCreateAt sets the "create_at" field.
func (gfc *GoodFeeCreate) SetCreateAt(u uint32) *GoodFeeCreate {
	gfc.mutation.SetCreateAt(u)
	return gfc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gfc *GoodFeeCreate) SetNillableCreateAt(u *uint32) *GoodFeeCreate {
	if u != nil {
		gfc.SetCreateAt(*u)
	}
	return gfc
}

// SetUpdateAt sets the "update_at" field.
func (gfc *GoodFeeCreate) SetUpdateAt(u uint32) *GoodFeeCreate {
	gfc.mutation.SetUpdateAt(u)
	return gfc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (gfc *GoodFeeCreate) SetNillableUpdateAt(u *uint32) *GoodFeeCreate {
	if u != nil {
		gfc.SetUpdateAt(*u)
	}
	return gfc
}

// SetDeleteAt sets the "delete_at" field.
func (gfc *GoodFeeCreate) SetDeleteAt(u uint32) *GoodFeeCreate {
	gfc.mutation.SetDeleteAt(u)
	return gfc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gfc *GoodFeeCreate) SetNillableDeleteAt(u *uint32) *GoodFeeCreate {
	if u != nil {
		gfc.SetDeleteAt(*u)
	}
	return gfc
}

// SetID sets the "id" field.
func (gfc *GoodFeeCreate) SetID(u uuid.UUID) *GoodFeeCreate {
	gfc.mutation.SetID(u)
	return gfc
}

// Mutation returns the GoodFeeMutation object of the builder.
func (gfc *GoodFeeCreate) Mutation() *GoodFeeMutation {
	return gfc.mutation
}

// Save creates the GoodFee in the database.
func (gfc *GoodFeeCreate) Save(ctx context.Context) (*GoodFee, error) {
	var (
		err  error
		node *GoodFee
	)
	gfc.defaults()
	if len(gfc.hooks) == 0 {
		if err = gfc.check(); err != nil {
			return nil, err
		}
		node, err = gfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodFeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gfc.check(); err != nil {
				return nil, err
			}
			gfc.mutation = mutation
			if node, err = gfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gfc.hooks) - 1; i >= 0; i-- {
			if gfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gfc *GoodFeeCreate) SaveX(ctx context.Context) *GoodFee {
	v, err := gfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gfc *GoodFeeCreate) Exec(ctx context.Context) error {
	_, err := gfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfc *GoodFeeCreate) ExecX(ctx context.Context) {
	if err := gfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gfc *GoodFeeCreate) defaults() {
	if _, ok := gfc.mutation.CreateAt(); !ok {
		v := goodfee.DefaultCreateAt()
		gfc.mutation.SetCreateAt(v)
	}
	if _, ok := gfc.mutation.UpdateAt(); !ok {
		v := goodfee.DefaultUpdateAt()
		gfc.mutation.SetUpdateAt(v)
	}
	if _, ok := gfc.mutation.DeleteAt(); !ok {
		v := goodfee.DefaultDeleteAt()
		gfc.mutation.SetDeleteAt(v)
	}
	if _, ok := gfc.mutation.ID(); !ok {
		v := goodfee.DefaultID()
		gfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfc *GoodFeeCreate) check() error {
	if _, ok := gfc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "good_id"`)}
	}
	if _, ok := gfc.mutation.FeeType(); !ok {
		return &ValidationError{Name: "fee_type", err: errors.New(`ent: missing required field "fee_type"`)}
	}
	if _, ok := gfc.mutation.PayType(); !ok {
		return &ValidationError{Name: "pay_type", err: errors.New(`ent: missing required field "pay_type"`)}
	}
	if v, ok := gfc.mutation.PayType(); ok {
		if err := goodfee.PayTypeValidator(v); err != nil {
			return &ValidationError{Name: "pay_type", err: fmt.Errorf(`ent: validator failed for field "pay_type": %w`, err)}
		}
	}
	if _, ok := gfc.mutation.PercentValue(); !ok {
		return &ValidationError{Name: "percent_value", err: errors.New(`ent: missing required field "percent_value"`)}
	}
	if _, ok := gfc.mutation.AmountValue(); !ok {
		return &ValidationError{Name: "amount_value", err: errors.New(`ent: missing required field "amount_value"`)}
	}
	if _, ok := gfc.mutation.AmountUnit(); !ok {
		return &ValidationError{Name: "amount_unit", err: errors.New(`ent: missing required field "amount_unit"`)}
	}
	if _, ok := gfc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := gfc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := gfc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (gfc *GoodFeeCreate) sqlSave(ctx context.Context) (*GoodFee, error) {
	_node, _spec := gfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (gfc *GoodFeeCreate) createSpec() (*GoodFee, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodFee{config: gfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodfee.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodfee.FieldID,
			},
		}
	)
	_spec.OnConflict = gfc.conflict
	if id, ok := gfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gfc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodfee.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := gfc.mutation.FeeType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodfee.FieldFeeType,
		})
		_node.FeeType = value
	}
	if value, ok := gfc.mutation.PayType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodfee.FieldPayType,
		})
		_node.PayType = value
	}
	if value, ok := gfc.mutation.PercentValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodfee.FieldPercentValue,
		})
		_node.PercentValue = value
	}
	if value, ok := gfc.mutation.AmountValue(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodfee.FieldAmountValue,
		})
		_node.AmountValue = value
	}
	if value, ok := gfc.mutation.AmountUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodfee.FieldAmountUnit,
		})
		_node.AmountUnit = value
	}
	if value, ok := gfc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := gfc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := gfc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: goodfee.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodFee.Create().
//		SetGoodID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodFeeUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gfc *GoodFeeCreate) OnConflict(opts ...sql.ConflictOption) *GoodFeeUpsertOne {
	gfc.conflict = opts
	return &GoodFeeUpsertOne{
		create: gfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodFee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gfc *GoodFeeCreate) OnConflictColumns(columns ...string) *GoodFeeUpsertOne {
	gfc.conflict = append(gfc.conflict, sql.ConflictColumns(columns...))
	return &GoodFeeUpsertOne{
		create: gfc,
	}
}

type (
	// GoodFeeUpsertOne is the builder for "upsert"-ing
	//  one GoodFee node.
	GoodFeeUpsertOne struct {
		create *GoodFeeCreate
	}

	// GoodFeeUpsert is the "OnConflict" setter.
	GoodFeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetGoodID sets the "good_id" field.
func (u *GoodFeeUpsert) SetGoodID(v uuid.UUID) *GoodFeeUpsert {
	u.Set(goodfee.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateGoodID() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldGoodID)
	return u
}

// SetFeeType sets the "fee_type" field.
func (u *GoodFeeUpsert) SetFeeType(v string) *GoodFeeUpsert {
	u.Set(goodfee.FieldFeeType, v)
	return u
}

// UpdateFeeType sets the "fee_type" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateFeeType() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldFeeType)
	return u
}

// SetPayType sets the "pay_type" field.
func (u *GoodFeeUpsert) SetPayType(v goodfee.PayType) *GoodFeeUpsert {
	u.Set(goodfee.FieldPayType, v)
	return u
}

// UpdatePayType sets the "pay_type" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdatePayType() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldPayType)
	return u
}

// SetPercentValue sets the "percent_value" field.
func (u *GoodFeeUpsert) SetPercentValue(v int32) *GoodFeeUpsert {
	u.Set(goodfee.FieldPercentValue, v)
	return u
}

// UpdatePercentValue sets the "percent_value" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdatePercentValue() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldPercentValue)
	return u
}

// SetAmountValue sets the "amount_value" field.
func (u *GoodFeeUpsert) SetAmountValue(v int32) *GoodFeeUpsert {
	u.Set(goodfee.FieldAmountValue, v)
	return u
}

// UpdateAmountValue sets the "amount_value" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateAmountValue() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldAmountValue)
	return u
}

// SetAmountUnit sets the "amount_unit" field.
func (u *GoodFeeUpsert) SetAmountUnit(v string) *GoodFeeUpsert {
	u.Set(goodfee.FieldAmountUnit, v)
	return u
}

// UpdateAmountUnit sets the "amount_unit" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateAmountUnit() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldAmountUnit)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *GoodFeeUpsert) SetCreateAt(v uint32) *GoodFeeUpsert {
	u.Set(goodfee.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateCreateAt() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodFeeUpsert) SetUpdateAt(v uint32) *GoodFeeUpsert {
	u.Set(goodfee.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateUpdateAt() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodFeeUpsert) SetDeleteAt(v uint32) *GoodFeeUpsert {
	u.Set(goodfee.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodFeeUpsert) UpdateDeleteAt() *GoodFeeUpsert {
	u.SetExcluded(goodfee.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GoodFee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodfee.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodFeeUpsertOne) UpdateNewValues() *GoodFeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(goodfee.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GoodFee.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GoodFeeUpsertOne) Ignore() *GoodFeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodFeeUpsertOne) DoNothing() *GoodFeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodFeeCreate.OnConflict
// documentation for more info.
func (u *GoodFeeUpsertOne) Update(set func(*GoodFeeUpsert)) *GoodFeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodFeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodFeeUpsertOne) SetGoodID(v uuid.UUID) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateGoodID() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateGoodID()
	})
}

// SetFeeType sets the "fee_type" field.
func (u *GoodFeeUpsertOne) SetFeeType(v string) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetFeeType(v)
	})
}

// UpdateFeeType sets the "fee_type" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateFeeType() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateFeeType()
	})
}

// SetPayType sets the "pay_type" field.
func (u *GoodFeeUpsertOne) SetPayType(v goodfee.PayType) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetPayType(v)
	})
}

// UpdatePayType sets the "pay_type" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdatePayType() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdatePayType()
	})
}

// SetPercentValue sets the "percent_value" field.
func (u *GoodFeeUpsertOne) SetPercentValue(v int32) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetPercentValue(v)
	})
}

// UpdatePercentValue sets the "percent_value" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdatePercentValue() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdatePercentValue()
	})
}

// SetAmountValue sets the "amount_value" field.
func (u *GoodFeeUpsertOne) SetAmountValue(v int32) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetAmountValue(v)
	})
}

// UpdateAmountValue sets the "amount_value" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateAmountValue() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateAmountValue()
	})
}

// SetAmountUnit sets the "amount_unit" field.
func (u *GoodFeeUpsertOne) SetAmountUnit(v string) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetAmountUnit(v)
	})
}

// UpdateAmountUnit sets the "amount_unit" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateAmountUnit() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateAmountUnit()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodFeeUpsertOne) SetCreateAt(v uint32) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateCreateAt() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodFeeUpsertOne) SetUpdateAt(v uint32) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateUpdateAt() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodFeeUpsertOne) SetDeleteAt(v uint32) *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodFeeUpsertOne) UpdateDeleteAt() *GoodFeeUpsertOne {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodFeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodFeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodFeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodFeeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GoodFeeUpsertOne.ID is not supported by MySQL driver. Use GoodFeeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodFeeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodFeeCreateBulk is the builder for creating many GoodFee entities in bulk.
type GoodFeeCreateBulk struct {
	config
	builders []*GoodFeeCreate
	conflict []sql.ConflictOption
}

// Save creates the GoodFee entities in the database.
func (gfcb *GoodFeeCreateBulk) Save(ctx context.Context) ([]*GoodFee, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gfcb.builders))
	nodes := make([]*GoodFee, len(gfcb.builders))
	mutators := make([]Mutator, len(gfcb.builders))
	for i := range gfcb.builders {
		func(i int, root context.Context) {
			builder := gfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodFeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gfcb *GoodFeeCreateBulk) SaveX(ctx context.Context) []*GoodFee {
	v, err := gfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gfcb *GoodFeeCreateBulk) Exec(ctx context.Context) error {
	_, err := gfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfcb *GoodFeeCreateBulk) ExecX(ctx context.Context) {
	if err := gfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GoodFee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodFeeUpsert) {
//			SetGoodID(v+v).
//		}).
//		Exec(ctx)
//
func (gfcb *GoodFeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodFeeUpsertBulk {
	gfcb.conflict = opts
	return &GoodFeeUpsertBulk{
		create: gfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GoodFee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gfcb *GoodFeeCreateBulk) OnConflictColumns(columns ...string) *GoodFeeUpsertBulk {
	gfcb.conflict = append(gfcb.conflict, sql.ConflictColumns(columns...))
	return &GoodFeeUpsertBulk{
		create: gfcb,
	}
}

// GoodFeeUpsertBulk is the builder for "upsert"-ing
// a bulk of GoodFee nodes.
type GoodFeeUpsertBulk struct {
	create *GoodFeeCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GoodFee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(goodfee.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *GoodFeeUpsertBulk) UpdateNewValues() *GoodFeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(goodfee.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GoodFee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GoodFeeUpsertBulk) Ignore() *GoodFeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodFeeUpsertBulk) DoNothing() *GoodFeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodFeeCreateBulk.OnConflict
// documentation for more info.
func (u *GoodFeeUpsertBulk) Update(set func(*GoodFeeUpsert)) *GoodFeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodFeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetGoodID sets the "good_id" field.
func (u *GoodFeeUpsertBulk) SetGoodID(v uuid.UUID) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateGoodID() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateGoodID()
	})
}

// SetFeeType sets the "fee_type" field.
func (u *GoodFeeUpsertBulk) SetFeeType(v string) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetFeeType(v)
	})
}

// UpdateFeeType sets the "fee_type" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateFeeType() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateFeeType()
	})
}

// SetPayType sets the "pay_type" field.
func (u *GoodFeeUpsertBulk) SetPayType(v goodfee.PayType) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetPayType(v)
	})
}

// UpdatePayType sets the "pay_type" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdatePayType() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdatePayType()
	})
}

// SetPercentValue sets the "percent_value" field.
func (u *GoodFeeUpsertBulk) SetPercentValue(v int32) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetPercentValue(v)
	})
}

// UpdatePercentValue sets the "percent_value" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdatePercentValue() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdatePercentValue()
	})
}

// SetAmountValue sets the "amount_value" field.
func (u *GoodFeeUpsertBulk) SetAmountValue(v int32) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetAmountValue(v)
	})
}

// UpdateAmountValue sets the "amount_value" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateAmountValue() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateAmountValue()
	})
}

// SetAmountUnit sets the "amount_unit" field.
func (u *GoodFeeUpsertBulk) SetAmountUnit(v string) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetAmountUnit(v)
	})
}

// UpdateAmountUnit sets the "amount_unit" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateAmountUnit() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateAmountUnit()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *GoodFeeUpsertBulk) SetCreateAt(v uint32) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateCreateAt() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GoodFeeUpsertBulk) SetUpdateAt(v uint32) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateUpdateAt() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *GoodFeeUpsertBulk) SetDeleteAt(v uint32) *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *GoodFeeUpsertBulk) UpdateDeleteAt() *GoodFeeUpsertBulk {
	return u.Update(func(s *GoodFeeUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *GoodFeeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodFeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodFeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodFeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
