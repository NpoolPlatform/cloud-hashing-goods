// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodreview"
	"github.com/google/uuid"
)

// GoodReview is the model entity for the GoodReview schema.
type GoodReview struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type goodreview.Type `json:"type,omitempty"`
	// ReviewedID holds the value of the "reviewed_id" field.
	ReviewedID uuid.UUID `json:"reviewed_id,omitempty"`
	// ReviewerID holds the value of the "reviewer_id" field.
	ReviewerID uuid.UUID `json:"reviewer_id,omitempty"`
	// State holds the value of the "state" field.
	State goodreview.State `json:"state,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodReview) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodreview.FieldCreateAt, goodreview.FieldUpdateAt, goodreview.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case goodreview.FieldType, goodreview.FieldState, goodreview.FieldMessage:
			values[i] = new(sql.NullString)
		case goodreview.FieldID, goodreview.FieldReviewedID, goodreview.FieldReviewerID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodReview", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodReview fields.
func (gr *GoodReview) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodreview.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gr.ID = *value
			}
		case goodreview.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gr.Type = goodreview.Type(value.String)
			}
		case goodreview.FieldReviewedID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed_id", values[i])
			} else if value != nil {
				gr.ReviewedID = *value
			}
		case goodreview.FieldReviewerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field reviewer_id", values[i])
			} else if value != nil {
				gr.ReviewerID = *value
			}
		case goodreview.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				gr.State = goodreview.State(value.String)
			}
		case goodreview.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				gr.Message = value.String
			}
		case goodreview.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gr.CreateAt = value.Int64
			}
		case goodreview.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gr.UpdateAt = value.Int64
			}
		case goodreview.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gr.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodReview.
// Note that you need to call GoodReview.Unwrap() before calling this method if this GoodReview
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GoodReview) Update() *GoodReviewUpdateOne {
	return (&GoodReviewClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the GoodReview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GoodReview) Unwrap() *GoodReview {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodReview is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GoodReview) String() string {
	var builder strings.Builder
	builder.WriteString("GoodReview(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", gr.Type))
	builder.WriteString(", reviewed_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.ReviewedID))
	builder.WriteString(", reviewer_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.ReviewerID))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", gr.State))
	builder.WriteString(", message=")
	builder.WriteString(gr.Message)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodReviews is a parsable slice of GoodReview.
type GoodReviews []*GoodReview

func (gr GoodReviews) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
