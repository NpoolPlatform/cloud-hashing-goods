// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodrecommand"
	"github.com/google/uuid"
)

// GoodRecommand is the model entity for the GoodRecommand schema.
type GoodRecommand struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodRecommand) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodrecommand.FieldCreateAt, goodrecommand.FieldUpdateAt, goodrecommand.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case goodrecommand.FieldContent:
			values[i] = new(sql.NullString)
		case goodrecommand.FieldID, goodrecommand.FieldAppID, goodrecommand.FieldUserID, goodrecommand.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodRecommand", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodRecommand fields.
func (gr *GoodRecommand) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodrecommand.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gr.ID = *value
			}
		case goodrecommand.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				gr.AppID = *value
			}
		case goodrecommand.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				gr.UserID = *value
			}
		case goodrecommand.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gr.GoodID = *value
			}
		case goodrecommand.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				gr.Content = value.String
			}
		case goodrecommand.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gr.CreateAt = value.Int64
			}
		case goodrecommand.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gr.UpdateAt = value.Int64
			}
		case goodrecommand.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gr.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodRecommand.
// Note that you need to call GoodRecommand.Unwrap() before calling this method if this GoodRecommand
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GoodRecommand) Update() *GoodRecommandUpdateOne {
	return (&GoodRecommandClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the GoodRecommand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GoodRecommand) Unwrap() *GoodRecommand {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodRecommand is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GoodRecommand) String() string {
	var builder strings.Builder
	builder.WriteString("GoodRecommand(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.UserID))
	builder.WriteString(", good_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.GoodID))
	builder.WriteString(", content=")
	builder.WriteString(gr.Content)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gr.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodRecommands is a parsable slice of GoodRecommand.
type GoodRecommands []*GoodRecommand

func (gr GoodRecommands) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
