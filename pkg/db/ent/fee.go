// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/fee"
	"github.com/google/uuid"
)

// Fee is the model entity for the Fee schema.
type Fee struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// FeeTypeID holds the value of the "fee_type_id" field.
	FeeTypeID uuid.UUID `json:"fee_type_id,omitempty"`
	// Value holds the value of the "value" field.
	Value uint64 `json:"value,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fee) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fee.FieldValue, fee.FieldCreateAt, fee.FieldUpdateAt, fee.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case fee.FieldID, fee.FieldAppID, fee.FieldFeeTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Fee", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fee fields.
func (f *Fee) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fee.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case fee.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				f.AppID = *value
			}
		case fee.FieldFeeTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fee_type_id", values[i])
			} else if value != nil {
				f.FeeTypeID = *value
			}
		case fee.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				f.Value = uint64(value.Int64)
			}
		case fee.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				f.CreateAt = uint32(value.Int64)
			}
		case fee.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				f.UpdateAt = uint32(value.Int64)
			}
		case fee.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				f.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Fee.
// Note that you need to call Fee.Unwrap() before calling this method if this Fee
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fee) Update() *FeeUpdateOne {
	return (&FeeClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Fee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fee) Unwrap() *Fee {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fee is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fee) String() string {
	var builder strings.Builder
	builder.WriteString("Fee(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", f.AppID))
	builder.WriteString(", fee_type_id=")
	builder.WriteString(fmt.Sprintf("%v", f.FeeTypeID))
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", f.Value))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", f.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", f.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", f.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// Fees is a parsable slice of Fee.
type Fees []*Fee

func (f Fees) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
