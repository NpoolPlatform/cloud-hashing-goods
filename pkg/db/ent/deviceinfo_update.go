// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
)

// DeviceInfoUpdate is the builder for updating DeviceInfo entities.
type DeviceInfoUpdate struct {
	config
	hooks    []Hook
	mutation *DeviceInfoMutation
}

// Where appends a list predicates to the DeviceInfoUpdate builder.
func (diu *DeviceInfoUpdate) Where(ps ...predicate.DeviceInfo) *DeviceInfoUpdate {
	diu.mutation.Where(ps...)
	return diu
}

// SetType sets the "type" field.
func (diu *DeviceInfoUpdate) SetType(s string) *DeviceInfoUpdate {
	diu.mutation.SetType(s)
	return diu
}

// SetManufacturer sets the "manufacturer" field.
func (diu *DeviceInfoUpdate) SetManufacturer(s string) *DeviceInfoUpdate {
	diu.mutation.SetManufacturer(s)
	return diu
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableManufacturer(s *string) *DeviceInfoUpdate {
	if s != nil {
		diu.SetManufacturer(*s)
	}
	return diu
}

// SetPowerComsuption sets the "power_comsuption" field.
func (diu *DeviceInfoUpdate) SetPowerComsuption(i int32) *DeviceInfoUpdate {
	diu.mutation.ResetPowerComsuption()
	diu.mutation.SetPowerComsuption(i)
	return diu
}

// AddPowerComsuption adds i to the "power_comsuption" field.
func (diu *DeviceInfoUpdate) AddPowerComsuption(i int32) *DeviceInfoUpdate {
	diu.mutation.AddPowerComsuption(i)
	return diu
}

// SetShipmentAt sets the "shipment_at" field.
func (diu *DeviceInfoUpdate) SetShipmentAt(i int32) *DeviceInfoUpdate {
	diu.mutation.ResetShipmentAt()
	diu.mutation.SetShipmentAt(i)
	return diu
}

// AddShipmentAt adds i to the "shipment_at" field.
func (diu *DeviceInfoUpdate) AddShipmentAt(i int32) *DeviceInfoUpdate {
	diu.mutation.AddShipmentAt(i)
	return diu
}

// SetCreateAt sets the "create_at" field.
func (diu *DeviceInfoUpdate) SetCreateAt(i int64) *DeviceInfoUpdate {
	diu.mutation.ResetCreateAt()
	diu.mutation.SetCreateAt(i)
	return diu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableCreateAt(i *int64) *DeviceInfoUpdate {
	if i != nil {
		diu.SetCreateAt(*i)
	}
	return diu
}

// AddCreateAt adds i to the "create_at" field.
func (diu *DeviceInfoUpdate) AddCreateAt(i int64) *DeviceInfoUpdate {
	diu.mutation.AddCreateAt(i)
	return diu
}

// SetUpdateAt sets the "update_at" field.
func (diu *DeviceInfoUpdate) SetUpdateAt(i int64) *DeviceInfoUpdate {
	diu.mutation.ResetUpdateAt()
	diu.mutation.SetUpdateAt(i)
	return diu
}

// AddUpdateAt adds i to the "update_at" field.
func (diu *DeviceInfoUpdate) AddUpdateAt(i int64) *DeviceInfoUpdate {
	diu.mutation.AddUpdateAt(i)
	return diu
}

// SetDeleteAt sets the "delete_at" field.
func (diu *DeviceInfoUpdate) SetDeleteAt(i int64) *DeviceInfoUpdate {
	diu.mutation.ResetDeleteAt()
	diu.mutation.SetDeleteAt(i)
	return diu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (diu *DeviceInfoUpdate) SetNillableDeleteAt(i *int64) *DeviceInfoUpdate {
	if i != nil {
		diu.SetDeleteAt(*i)
	}
	return diu
}

// AddDeleteAt adds i to the "delete_at" field.
func (diu *DeviceInfoUpdate) AddDeleteAt(i int64) *DeviceInfoUpdate {
	diu.mutation.AddDeleteAt(i)
	return diu
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (diu *DeviceInfoUpdate) Mutation() *DeviceInfoMutation {
	return diu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (diu *DeviceInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	diu.defaults()
	if len(diu.hooks) == 0 {
		if err = diu.check(); err != nil {
			return 0, err
		}
		affected, err = diu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = diu.check(); err != nil {
				return 0, err
			}
			diu.mutation = mutation
			affected, err = diu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(diu.hooks) - 1; i >= 0; i-- {
			if diu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = diu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, diu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (diu *DeviceInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := diu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (diu *DeviceInfoUpdate) Exec(ctx context.Context) error {
	_, err := diu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diu *DeviceInfoUpdate) ExecX(ctx context.Context) {
	if err := diu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diu *DeviceInfoUpdate) defaults() {
	if _, ok := diu.mutation.UpdateAt(); !ok {
		v := deviceinfo.UpdateDefaultUpdateAt()
		diu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diu *DeviceInfoUpdate) check() error {
	if v, ok := diu.mutation.GetType(); ok {
		if err := deviceinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := diu.mutation.Manufacturer(); ok {
		if err := deviceinfo.ManufacturerValidator(v); err != nil {
			return &ValidationError{Name: "manufacturer", err: fmt.Errorf("ent: validator failed for field \"manufacturer\": %w", err)}
		}
	}
	return nil
}

func (diu *DeviceInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deviceinfo.Table,
			Columns: deviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deviceinfo.FieldID,
			},
		},
	}
	if ps := diu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldType,
		})
	}
	if value, ok := diu.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldManufacturer,
		})
	}
	if value, ok := diu.mutation.PowerComsuption(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldPowerComsuption,
		})
	}
	if value, ok := diu.mutation.AddedPowerComsuption(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldPowerComsuption,
		})
	}
	if value, ok := diu.mutation.ShipmentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldShipmentAt,
		})
	}
	if value, ok := diu.mutation.AddedShipmentAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldShipmentAt,
		})
	}
	if value, ok := diu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldCreateAt,
		})
	}
	if value, ok := diu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldCreateAt,
		})
	}
	if value, ok := diu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldUpdateAt,
		})
	}
	if value, ok := diu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldUpdateAt,
		})
	}
	if value, ok := diu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldDeleteAt,
		})
	}
	if value, ok := diu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, diu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DeviceInfoUpdateOne is the builder for updating a single DeviceInfo entity.
type DeviceInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeviceInfoMutation
}

// SetType sets the "type" field.
func (diuo *DeviceInfoUpdateOne) SetType(s string) *DeviceInfoUpdateOne {
	diuo.mutation.SetType(s)
	return diuo
}

// SetManufacturer sets the "manufacturer" field.
func (diuo *DeviceInfoUpdateOne) SetManufacturer(s string) *DeviceInfoUpdateOne {
	diuo.mutation.SetManufacturer(s)
	return diuo
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableManufacturer(s *string) *DeviceInfoUpdateOne {
	if s != nil {
		diuo.SetManufacturer(*s)
	}
	return diuo
}

// SetPowerComsuption sets the "power_comsuption" field.
func (diuo *DeviceInfoUpdateOne) SetPowerComsuption(i int32) *DeviceInfoUpdateOne {
	diuo.mutation.ResetPowerComsuption()
	diuo.mutation.SetPowerComsuption(i)
	return diuo
}

// AddPowerComsuption adds i to the "power_comsuption" field.
func (diuo *DeviceInfoUpdateOne) AddPowerComsuption(i int32) *DeviceInfoUpdateOne {
	diuo.mutation.AddPowerComsuption(i)
	return diuo
}

// SetShipmentAt sets the "shipment_at" field.
func (diuo *DeviceInfoUpdateOne) SetShipmentAt(i int32) *DeviceInfoUpdateOne {
	diuo.mutation.ResetShipmentAt()
	diuo.mutation.SetShipmentAt(i)
	return diuo
}

// AddShipmentAt adds i to the "shipment_at" field.
func (diuo *DeviceInfoUpdateOne) AddShipmentAt(i int32) *DeviceInfoUpdateOne {
	diuo.mutation.AddShipmentAt(i)
	return diuo
}

// SetCreateAt sets the "create_at" field.
func (diuo *DeviceInfoUpdateOne) SetCreateAt(i int64) *DeviceInfoUpdateOne {
	diuo.mutation.ResetCreateAt()
	diuo.mutation.SetCreateAt(i)
	return diuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableCreateAt(i *int64) *DeviceInfoUpdateOne {
	if i != nil {
		diuo.SetCreateAt(*i)
	}
	return diuo
}

// AddCreateAt adds i to the "create_at" field.
func (diuo *DeviceInfoUpdateOne) AddCreateAt(i int64) *DeviceInfoUpdateOne {
	diuo.mutation.AddCreateAt(i)
	return diuo
}

// SetUpdateAt sets the "update_at" field.
func (diuo *DeviceInfoUpdateOne) SetUpdateAt(i int64) *DeviceInfoUpdateOne {
	diuo.mutation.ResetUpdateAt()
	diuo.mutation.SetUpdateAt(i)
	return diuo
}

// AddUpdateAt adds i to the "update_at" field.
func (diuo *DeviceInfoUpdateOne) AddUpdateAt(i int64) *DeviceInfoUpdateOne {
	diuo.mutation.AddUpdateAt(i)
	return diuo
}

// SetDeleteAt sets the "delete_at" field.
func (diuo *DeviceInfoUpdateOne) SetDeleteAt(i int64) *DeviceInfoUpdateOne {
	diuo.mutation.ResetDeleteAt()
	diuo.mutation.SetDeleteAt(i)
	return diuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (diuo *DeviceInfoUpdateOne) SetNillableDeleteAt(i *int64) *DeviceInfoUpdateOne {
	if i != nil {
		diuo.SetDeleteAt(*i)
	}
	return diuo
}

// AddDeleteAt adds i to the "delete_at" field.
func (diuo *DeviceInfoUpdateOne) AddDeleteAt(i int64) *DeviceInfoUpdateOne {
	diuo.mutation.AddDeleteAt(i)
	return diuo
}

// Mutation returns the DeviceInfoMutation object of the builder.
func (diuo *DeviceInfoUpdateOne) Mutation() *DeviceInfoMutation {
	return diuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (diuo *DeviceInfoUpdateOne) Select(field string, fields ...string) *DeviceInfoUpdateOne {
	diuo.fields = append([]string{field}, fields...)
	return diuo
}

// Save executes the query and returns the updated DeviceInfo entity.
func (diuo *DeviceInfoUpdateOne) Save(ctx context.Context) (*DeviceInfo, error) {
	var (
		err  error
		node *DeviceInfo
	)
	diuo.defaults()
	if len(diuo.hooks) == 0 {
		if err = diuo.check(); err != nil {
			return nil, err
		}
		node, err = diuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeviceInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = diuo.check(); err != nil {
				return nil, err
			}
			diuo.mutation = mutation
			node, err = diuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(diuo.hooks) - 1; i >= 0; i-- {
			if diuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = diuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, diuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (diuo *DeviceInfoUpdateOne) SaveX(ctx context.Context) *DeviceInfo {
	node, err := diuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (diuo *DeviceInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := diuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (diuo *DeviceInfoUpdateOne) ExecX(ctx context.Context) {
	if err := diuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (diuo *DeviceInfoUpdateOne) defaults() {
	if _, ok := diuo.mutation.UpdateAt(); !ok {
		v := deviceinfo.UpdateDefaultUpdateAt()
		diuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (diuo *DeviceInfoUpdateOne) check() error {
	if v, ok := diuo.mutation.GetType(); ok {
		if err := deviceinfo.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := diuo.mutation.Manufacturer(); ok {
		if err := deviceinfo.ManufacturerValidator(v); err != nil {
			return &ValidationError{Name: "manufacturer", err: fmt.Errorf("ent: validator failed for field \"manufacturer\": %w", err)}
		}
	}
	return nil
}

func (diuo *DeviceInfoUpdateOne) sqlSave(ctx context.Context) (_node *DeviceInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deviceinfo.Table,
			Columns: deviceinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: deviceinfo.FieldID,
			},
		},
	}
	id, ok := diuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DeviceInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := diuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deviceinfo.FieldID)
		for _, f := range fields {
			if !deviceinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deviceinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := diuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := diuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldType,
		})
	}
	if value, ok := diuo.mutation.Manufacturer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deviceinfo.FieldManufacturer,
		})
	}
	if value, ok := diuo.mutation.PowerComsuption(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldPowerComsuption,
		})
	}
	if value, ok := diuo.mutation.AddedPowerComsuption(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldPowerComsuption,
		})
	}
	if value, ok := diuo.mutation.ShipmentAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldShipmentAt,
		})
	}
	if value, ok := diuo.mutation.AddedShipmentAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: deviceinfo.FieldShipmentAt,
		})
	}
	if value, ok := diuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldCreateAt,
		})
	}
	if value, ok := diuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldCreateAt,
		})
	}
	if value, ok := diuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldUpdateAt,
		})
	}
	if value, ok := diuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldUpdateAt,
		})
	}
	if value, ok := diuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldDeleteAt,
		})
	}
	if value, ok := diuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deviceinfo.FieldDeleteAt,
		})
	}
	_node = &DeviceInfo{config: diuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, diuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deviceinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
