// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/vendorlocation"
)

// VendorLocationUpdate is the builder for updating VendorLocation entities.
type VendorLocationUpdate struct {
	config
	hooks    []Hook
	mutation *VendorLocationMutation
}

// Where appends a list predicates to the VendorLocationUpdate builder.
func (vlu *VendorLocationUpdate) Where(ps ...predicate.VendorLocation) *VendorLocationUpdate {
	vlu.mutation.Where(ps...)
	return vlu
}

// SetCountry sets the "country" field.
func (vlu *VendorLocationUpdate) SetCountry(s string) *VendorLocationUpdate {
	vlu.mutation.SetCountry(s)
	return vlu
}

// SetProvince sets the "province" field.
func (vlu *VendorLocationUpdate) SetProvince(s string) *VendorLocationUpdate {
	vlu.mutation.SetProvince(s)
	return vlu
}

// SetCity sets the "city" field.
func (vlu *VendorLocationUpdate) SetCity(s string) *VendorLocationUpdate {
	vlu.mutation.SetCity(s)
	return vlu
}

// SetAddress sets the "address" field.
func (vlu *VendorLocationUpdate) SetAddress(s string) *VendorLocationUpdate {
	vlu.mutation.SetAddress(s)
	return vlu
}

// SetCreateAt sets the "create_at" field.
func (vlu *VendorLocationUpdate) SetCreateAt(i int64) *VendorLocationUpdate {
	vlu.mutation.ResetCreateAt()
	vlu.mutation.SetCreateAt(i)
	return vlu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableCreateAt(i *int64) *VendorLocationUpdate {
	if i != nil {
		vlu.SetCreateAt(*i)
	}
	return vlu
}

// AddCreateAt adds i to the "create_at" field.
func (vlu *VendorLocationUpdate) AddCreateAt(i int64) *VendorLocationUpdate {
	vlu.mutation.AddCreateAt(i)
	return vlu
}

// SetUpdateAt sets the "update_at" field.
func (vlu *VendorLocationUpdate) SetUpdateAt(i int64) *VendorLocationUpdate {
	vlu.mutation.ResetUpdateAt()
	vlu.mutation.SetUpdateAt(i)
	return vlu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableUpdateAt(i *int64) *VendorLocationUpdate {
	if i != nil {
		vlu.SetUpdateAt(*i)
	}
	return vlu
}

// AddUpdateAt adds i to the "update_at" field.
func (vlu *VendorLocationUpdate) AddUpdateAt(i int64) *VendorLocationUpdate {
	vlu.mutation.AddUpdateAt(i)
	return vlu
}

// SetDeleteAt sets the "delete_at" field.
func (vlu *VendorLocationUpdate) SetDeleteAt(i int64) *VendorLocationUpdate {
	vlu.mutation.ResetDeleteAt()
	vlu.mutation.SetDeleteAt(i)
	return vlu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (vlu *VendorLocationUpdate) SetNillableDeleteAt(i *int64) *VendorLocationUpdate {
	if i != nil {
		vlu.SetDeleteAt(*i)
	}
	return vlu
}

// AddDeleteAt adds i to the "delete_at" field.
func (vlu *VendorLocationUpdate) AddDeleteAt(i int64) *VendorLocationUpdate {
	vlu.mutation.AddDeleteAt(i)
	return vlu
}

// Mutation returns the VendorLocationMutation object of the builder.
func (vlu *VendorLocationUpdate) Mutation() *VendorLocationMutation {
	return vlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlu *VendorLocationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vlu.hooks) == 0 {
		if err = vlu.check(); err != nil {
			return 0, err
		}
		affected, err = vlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VendorLocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vlu.check(); err != nil {
				return 0, err
			}
			vlu.mutation = mutation
			affected, err = vlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vlu.hooks) - 1; i >= 0; i-- {
			if vlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vlu *VendorLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := vlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlu *VendorLocationUpdate) Exec(ctx context.Context) error {
	_, err := vlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlu *VendorLocationUpdate) ExecX(ctx context.Context) {
	if err := vlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlu *VendorLocationUpdate) check() error {
	if v, ok := vlu.mutation.Country(); ok {
		if err := vendorlocation.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf("ent: validator failed for field \"country\": %w", err)}
		}
	}
	if v, ok := vlu.mutation.Province(); ok {
		if err := vendorlocation.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf("ent: validator failed for field \"province\": %w", err)}
		}
	}
	if v, ok := vlu.mutation.City(); ok {
		if err := vendorlocation.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf("ent: validator failed for field \"city\": %w", err)}
		}
	}
	if v, ok := vlu.mutation.Address(); ok {
		if err := vendorlocation.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	return nil
}

func (vlu *VendorLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vendorlocation.Table,
			Columns: vendorlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vendorlocation.FieldID,
			},
		},
	}
	if ps := vlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldCountry,
		})
	}
	if value, ok := vlu.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldProvince,
		})
	}
	if value, ok := vlu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldCity,
		})
	}
	if value, ok := vlu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldAddress,
		})
	}
	if value, ok := vlu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldCreateAt,
		})
	}
	if value, ok := vlu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldCreateAt,
		})
	}
	if value, ok := vlu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldUpdateAt,
		})
	}
	if value, ok := vlu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldUpdateAt,
		})
	}
	if value, ok := vlu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldDeleteAt,
		})
	}
	if value, ok := vlu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VendorLocationUpdateOne is the builder for updating a single VendorLocation entity.
type VendorLocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorLocationMutation
}

// SetCountry sets the "country" field.
func (vluo *VendorLocationUpdateOne) SetCountry(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetCountry(s)
	return vluo
}

// SetProvince sets the "province" field.
func (vluo *VendorLocationUpdateOne) SetProvince(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetProvince(s)
	return vluo
}

// SetCity sets the "city" field.
func (vluo *VendorLocationUpdateOne) SetCity(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetCity(s)
	return vluo
}

// SetAddress sets the "address" field.
func (vluo *VendorLocationUpdateOne) SetAddress(s string) *VendorLocationUpdateOne {
	vluo.mutation.SetAddress(s)
	return vluo
}

// SetCreateAt sets the "create_at" field.
func (vluo *VendorLocationUpdateOne) SetCreateAt(i int64) *VendorLocationUpdateOne {
	vluo.mutation.ResetCreateAt()
	vluo.mutation.SetCreateAt(i)
	return vluo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableCreateAt(i *int64) *VendorLocationUpdateOne {
	if i != nil {
		vluo.SetCreateAt(*i)
	}
	return vluo
}

// AddCreateAt adds i to the "create_at" field.
func (vluo *VendorLocationUpdateOne) AddCreateAt(i int64) *VendorLocationUpdateOne {
	vluo.mutation.AddCreateAt(i)
	return vluo
}

// SetUpdateAt sets the "update_at" field.
func (vluo *VendorLocationUpdateOne) SetUpdateAt(i int64) *VendorLocationUpdateOne {
	vluo.mutation.ResetUpdateAt()
	vluo.mutation.SetUpdateAt(i)
	return vluo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableUpdateAt(i *int64) *VendorLocationUpdateOne {
	if i != nil {
		vluo.SetUpdateAt(*i)
	}
	return vluo
}

// AddUpdateAt adds i to the "update_at" field.
func (vluo *VendorLocationUpdateOne) AddUpdateAt(i int64) *VendorLocationUpdateOne {
	vluo.mutation.AddUpdateAt(i)
	return vluo
}

// SetDeleteAt sets the "delete_at" field.
func (vluo *VendorLocationUpdateOne) SetDeleteAt(i int64) *VendorLocationUpdateOne {
	vluo.mutation.ResetDeleteAt()
	vluo.mutation.SetDeleteAt(i)
	return vluo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (vluo *VendorLocationUpdateOne) SetNillableDeleteAt(i *int64) *VendorLocationUpdateOne {
	if i != nil {
		vluo.SetDeleteAt(*i)
	}
	return vluo
}

// AddDeleteAt adds i to the "delete_at" field.
func (vluo *VendorLocationUpdateOne) AddDeleteAt(i int64) *VendorLocationUpdateOne {
	vluo.mutation.AddDeleteAt(i)
	return vluo
}

// Mutation returns the VendorLocationMutation object of the builder.
func (vluo *VendorLocationUpdateOne) Mutation() *VendorLocationMutation {
	return vluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vluo *VendorLocationUpdateOne) Select(field string, fields ...string) *VendorLocationUpdateOne {
	vluo.fields = append([]string{field}, fields...)
	return vluo
}

// Save executes the query and returns the updated VendorLocation entity.
func (vluo *VendorLocationUpdateOne) Save(ctx context.Context) (*VendorLocation, error) {
	var (
		err  error
		node *VendorLocation
	)
	if len(vluo.hooks) == 0 {
		if err = vluo.check(); err != nil {
			return nil, err
		}
		node, err = vluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VendorLocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vluo.check(); err != nil {
				return nil, err
			}
			vluo.mutation = mutation
			node, err = vluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vluo.hooks) - 1; i >= 0; i-- {
			if vluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vluo *VendorLocationUpdateOne) SaveX(ctx context.Context) *VendorLocation {
	node, err := vluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vluo *VendorLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := vluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vluo *VendorLocationUpdateOne) ExecX(ctx context.Context) {
	if err := vluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vluo *VendorLocationUpdateOne) check() error {
	if v, ok := vluo.mutation.Country(); ok {
		if err := vendorlocation.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf("ent: validator failed for field \"country\": %w", err)}
		}
	}
	if v, ok := vluo.mutation.Province(); ok {
		if err := vendorlocation.ProvinceValidator(v); err != nil {
			return &ValidationError{Name: "province", err: fmt.Errorf("ent: validator failed for field \"province\": %w", err)}
		}
	}
	if v, ok := vluo.mutation.City(); ok {
		if err := vendorlocation.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf("ent: validator failed for field \"city\": %w", err)}
		}
	}
	if v, ok := vluo.mutation.Address(); ok {
		if err := vendorlocation.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf("ent: validator failed for field \"address\": %w", err)}
		}
	}
	return nil
}

func (vluo *VendorLocationUpdateOne) sqlSave(ctx context.Context) (_node *VendorLocation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vendorlocation.Table,
			Columns: vendorlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vendorlocation.FieldID,
			},
		},
	}
	id, ok := vluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing VendorLocation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := vluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendorlocation.FieldID)
		for _, f := range fields {
			if !vendorlocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vendorlocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vluo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldCountry,
		})
	}
	if value, ok := vluo.mutation.Province(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldProvince,
		})
	}
	if value, ok := vluo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldCity,
		})
	}
	if value, ok := vluo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vendorlocation.FieldAddress,
		})
	}
	if value, ok := vluo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldCreateAt,
		})
	}
	if value, ok := vluo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldCreateAt,
		})
	}
	if value, ok := vluo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldUpdateAt,
		})
	}
	if value, ok := vluo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldUpdateAt,
		})
	}
	if value, ok := vluo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldDeleteAt,
		})
	}
	if value, ok := vluo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: vendorlocation.FieldDeleteAt,
		})
	}
	_node = &VendorLocation{config: vluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendorlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
