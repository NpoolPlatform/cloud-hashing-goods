// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/feeduration"
	"github.com/google/uuid"
)

// FeeDurationCreate is the builder for creating a FeeDuration entity.
type FeeDurationCreate struct {
	config
	mutation *FeeDurationMutation
	hooks    []Hook
}

// SetFeeTypeID sets the "fee_type_id" field.
func (fdc *FeeDurationCreate) SetFeeTypeID(u uuid.UUID) *FeeDurationCreate {
	fdc.mutation.SetFeeTypeID(u)
	return fdc
}

// SetDuration sets the "duration" field.
func (fdc *FeeDurationCreate) SetDuration(i int32) *FeeDurationCreate {
	fdc.mutation.SetDuration(i)
	return fdc
}

// SetCreateAt sets the "create_at" field.
func (fdc *FeeDurationCreate) SetCreateAt(u uint32) *FeeDurationCreate {
	fdc.mutation.SetCreateAt(u)
	return fdc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (fdc *FeeDurationCreate) SetNillableCreateAt(u *uint32) *FeeDurationCreate {
	if u != nil {
		fdc.SetCreateAt(*u)
	}
	return fdc
}

// SetUpdateAt sets the "update_at" field.
func (fdc *FeeDurationCreate) SetUpdateAt(u uint32) *FeeDurationCreate {
	fdc.mutation.SetUpdateAt(u)
	return fdc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (fdc *FeeDurationCreate) SetNillableUpdateAt(u *uint32) *FeeDurationCreate {
	if u != nil {
		fdc.SetUpdateAt(*u)
	}
	return fdc
}

// SetDeleteAt sets the "delete_at" field.
func (fdc *FeeDurationCreate) SetDeleteAt(u uint32) *FeeDurationCreate {
	fdc.mutation.SetDeleteAt(u)
	return fdc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (fdc *FeeDurationCreate) SetNillableDeleteAt(u *uint32) *FeeDurationCreate {
	if u != nil {
		fdc.SetDeleteAt(*u)
	}
	return fdc
}

// SetID sets the "id" field.
func (fdc *FeeDurationCreate) SetID(u uuid.UUID) *FeeDurationCreate {
	fdc.mutation.SetID(u)
	return fdc
}

// Mutation returns the FeeDurationMutation object of the builder.
func (fdc *FeeDurationCreate) Mutation() *FeeDurationMutation {
	return fdc.mutation
}

// Save creates the FeeDuration in the database.
func (fdc *FeeDurationCreate) Save(ctx context.Context) (*FeeDuration, error) {
	var (
		err  error
		node *FeeDuration
	)
	fdc.defaults()
	if len(fdc.hooks) == 0 {
		if err = fdc.check(); err != nil {
			return nil, err
		}
		node, err = fdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeDurationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fdc.check(); err != nil {
				return nil, err
			}
			fdc.mutation = mutation
			if node, err = fdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fdc.hooks) - 1; i >= 0; i-- {
			if fdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FeeDurationCreate) SaveX(ctx context.Context) *FeeDuration {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FeeDurationCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FeeDurationCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdc *FeeDurationCreate) defaults() {
	if _, ok := fdc.mutation.CreateAt(); !ok {
		v := feeduration.DefaultCreateAt()
		fdc.mutation.SetCreateAt(v)
	}
	if _, ok := fdc.mutation.UpdateAt(); !ok {
		v := feeduration.DefaultUpdateAt()
		fdc.mutation.SetUpdateAt(v)
	}
	if _, ok := fdc.mutation.DeleteAt(); !ok {
		v := feeduration.DefaultDeleteAt()
		fdc.mutation.SetDeleteAt(v)
	}
	if _, ok := fdc.mutation.ID(); !ok {
		v := feeduration.DefaultID()
		fdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FeeDurationCreate) check() error {
	if _, ok := fdc.mutation.FeeTypeID(); !ok {
		return &ValidationError{Name: "fee_type_id", err: errors.New(`ent: missing required field "fee_type_id"`)}
	}
	if _, ok := fdc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "duration"`)}
	}
	if _, ok := fdc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := fdc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := fdc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (fdc *FeeDurationCreate) sqlSave(ctx context.Context) (*FeeDuration, error) {
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (fdc *FeeDurationCreate) createSpec() (*FeeDuration, *sqlgraph.CreateSpec) {
	var (
		_node = &FeeDuration{config: fdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feeduration.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feeduration.FieldID,
			},
		}
	)
	if id, ok := fdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fdc.mutation.FeeTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeduration.FieldFeeTypeID,
		})
		_node.FeeTypeID = value
	}
	if value, ok := fdc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: feeduration.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := fdc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := fdc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := fdc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// FeeDurationCreateBulk is the builder for creating many FeeDuration entities in bulk.
type FeeDurationCreateBulk struct {
	config
	builders []*FeeDurationCreate
}

// Save creates the FeeDuration entities in the database.
func (fdcb *FeeDurationCreateBulk) Save(ctx context.Context) ([]*FeeDuration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FeeDuration, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeeDurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FeeDurationCreateBulk) SaveX(ctx context.Context) []*FeeDuration {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FeeDurationCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FeeDurationCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
