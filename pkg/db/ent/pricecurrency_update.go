// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/pricecurrency"
)

// PriceCurrencyUpdate is the builder for updating PriceCurrency entities.
type PriceCurrencyUpdate struct {
	config
	hooks    []Hook
	mutation *PriceCurrencyMutation
}

// Where appends a list predicates to the PriceCurrencyUpdate builder.
func (pcu *PriceCurrencyUpdate) Where(ps ...predicate.PriceCurrency) *PriceCurrencyUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetName sets the "name" field.
func (pcu *PriceCurrencyUpdate) SetName(s string) *PriceCurrencyUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetUnit sets the "unit" field.
func (pcu *PriceCurrencyUpdate) SetUnit(s string) *PriceCurrencyUpdate {
	pcu.mutation.SetUnit(s)
	return pcu
}

// SetSymbol sets the "symbol" field.
func (pcu *PriceCurrencyUpdate) SetSymbol(s string) *PriceCurrencyUpdate {
	pcu.mutation.SetSymbol(s)
	return pcu
}

// SetCreateAt sets the "create_at" field.
func (pcu *PriceCurrencyUpdate) SetCreateAt(u uint32) *PriceCurrencyUpdate {
	pcu.mutation.ResetCreateAt()
	pcu.mutation.SetCreateAt(u)
	return pcu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pcu *PriceCurrencyUpdate) SetNillableCreateAt(u *uint32) *PriceCurrencyUpdate {
	if u != nil {
		pcu.SetCreateAt(*u)
	}
	return pcu
}

// AddCreateAt adds u to the "create_at" field.
func (pcu *PriceCurrencyUpdate) AddCreateAt(u int32) *PriceCurrencyUpdate {
	pcu.mutation.AddCreateAt(u)
	return pcu
}

// SetUpdateAt sets the "update_at" field.
func (pcu *PriceCurrencyUpdate) SetUpdateAt(u uint32) *PriceCurrencyUpdate {
	pcu.mutation.ResetUpdateAt()
	pcu.mutation.SetUpdateAt(u)
	return pcu
}

// AddUpdateAt adds u to the "update_at" field.
func (pcu *PriceCurrencyUpdate) AddUpdateAt(u int32) *PriceCurrencyUpdate {
	pcu.mutation.AddUpdateAt(u)
	return pcu
}

// SetDeleteAt sets the "delete_at" field.
func (pcu *PriceCurrencyUpdate) SetDeleteAt(u uint32) *PriceCurrencyUpdate {
	pcu.mutation.ResetDeleteAt()
	pcu.mutation.SetDeleteAt(u)
	return pcu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (pcu *PriceCurrencyUpdate) SetNillableDeleteAt(u *uint32) *PriceCurrencyUpdate {
	if u != nil {
		pcu.SetDeleteAt(*u)
	}
	return pcu
}

// AddDeleteAt adds u to the "delete_at" field.
func (pcu *PriceCurrencyUpdate) AddDeleteAt(u int32) *PriceCurrencyUpdate {
	pcu.mutation.AddDeleteAt(u)
	return pcu
}

// Mutation returns the PriceCurrencyMutation object of the builder.
func (pcu *PriceCurrencyUpdate) Mutation() *PriceCurrencyMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PriceCurrencyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcu.defaults()
	if len(pcu.hooks) == 0 {
		affected, err = pcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PriceCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pcu.mutation = mutation
			affected, err = pcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcu.hooks) - 1; i >= 0; i-- {
			if pcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PriceCurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PriceCurrencyUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PriceCurrencyUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PriceCurrencyUpdate) defaults() {
	if _, ok := pcu.mutation.UpdateAt(); !ok {
		v := pricecurrency.UpdateDefaultUpdateAt()
		pcu.mutation.SetUpdateAt(v)
	}
}

func (pcu *PriceCurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pricecurrency.Table,
			Columns: pricecurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pricecurrency.FieldID,
			},
		},
	}
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldName,
		})
	}
	if value, ok := pcu.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldUnit,
		})
	}
	if value, ok := pcu.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldSymbol,
		})
	}
	if value, ok := pcu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldCreateAt,
		})
	}
	if value, ok := pcu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldCreateAt,
		})
	}
	if value, ok := pcu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldUpdateAt,
		})
	}
	if value, ok := pcu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldUpdateAt,
		})
	}
	if value, ok := pcu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldDeleteAt,
		})
	}
	if value, ok := pcu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pricecurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PriceCurrencyUpdateOne is the builder for updating a single PriceCurrency entity.
type PriceCurrencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceCurrencyMutation
}

// SetName sets the "name" field.
func (pcuo *PriceCurrencyUpdateOne) SetName(s string) *PriceCurrencyUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetUnit sets the "unit" field.
func (pcuo *PriceCurrencyUpdateOne) SetUnit(s string) *PriceCurrencyUpdateOne {
	pcuo.mutation.SetUnit(s)
	return pcuo
}

// SetSymbol sets the "symbol" field.
func (pcuo *PriceCurrencyUpdateOne) SetSymbol(s string) *PriceCurrencyUpdateOne {
	pcuo.mutation.SetSymbol(s)
	return pcuo
}

// SetCreateAt sets the "create_at" field.
func (pcuo *PriceCurrencyUpdateOne) SetCreateAt(u uint32) *PriceCurrencyUpdateOne {
	pcuo.mutation.ResetCreateAt()
	pcuo.mutation.SetCreateAt(u)
	return pcuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (pcuo *PriceCurrencyUpdateOne) SetNillableCreateAt(u *uint32) *PriceCurrencyUpdateOne {
	if u != nil {
		pcuo.SetCreateAt(*u)
	}
	return pcuo
}

// AddCreateAt adds u to the "create_at" field.
func (pcuo *PriceCurrencyUpdateOne) AddCreateAt(u int32) *PriceCurrencyUpdateOne {
	pcuo.mutation.AddCreateAt(u)
	return pcuo
}

// SetUpdateAt sets the "update_at" field.
func (pcuo *PriceCurrencyUpdateOne) SetUpdateAt(u uint32) *PriceCurrencyUpdateOne {
	pcuo.mutation.ResetUpdateAt()
	pcuo.mutation.SetUpdateAt(u)
	return pcuo
}

// AddUpdateAt adds u to the "update_at" field.
func (pcuo *PriceCurrencyUpdateOne) AddUpdateAt(u int32) *PriceCurrencyUpdateOne {
	pcuo.mutation.AddUpdateAt(u)
	return pcuo
}

// SetDeleteAt sets the "delete_at" field.
func (pcuo *PriceCurrencyUpdateOne) SetDeleteAt(u uint32) *PriceCurrencyUpdateOne {
	pcuo.mutation.ResetDeleteAt()
	pcuo.mutation.SetDeleteAt(u)
	return pcuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (pcuo *PriceCurrencyUpdateOne) SetNillableDeleteAt(u *uint32) *PriceCurrencyUpdateOne {
	if u != nil {
		pcuo.SetDeleteAt(*u)
	}
	return pcuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (pcuo *PriceCurrencyUpdateOne) AddDeleteAt(u int32) *PriceCurrencyUpdateOne {
	pcuo.mutation.AddDeleteAt(u)
	return pcuo
}

// Mutation returns the PriceCurrencyMutation object of the builder.
func (pcuo *PriceCurrencyUpdateOne) Mutation() *PriceCurrencyMutation {
	return pcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PriceCurrencyUpdateOne) Select(field string, fields ...string) *PriceCurrencyUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PriceCurrency entity.
func (pcuo *PriceCurrencyUpdateOne) Save(ctx context.Context) (*PriceCurrency, error) {
	var (
		err  error
		node *PriceCurrency
	)
	pcuo.defaults()
	if len(pcuo.hooks) == 0 {
		node, err = pcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PriceCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pcuo.mutation = mutation
			node, err = pcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcuo.hooks) - 1; i >= 0; i-- {
			if pcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PriceCurrencyUpdateOne) SaveX(ctx context.Context) *PriceCurrency {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PriceCurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PriceCurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PriceCurrencyUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdateAt(); !ok {
		v := pricecurrency.UpdateDefaultUpdateAt()
		pcuo.mutation.SetUpdateAt(v)
	}
}

func (pcuo *PriceCurrencyUpdateOne) sqlSave(ctx context.Context) (_node *PriceCurrency, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pricecurrency.Table,
			Columns: pricecurrency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: pricecurrency.FieldID,
			},
		},
	}
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PriceCurrency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pricecurrency.FieldID)
		for _, f := range fields {
			if !pricecurrency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pricecurrency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldName,
		})
	}
	if value, ok := pcuo.mutation.Unit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldUnit,
		})
	}
	if value, ok := pcuo.mutation.Symbol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: pricecurrency.FieldSymbol,
		})
	}
	if value, ok := pcuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldCreateAt,
		})
	}
	if value, ok := pcuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldCreateAt,
		})
	}
	if value, ok := pcuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldUpdateAt,
		})
	}
	if value, ok := pcuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldUpdateAt,
		})
	}
	if value, ok := pcuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldDeleteAt,
		})
	}
	if value, ok := pcuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: pricecurrency.FieldDeleteAt,
		})
	}
	_node = &PriceCurrency{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pricecurrency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
