// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgoodpromotion"
	"github.com/google/uuid"
)

// AppGoodPromotion is the model entity for the AppGoodPromotion schema.
type AppGoodPromotion struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Start holds the value of the "start" field.
	Start uint32 `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End uint32 `json:"end,omitempty"`
	// Price holds the value of the "price" field.
	Price uint64 `json:"price,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppGoodPromotion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appgoodpromotion.FieldStart, appgoodpromotion.FieldEnd, appgoodpromotion.FieldPrice, appgoodpromotion.FieldCreateAt, appgoodpromotion.FieldUpdateAt, appgoodpromotion.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case appgoodpromotion.FieldMessage:
			values[i] = new(sql.NullString)
		case appgoodpromotion.FieldID, appgoodpromotion.FieldAppID, appgoodpromotion.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppGoodPromotion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppGoodPromotion fields.
func (agp *AppGoodPromotion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appgoodpromotion.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				agp.ID = *value
			}
		case appgoodpromotion.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				agp.AppID = *value
			}
		case appgoodpromotion.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				agp.GoodID = *value
			}
		case appgoodpromotion.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				agp.Message = value.String
			}
		case appgoodpromotion.FieldStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				agp.Start = uint32(value.Int64)
			}
		case appgoodpromotion.FieldEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				agp.End = uint32(value.Int64)
			}
		case appgoodpromotion.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				agp.Price = uint64(value.Int64)
			}
		case appgoodpromotion.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				agp.CreateAt = uint32(value.Int64)
			}
		case appgoodpromotion.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				agp.UpdateAt = uint32(value.Int64)
			}
		case appgoodpromotion.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				agp.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppGoodPromotion.
// Note that you need to call AppGoodPromotion.Unwrap() before calling this method if this AppGoodPromotion
// was returned from a transaction, and the transaction was committed or rolled back.
func (agp *AppGoodPromotion) Update() *AppGoodPromotionUpdateOne {
	return (&AppGoodPromotionClient{config: agp.config}).UpdateOne(agp)
}

// Unwrap unwraps the AppGoodPromotion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (agp *AppGoodPromotion) Unwrap() *AppGoodPromotion {
	tx, ok := agp.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppGoodPromotion is not a transactional entity")
	}
	agp.config.driver = tx.drv
	return agp
}

// String implements the fmt.Stringer.
func (agp *AppGoodPromotion) String() string {
	var builder strings.Builder
	builder.WriteString("AppGoodPromotion(")
	builder.WriteString(fmt.Sprintf("id=%v", agp.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", agp.AppID))
	builder.WriteString(", good_id=")
	builder.WriteString(fmt.Sprintf("%v", agp.GoodID))
	builder.WriteString(", message=")
	builder.WriteString(agp.Message)
	builder.WriteString(", start=")
	builder.WriteString(fmt.Sprintf("%v", agp.Start))
	builder.WriteString(", end=")
	builder.WriteString(fmt.Sprintf("%v", agp.End))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", agp.Price))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", agp.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", agp.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", agp.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppGoodPromotions is a parsable slice of AppGoodPromotion.
type AppGoodPromotions []*AppGoodPromotion

func (agp AppGoodPromotions) config(cfg config) {
	for _i := range agp {
		agp[_i].config = cfg
	}
}
