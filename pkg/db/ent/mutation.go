// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgood"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgoodtargetarea"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/apptargetarea"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/fee"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/feetype"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodcomment"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodextrainfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodrecommand"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodreview"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/pricecurrency"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/targetarea"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/vendorlocation"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppGood           = "AppGood"
	TypeAppGoodTargetArea = "AppGoodTargetArea"
	TypeAppTargetArea     = "AppTargetArea"
	TypeDeviceInfo        = "DeviceInfo"
	TypeFee               = "Fee"
	TypeFeeType           = "FeeType"
	TypeGoodComment       = "GoodComment"
	TypeGoodExtraInfo     = "GoodExtraInfo"
	TypeGoodInfo          = "GoodInfo"
	TypeGoodRecommand     = "GoodRecommand"
	TypeGoodReview        = "GoodReview"
	TypePriceCurrency     = "PriceCurrency"
	TypeTargetArea        = "TargetArea"
	TypeVendorLocation    = "VendorLocation"
)

// AppGoodMutation represents an operation that mutates the AppGood nodes in the graph.
type AppGoodMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	app_id             *uuid.UUID
	good_id            *uuid.UUID
	authorized         *bool
	online             *bool
	init_area_strategy *appgood.InitAreaStrategy
	price              *uint64
	addprice           *uint64
	invitation_only    *bool
	create_at          *int64
	addcreate_at       *int64
	update_at          *int64
	addupdate_at       *int64
	delete_at          *int64
	adddelete_at       *int64
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*AppGood, error)
	predicates         []predicate.AppGood
}

var _ ent.Mutation = (*AppGoodMutation)(nil)

// appgoodOption allows management of the mutation configuration using functional options.
type appgoodOption func(*AppGoodMutation)

// newAppGoodMutation creates new mutation for the AppGood entity.
func newAppGoodMutation(c config, op Op, opts ...appgoodOption) *AppGoodMutation {
	m := &AppGoodMutation{
		config:        c,
		op:            op,
		typ:           TypeAppGood,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppGoodID sets the ID field of the mutation.
func withAppGoodID(id uuid.UUID) appgoodOption {
	return func(m *AppGoodMutation) {
		var (
			err   error
			once  sync.Once
			value *AppGood
		)
		m.oldValue = func(ctx context.Context) (*AppGood, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppGood.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppGood sets the old AppGood of the mutation.
func withAppGood(node *AppGood) appgoodOption {
	return func(m *AppGoodMutation) {
		m.oldValue = func(context.Context) (*AppGood, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppGoodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppGoodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppGood entities.
func (m *AppGoodMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppGoodMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *AppGoodMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppGoodMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppGoodMutation) ResetAppID() {
	m.app_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *AppGoodMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *AppGoodMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *AppGoodMutation) ResetGoodID() {
	m.good_id = nil
}

// SetAuthorized sets the "authorized" field.
func (m *AppGoodMutation) SetAuthorized(b bool) {
	m.authorized = &b
}

// Authorized returns the value of the "authorized" field in the mutation.
func (m *AppGoodMutation) Authorized() (r bool, exists bool) {
	v := m.authorized
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorized returns the old "authorized" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldAuthorized(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthorized is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthorized requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorized: %w", err)
	}
	return oldValue.Authorized, nil
}

// ResetAuthorized resets all changes to the "authorized" field.
func (m *AppGoodMutation) ResetAuthorized() {
	m.authorized = nil
}

// SetOnline sets the "online" field.
func (m *AppGoodMutation) SetOnline(b bool) {
	m.online = &b
}

// Online returns the value of the "online" field in the mutation.
func (m *AppGoodMutation) Online() (r bool, exists bool) {
	v := m.online
	if v == nil {
		return
	}
	return *v, true
}

// OldOnline returns the old "online" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldOnline(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOnline is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOnline requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnline: %w", err)
	}
	return oldValue.Online, nil
}

// ResetOnline resets all changes to the "online" field.
func (m *AppGoodMutation) ResetOnline() {
	m.online = nil
}

// SetInitAreaStrategy sets the "init_area_strategy" field.
func (m *AppGoodMutation) SetInitAreaStrategy(aas appgood.InitAreaStrategy) {
	m.init_area_strategy = &aas
}

// InitAreaStrategy returns the value of the "init_area_strategy" field in the mutation.
func (m *AppGoodMutation) InitAreaStrategy() (r appgood.InitAreaStrategy, exists bool) {
	v := m.init_area_strategy
	if v == nil {
		return
	}
	return *v, true
}

// OldInitAreaStrategy returns the old "init_area_strategy" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldInitAreaStrategy(ctx context.Context) (v appgood.InitAreaStrategy, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInitAreaStrategy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInitAreaStrategy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitAreaStrategy: %w", err)
	}
	return oldValue.InitAreaStrategy, nil
}

// ResetInitAreaStrategy resets all changes to the "init_area_strategy" field.
func (m *AppGoodMutation) ResetInitAreaStrategy() {
	m.init_area_strategy = nil
}

// SetPrice sets the "price" field.
func (m *AppGoodMutation) SetPrice(u uint64) {
	m.price = &u
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *AppGoodMutation) Price() (r uint64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldPrice(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds u to the "price" field.
func (m *AppGoodMutation) AddPrice(u uint64) {
	if m.addprice != nil {
		*m.addprice += u
	} else {
		m.addprice = &u
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *AppGoodMutation) AddedPrice() (r uint64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *AppGoodMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetInvitationOnly sets the "invitation_only" field.
func (m *AppGoodMutation) SetInvitationOnly(b bool) {
	m.invitation_only = &b
}

// InvitationOnly returns the value of the "invitation_only" field in the mutation.
func (m *AppGoodMutation) InvitationOnly() (r bool, exists bool) {
	v := m.invitation_only
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitationOnly returns the old "invitation_only" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldInvitationOnly(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvitationOnly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvitationOnly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitationOnly: %w", err)
	}
	return oldValue.InvitationOnly, nil
}

// ResetInvitationOnly resets all changes to the "invitation_only" field.
func (m *AppGoodMutation) ResetInvitationOnly() {
	m.invitation_only = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppGoodMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppGoodMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *AppGoodMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppGoodMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppGoodMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppGoodMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppGoodMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *AppGoodMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppGoodMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppGoodMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppGoodMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppGoodMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppGood entity.
// If the AppGood object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *AppGoodMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppGoodMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppGoodMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppGoodMutation builder.
func (m *AppGoodMutation) Where(ps ...predicate.AppGood) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppGoodMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppGood).
func (m *AppGoodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppGoodMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, appgood.FieldAppID)
	}
	if m.good_id != nil {
		fields = append(fields, appgood.FieldGoodID)
	}
	if m.authorized != nil {
		fields = append(fields, appgood.FieldAuthorized)
	}
	if m.online != nil {
		fields = append(fields, appgood.FieldOnline)
	}
	if m.init_area_strategy != nil {
		fields = append(fields, appgood.FieldInitAreaStrategy)
	}
	if m.price != nil {
		fields = append(fields, appgood.FieldPrice)
	}
	if m.invitation_only != nil {
		fields = append(fields, appgood.FieldInvitationOnly)
	}
	if m.create_at != nil {
		fields = append(fields, appgood.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appgood.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appgood.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppGoodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appgood.FieldAppID:
		return m.AppID()
	case appgood.FieldGoodID:
		return m.GoodID()
	case appgood.FieldAuthorized:
		return m.Authorized()
	case appgood.FieldOnline:
		return m.Online()
	case appgood.FieldInitAreaStrategy:
		return m.InitAreaStrategy()
	case appgood.FieldPrice:
		return m.Price()
	case appgood.FieldInvitationOnly:
		return m.InvitationOnly()
	case appgood.FieldCreateAt:
		return m.CreateAt()
	case appgood.FieldUpdateAt:
		return m.UpdateAt()
	case appgood.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppGoodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appgood.FieldAppID:
		return m.OldAppID(ctx)
	case appgood.FieldGoodID:
		return m.OldGoodID(ctx)
	case appgood.FieldAuthorized:
		return m.OldAuthorized(ctx)
	case appgood.FieldOnline:
		return m.OldOnline(ctx)
	case appgood.FieldInitAreaStrategy:
		return m.OldInitAreaStrategy(ctx)
	case appgood.FieldPrice:
		return m.OldPrice(ctx)
	case appgood.FieldInvitationOnly:
		return m.OldInvitationOnly(ctx)
	case appgood.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appgood.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appgood.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppGood field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppGoodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appgood.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appgood.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case appgood.FieldAuthorized:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorized(v)
		return nil
	case appgood.FieldOnline:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnline(v)
		return nil
	case appgood.FieldInitAreaStrategy:
		v, ok := value.(appgood.InitAreaStrategy)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitAreaStrategy(v)
		return nil
	case appgood.FieldPrice:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case appgood.FieldInvitationOnly:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitationOnly(v)
		return nil
	case appgood.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appgood.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appgood.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppGood field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppGoodMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, appgood.FieldPrice)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appgood.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appgood.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appgood.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppGoodMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appgood.FieldPrice:
		return m.AddedPrice()
	case appgood.FieldCreateAt:
		return m.AddedCreateAt()
	case appgood.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appgood.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppGoodMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appgood.FieldPrice:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case appgood.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appgood.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appgood.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppGood numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppGoodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppGoodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppGoodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppGood nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppGoodMutation) ResetField(name string) error {
	switch name {
	case appgood.FieldAppID:
		m.ResetAppID()
		return nil
	case appgood.FieldGoodID:
		m.ResetGoodID()
		return nil
	case appgood.FieldAuthorized:
		m.ResetAuthorized()
		return nil
	case appgood.FieldOnline:
		m.ResetOnline()
		return nil
	case appgood.FieldInitAreaStrategy:
		m.ResetInitAreaStrategy()
		return nil
	case appgood.FieldPrice:
		m.ResetPrice()
		return nil
	case appgood.FieldInvitationOnly:
		m.ResetInvitationOnly()
		return nil
	case appgood.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appgood.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appgood.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppGood field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppGoodMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppGoodMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppGoodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppGoodMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppGoodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppGoodMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppGoodMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppGood unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppGoodMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppGood edge %s", name)
}

// AppGoodTargetAreaMutation represents an operation that mutates the AppGoodTargetArea nodes in the graph.
type AppGoodTargetAreaMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	app_id         *uuid.UUID
	good_id        *uuid.UUID
	target_area_id *uuid.UUID
	create_at      *int64
	addcreate_at   *int64
	update_at      *int64
	addupdate_at   *int64
	delete_at      *int64
	adddelete_at   *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*AppGoodTargetArea, error)
	predicates     []predicate.AppGoodTargetArea
}

var _ ent.Mutation = (*AppGoodTargetAreaMutation)(nil)

// appgoodtargetareaOption allows management of the mutation configuration using functional options.
type appgoodtargetareaOption func(*AppGoodTargetAreaMutation)

// newAppGoodTargetAreaMutation creates new mutation for the AppGoodTargetArea entity.
func newAppGoodTargetAreaMutation(c config, op Op, opts ...appgoodtargetareaOption) *AppGoodTargetAreaMutation {
	m := &AppGoodTargetAreaMutation{
		config:        c,
		op:            op,
		typ:           TypeAppGoodTargetArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppGoodTargetAreaID sets the ID field of the mutation.
func withAppGoodTargetAreaID(id uuid.UUID) appgoodtargetareaOption {
	return func(m *AppGoodTargetAreaMutation) {
		var (
			err   error
			once  sync.Once
			value *AppGoodTargetArea
		)
		m.oldValue = func(ctx context.Context) (*AppGoodTargetArea, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppGoodTargetArea.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppGoodTargetArea sets the old AppGoodTargetArea of the mutation.
func withAppGoodTargetArea(node *AppGoodTargetArea) appgoodtargetareaOption {
	return func(m *AppGoodTargetAreaMutation) {
		m.oldValue = func(context.Context) (*AppGoodTargetArea, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppGoodTargetAreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppGoodTargetAreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppGoodTargetArea entities.
func (m *AppGoodTargetAreaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppGoodTargetAreaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *AppGoodTargetAreaMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppGoodTargetAreaMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppGoodTargetArea entity.
// If the AppGoodTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodTargetAreaMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppGoodTargetAreaMutation) ResetAppID() {
	m.app_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *AppGoodTargetAreaMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *AppGoodTargetAreaMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the AppGoodTargetArea entity.
// If the AppGoodTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodTargetAreaMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *AppGoodTargetAreaMutation) ResetGoodID() {
	m.good_id = nil
}

// SetTargetAreaID sets the "target_area_id" field.
func (m *AppGoodTargetAreaMutation) SetTargetAreaID(u uuid.UUID) {
	m.target_area_id = &u
}

// TargetAreaID returns the value of the "target_area_id" field in the mutation.
func (m *AppGoodTargetAreaMutation) TargetAreaID() (r uuid.UUID, exists bool) {
	v := m.target_area_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetAreaID returns the old "target_area_id" field's value of the AppGoodTargetArea entity.
// If the AppGoodTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodTargetAreaMutation) OldTargetAreaID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTargetAreaID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTargetAreaID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetAreaID: %w", err)
	}
	return oldValue.TargetAreaID, nil
}

// ResetTargetAreaID resets all changes to the "target_area_id" field.
func (m *AppGoodTargetAreaMutation) ResetTargetAreaID() {
	m.target_area_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppGoodTargetAreaMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppGoodTargetAreaMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppGoodTargetArea entity.
// If the AppGoodTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodTargetAreaMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *AppGoodTargetAreaMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppGoodTargetAreaMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppGoodTargetAreaMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppGoodTargetAreaMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppGoodTargetAreaMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppGoodTargetArea entity.
// If the AppGoodTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodTargetAreaMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *AppGoodTargetAreaMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppGoodTargetAreaMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppGoodTargetAreaMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppGoodTargetAreaMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppGoodTargetAreaMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppGoodTargetArea entity.
// If the AppGoodTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppGoodTargetAreaMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *AppGoodTargetAreaMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppGoodTargetAreaMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppGoodTargetAreaMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppGoodTargetAreaMutation builder.
func (m *AppGoodTargetAreaMutation) Where(ps ...predicate.AppGoodTargetArea) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppGoodTargetAreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppGoodTargetArea).
func (m *AppGoodTargetAreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppGoodTargetAreaMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, appgoodtargetarea.FieldAppID)
	}
	if m.good_id != nil {
		fields = append(fields, appgoodtargetarea.FieldGoodID)
	}
	if m.target_area_id != nil {
		fields = append(fields, appgoodtargetarea.FieldTargetAreaID)
	}
	if m.create_at != nil {
		fields = append(fields, appgoodtargetarea.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appgoodtargetarea.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appgoodtargetarea.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppGoodTargetAreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appgoodtargetarea.FieldAppID:
		return m.AppID()
	case appgoodtargetarea.FieldGoodID:
		return m.GoodID()
	case appgoodtargetarea.FieldTargetAreaID:
		return m.TargetAreaID()
	case appgoodtargetarea.FieldCreateAt:
		return m.CreateAt()
	case appgoodtargetarea.FieldUpdateAt:
		return m.UpdateAt()
	case appgoodtargetarea.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppGoodTargetAreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appgoodtargetarea.FieldAppID:
		return m.OldAppID(ctx)
	case appgoodtargetarea.FieldGoodID:
		return m.OldGoodID(ctx)
	case appgoodtargetarea.FieldTargetAreaID:
		return m.OldTargetAreaID(ctx)
	case appgoodtargetarea.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appgoodtargetarea.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appgoodtargetarea.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppGoodTargetArea field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppGoodTargetAreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appgoodtargetarea.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appgoodtargetarea.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case appgoodtargetarea.FieldTargetAreaID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetAreaID(v)
		return nil
	case appgoodtargetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appgoodtargetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appgoodtargetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppGoodTargetArea field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppGoodTargetAreaMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, appgoodtargetarea.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appgoodtargetarea.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appgoodtargetarea.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppGoodTargetAreaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appgoodtargetarea.FieldCreateAt:
		return m.AddedCreateAt()
	case appgoodtargetarea.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appgoodtargetarea.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppGoodTargetAreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appgoodtargetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appgoodtargetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appgoodtargetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppGoodTargetArea numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppGoodTargetAreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppGoodTargetAreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppGoodTargetAreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppGoodTargetArea nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppGoodTargetAreaMutation) ResetField(name string) error {
	switch name {
	case appgoodtargetarea.FieldAppID:
		m.ResetAppID()
		return nil
	case appgoodtargetarea.FieldGoodID:
		m.ResetGoodID()
		return nil
	case appgoodtargetarea.FieldTargetAreaID:
		m.ResetTargetAreaID()
		return nil
	case appgoodtargetarea.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appgoodtargetarea.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appgoodtargetarea.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppGoodTargetArea field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppGoodTargetAreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppGoodTargetAreaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppGoodTargetAreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppGoodTargetAreaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppGoodTargetAreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppGoodTargetAreaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppGoodTargetAreaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppGoodTargetArea unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppGoodTargetAreaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppGoodTargetArea edge %s", name)
}

// AppTargetAreaMutation represents an operation that mutates the AppTargetArea nodes in the graph.
type AppTargetAreaMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	target_area_id *uuid.UUID
	app_id         *uuid.UUID
	create_at      *int64
	addcreate_at   *int64
	update_at      *int64
	addupdate_at   *int64
	delete_at      *int64
	adddelete_at   *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*AppTargetArea, error)
	predicates     []predicate.AppTargetArea
}

var _ ent.Mutation = (*AppTargetAreaMutation)(nil)

// apptargetareaOption allows management of the mutation configuration using functional options.
type apptargetareaOption func(*AppTargetAreaMutation)

// newAppTargetAreaMutation creates new mutation for the AppTargetArea entity.
func newAppTargetAreaMutation(c config, op Op, opts ...apptargetareaOption) *AppTargetAreaMutation {
	m := &AppTargetAreaMutation{
		config:        c,
		op:            op,
		typ:           TypeAppTargetArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppTargetAreaID sets the ID field of the mutation.
func withAppTargetAreaID(id uuid.UUID) apptargetareaOption {
	return func(m *AppTargetAreaMutation) {
		var (
			err   error
			once  sync.Once
			value *AppTargetArea
		)
		m.oldValue = func(ctx context.Context) (*AppTargetArea, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppTargetArea.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppTargetArea sets the old AppTargetArea of the mutation.
func withAppTargetArea(node *AppTargetArea) apptargetareaOption {
	return func(m *AppTargetAreaMutation) {
		m.oldValue = func(context.Context) (*AppTargetArea, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppTargetAreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppTargetAreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppTargetArea entities.
func (m *AppTargetAreaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppTargetAreaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTargetAreaID sets the "target_area_id" field.
func (m *AppTargetAreaMutation) SetTargetAreaID(u uuid.UUID) {
	m.target_area_id = &u
}

// TargetAreaID returns the value of the "target_area_id" field in the mutation.
func (m *AppTargetAreaMutation) TargetAreaID() (r uuid.UUID, exists bool) {
	v := m.target_area_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetAreaID returns the old "target_area_id" field's value of the AppTargetArea entity.
// If the AppTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppTargetAreaMutation) OldTargetAreaID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTargetAreaID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTargetAreaID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetAreaID: %w", err)
	}
	return oldValue.TargetAreaID, nil
}

// ResetTargetAreaID resets all changes to the "target_area_id" field.
func (m *AppTargetAreaMutation) ResetTargetAreaID() {
	m.target_area_id = nil
}

// SetAppID sets the "app_id" field.
func (m *AppTargetAreaMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppTargetAreaMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppTargetArea entity.
// If the AppTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppTargetAreaMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppTargetAreaMutation) ResetAppID() {
	m.app_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppTargetAreaMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppTargetAreaMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppTargetArea entity.
// If the AppTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppTargetAreaMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *AppTargetAreaMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppTargetAreaMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppTargetAreaMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppTargetAreaMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppTargetAreaMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppTargetArea entity.
// If the AppTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppTargetAreaMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *AppTargetAreaMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppTargetAreaMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppTargetAreaMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppTargetAreaMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppTargetAreaMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppTargetArea entity.
// If the AppTargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppTargetAreaMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *AppTargetAreaMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppTargetAreaMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppTargetAreaMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppTargetAreaMutation builder.
func (m *AppTargetAreaMutation) Where(ps ...predicate.AppTargetArea) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppTargetAreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppTargetArea).
func (m *AppTargetAreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppTargetAreaMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.target_area_id != nil {
		fields = append(fields, apptargetarea.FieldTargetAreaID)
	}
	if m.app_id != nil {
		fields = append(fields, apptargetarea.FieldAppID)
	}
	if m.create_at != nil {
		fields = append(fields, apptargetarea.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, apptargetarea.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, apptargetarea.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppTargetAreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case apptargetarea.FieldTargetAreaID:
		return m.TargetAreaID()
	case apptargetarea.FieldAppID:
		return m.AppID()
	case apptargetarea.FieldCreateAt:
		return m.CreateAt()
	case apptargetarea.FieldUpdateAt:
		return m.UpdateAt()
	case apptargetarea.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppTargetAreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case apptargetarea.FieldTargetAreaID:
		return m.OldTargetAreaID(ctx)
	case apptargetarea.FieldAppID:
		return m.OldAppID(ctx)
	case apptargetarea.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case apptargetarea.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case apptargetarea.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppTargetArea field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppTargetAreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case apptargetarea.FieldTargetAreaID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetAreaID(v)
		return nil
	case apptargetarea.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case apptargetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case apptargetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case apptargetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppTargetArea field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppTargetAreaMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, apptargetarea.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, apptargetarea.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, apptargetarea.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppTargetAreaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case apptargetarea.FieldCreateAt:
		return m.AddedCreateAt()
	case apptargetarea.FieldUpdateAt:
		return m.AddedUpdateAt()
	case apptargetarea.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppTargetAreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case apptargetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case apptargetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case apptargetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppTargetArea numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppTargetAreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppTargetAreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppTargetAreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppTargetArea nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppTargetAreaMutation) ResetField(name string) error {
	switch name {
	case apptargetarea.FieldTargetAreaID:
		m.ResetTargetAreaID()
		return nil
	case apptargetarea.FieldAppID:
		m.ResetAppID()
		return nil
	case apptargetarea.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case apptargetarea.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case apptargetarea.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppTargetArea field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppTargetAreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppTargetAreaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppTargetAreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppTargetAreaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppTargetAreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppTargetAreaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppTargetAreaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppTargetArea unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppTargetAreaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppTargetArea edge %s", name)
}

// DeviceInfoMutation represents an operation that mutates the DeviceInfo nodes in the graph.
type DeviceInfoMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	_type               *string
	manufacturer        *string
	power_comsuption    *int32
	addpower_comsuption *int32
	shipment_at         *int32
	addshipment_at      *int32
	create_at           *int64
	addcreate_at        *int64
	update_at           *int64
	addupdate_at        *int64
	delete_at           *int64
	adddelete_at        *int64
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*DeviceInfo, error)
	predicates          []predicate.DeviceInfo
}

var _ ent.Mutation = (*DeviceInfoMutation)(nil)

// deviceinfoOption allows management of the mutation configuration using functional options.
type deviceinfoOption func(*DeviceInfoMutation)

// newDeviceInfoMutation creates new mutation for the DeviceInfo entity.
func newDeviceInfoMutation(c config, op Op, opts ...deviceinfoOption) *DeviceInfoMutation {
	m := &DeviceInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeDeviceInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceInfoID sets the ID field of the mutation.
func withDeviceInfoID(id uuid.UUID) deviceinfoOption {
	return func(m *DeviceInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *DeviceInfo
		)
		m.oldValue = func(ctx context.Context) (*DeviceInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeviceInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeviceInfo sets the old DeviceInfo of the mutation.
func withDeviceInfo(node *DeviceInfo) deviceinfoOption {
	return func(m *DeviceInfoMutation) {
		m.oldValue = func(context.Context) (*DeviceInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DeviceInfo entities.
func (m *DeviceInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *DeviceInfoMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeviceInfoMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DeviceInfoMutation) ResetType() {
	m._type = nil
}

// SetManufacturer sets the "manufacturer" field.
func (m *DeviceInfoMutation) SetManufacturer(s string) {
	m.manufacturer = &s
}

// Manufacturer returns the value of the "manufacturer" field in the mutation.
func (m *DeviceInfoMutation) Manufacturer() (r string, exists bool) {
	v := m.manufacturer
	if v == nil {
		return
	}
	return *v, true
}

// OldManufacturer returns the old "manufacturer" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldManufacturer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldManufacturer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldManufacturer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManufacturer: %w", err)
	}
	return oldValue.Manufacturer, nil
}

// ResetManufacturer resets all changes to the "manufacturer" field.
func (m *DeviceInfoMutation) ResetManufacturer() {
	m.manufacturer = nil
}

// SetPowerComsuption sets the "power_comsuption" field.
func (m *DeviceInfoMutation) SetPowerComsuption(i int32) {
	m.power_comsuption = &i
	m.addpower_comsuption = nil
}

// PowerComsuption returns the value of the "power_comsuption" field in the mutation.
func (m *DeviceInfoMutation) PowerComsuption() (r int32, exists bool) {
	v := m.power_comsuption
	if v == nil {
		return
	}
	return *v, true
}

// OldPowerComsuption returns the old "power_comsuption" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldPowerComsuption(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPowerComsuption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPowerComsuption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPowerComsuption: %w", err)
	}
	return oldValue.PowerComsuption, nil
}

// AddPowerComsuption adds i to the "power_comsuption" field.
func (m *DeviceInfoMutation) AddPowerComsuption(i int32) {
	if m.addpower_comsuption != nil {
		*m.addpower_comsuption += i
	} else {
		m.addpower_comsuption = &i
	}
}

// AddedPowerComsuption returns the value that was added to the "power_comsuption" field in this mutation.
func (m *DeviceInfoMutation) AddedPowerComsuption() (r int32, exists bool) {
	v := m.addpower_comsuption
	if v == nil {
		return
	}
	return *v, true
}

// ResetPowerComsuption resets all changes to the "power_comsuption" field.
func (m *DeviceInfoMutation) ResetPowerComsuption() {
	m.power_comsuption = nil
	m.addpower_comsuption = nil
}

// SetShipmentAt sets the "shipment_at" field.
func (m *DeviceInfoMutation) SetShipmentAt(i int32) {
	m.shipment_at = &i
	m.addshipment_at = nil
}

// ShipmentAt returns the value of the "shipment_at" field in the mutation.
func (m *DeviceInfoMutation) ShipmentAt() (r int32, exists bool) {
	v := m.shipment_at
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentAt returns the old "shipment_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldShipmentAt(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentAt: %w", err)
	}
	return oldValue.ShipmentAt, nil
}

// AddShipmentAt adds i to the "shipment_at" field.
func (m *DeviceInfoMutation) AddShipmentAt(i int32) {
	if m.addshipment_at != nil {
		*m.addshipment_at += i
	} else {
		m.addshipment_at = &i
	}
}

// AddedShipmentAt returns the value that was added to the "shipment_at" field in this mutation.
func (m *DeviceInfoMutation) AddedShipmentAt() (r int32, exists bool) {
	v := m.addshipment_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetShipmentAt resets all changes to the "shipment_at" field.
func (m *DeviceInfoMutation) ResetShipmentAt() {
	m.shipment_at = nil
	m.addshipment_at = nil
}

// SetCreateAt sets the "create_at" field.
func (m *DeviceInfoMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *DeviceInfoMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *DeviceInfoMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *DeviceInfoMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *DeviceInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *DeviceInfoMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *DeviceInfoMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *DeviceInfoMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *DeviceInfoMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *DeviceInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *DeviceInfoMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *DeviceInfoMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *DeviceInfoMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *DeviceInfoMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *DeviceInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the DeviceInfoMutation builder.
func (m *DeviceInfoMutation) Where(ps ...predicate.DeviceInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeviceInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DeviceInfo).
func (m *DeviceInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceInfoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m._type != nil {
		fields = append(fields, deviceinfo.FieldType)
	}
	if m.manufacturer != nil {
		fields = append(fields, deviceinfo.FieldManufacturer)
	}
	if m.power_comsuption != nil {
		fields = append(fields, deviceinfo.FieldPowerComsuption)
	}
	if m.shipment_at != nil {
		fields = append(fields, deviceinfo.FieldShipmentAt)
	}
	if m.create_at != nil {
		fields = append(fields, deviceinfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, deviceinfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, deviceinfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deviceinfo.FieldType:
		return m.GetType()
	case deviceinfo.FieldManufacturer:
		return m.Manufacturer()
	case deviceinfo.FieldPowerComsuption:
		return m.PowerComsuption()
	case deviceinfo.FieldShipmentAt:
		return m.ShipmentAt()
	case deviceinfo.FieldCreateAt:
		return m.CreateAt()
	case deviceinfo.FieldUpdateAt:
		return m.UpdateAt()
	case deviceinfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deviceinfo.FieldType:
		return m.OldType(ctx)
	case deviceinfo.FieldManufacturer:
		return m.OldManufacturer(ctx)
	case deviceinfo.FieldPowerComsuption:
		return m.OldPowerComsuption(ctx)
	case deviceinfo.FieldShipmentAt:
		return m.OldShipmentAt(ctx)
	case deviceinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case deviceinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case deviceinfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown DeviceInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deviceinfo.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case deviceinfo.FieldManufacturer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManufacturer(v)
		return nil
	case deviceinfo.FieldPowerComsuption:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPowerComsuption(v)
		return nil
	case deviceinfo.FieldShipmentAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentAt(v)
		return nil
	case deviceinfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case deviceinfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case deviceinfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceInfoMutation) AddedFields() []string {
	var fields []string
	if m.addpower_comsuption != nil {
		fields = append(fields, deviceinfo.FieldPowerComsuption)
	}
	if m.addshipment_at != nil {
		fields = append(fields, deviceinfo.FieldShipmentAt)
	}
	if m.addcreate_at != nil {
		fields = append(fields, deviceinfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, deviceinfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, deviceinfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deviceinfo.FieldPowerComsuption:
		return m.AddedPowerComsuption()
	case deviceinfo.FieldShipmentAt:
		return m.AddedShipmentAt()
	case deviceinfo.FieldCreateAt:
		return m.AddedCreateAt()
	case deviceinfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case deviceinfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deviceinfo.FieldPowerComsuption:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPowerComsuption(v)
		return nil
	case deviceinfo.FieldShipmentAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipmentAt(v)
		return nil
	case deviceinfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case deviceinfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case deviceinfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DeviceInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceInfoMutation) ResetField(name string) error {
	switch name {
	case deviceinfo.FieldType:
		m.ResetType()
		return nil
	case deviceinfo.FieldManufacturer:
		m.ResetManufacturer()
		return nil
	case deviceinfo.FieldPowerComsuption:
		m.ResetPowerComsuption()
		return nil
	case deviceinfo.FieldShipmentAt:
		m.ResetShipmentAt()
		return nil
	case deviceinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case deviceinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case deviceinfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown DeviceInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DeviceInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DeviceInfo edge %s", name)
}

// FeeMutation represents an operation that mutates the Fee nodes in the graph.
type FeeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	fee_type_id   *uuid.UUID
	value         *uint64
	addvalue      *uint64
	create_at     *uint32
	addcreate_at  *uint32
	update_at     *uint32
	addupdate_at  *uint32
	delete_at     *uint32
	adddelete_at  *uint32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Fee, error)
	predicates    []predicate.Fee
}

var _ ent.Mutation = (*FeeMutation)(nil)

// feeOption allows management of the mutation configuration using functional options.
type feeOption func(*FeeMutation)

// newFeeMutation creates new mutation for the Fee entity.
func newFeeMutation(c config, op Op, opts ...feeOption) *FeeMutation {
	m := &FeeMutation{
		config:        c,
		op:            op,
		typ:           TypeFee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeeID sets the ID field of the mutation.
func withFeeID(id uuid.UUID) feeOption {
	return func(m *FeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Fee
		)
		m.oldValue = func(ctx context.Context) (*Fee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFee sets the old Fee of the mutation.
func withFee(node *Fee) feeOption {
	return func(m *FeeMutation) {
		m.oldValue = func(context.Context) (*Fee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Fee entities.
func (m *FeeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *FeeMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *FeeMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Fee entity.
// If the Fee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *FeeMutation) ResetAppID() {
	m.app_id = nil
}

// SetFeeTypeID sets the "fee_type_id" field.
func (m *FeeMutation) SetFeeTypeID(u uuid.UUID) {
	m.fee_type_id = &u
}

// FeeTypeID returns the value of the "fee_type_id" field in the mutation.
func (m *FeeMutation) FeeTypeID() (r uuid.UUID, exists bool) {
	v := m.fee_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeTypeID returns the old "fee_type_id" field's value of the Fee entity.
// If the Fee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeMutation) OldFeeTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeTypeID: %w", err)
	}
	return oldValue.FeeTypeID, nil
}

// ResetFeeTypeID resets all changes to the "fee_type_id" field.
func (m *FeeMutation) ResetFeeTypeID() {
	m.fee_type_id = nil
}

// SetValue sets the "value" field.
func (m *FeeMutation) SetValue(u uint64) {
	m.value = &u
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *FeeMutation) Value() (r uint64, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Fee entity.
// If the Fee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeMutation) OldValue(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds u to the "value" field.
func (m *FeeMutation) AddValue(u uint64) {
	if m.addvalue != nil {
		*m.addvalue += u
	} else {
		m.addvalue = &u
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *FeeMutation) AddedValue() (r uint64, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *FeeMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetCreateAt sets the "create_at" field.
func (m *FeeMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *FeeMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Fee entity.
// If the Fee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *FeeMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *FeeMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *FeeMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *FeeMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *FeeMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Fee entity.
// If the Fee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *FeeMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *FeeMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *FeeMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *FeeMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *FeeMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the Fee entity.
// If the Fee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *FeeMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *FeeMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *FeeMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the FeeMutation builder.
func (m *FeeMutation) Where(ps ...predicate.Fee) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Fee).
func (m *FeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, fee.FieldAppID)
	}
	if m.fee_type_id != nil {
		fields = append(fields, fee.FieldFeeTypeID)
	}
	if m.value != nil {
		fields = append(fields, fee.FieldValue)
	}
	if m.create_at != nil {
		fields = append(fields, fee.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, fee.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, fee.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fee.FieldAppID:
		return m.AppID()
	case fee.FieldFeeTypeID:
		return m.FeeTypeID()
	case fee.FieldValue:
		return m.Value()
	case fee.FieldCreateAt:
		return m.CreateAt()
	case fee.FieldUpdateAt:
		return m.UpdateAt()
	case fee.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fee.FieldAppID:
		return m.OldAppID(ctx)
	case fee.FieldFeeTypeID:
		return m.OldFeeTypeID(ctx)
	case fee.FieldValue:
		return m.OldValue(ctx)
	case fee.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case fee.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case fee.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown Fee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fee.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case fee.FieldFeeTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeTypeID(v)
		return nil
	case fee.FieldValue:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case fee.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case fee.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case fee.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown Fee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeeMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, fee.FieldValue)
	}
	if m.addcreate_at != nil {
		fields = append(fields, fee.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, fee.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, fee.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fee.FieldValue:
		return m.AddedValue()
	case fee.FieldCreateAt:
		return m.AddedCreateAt()
	case fee.FieldUpdateAt:
		return m.AddedUpdateAt()
	case fee.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fee.FieldValue:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	case fee.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case fee.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case fee.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown Fee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeeMutation) ResetField(name string) error {
	switch name {
	case fee.FieldAppID:
		m.ResetAppID()
		return nil
	case fee.FieldFeeTypeID:
		m.ResetFeeTypeID()
		return nil
	case fee.FieldValue:
		m.ResetValue()
		return nil
	case fee.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case fee.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case fee.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown Fee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Fee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Fee edge %s", name)
}

// FeeTypeMutation represents an operation that mutates the FeeType nodes in the graph.
type FeeTypeMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	fee_type        *string
	fee_description *string
	pay_type        *feetype.PayType
	create_at       *uint32
	addcreate_at    *uint32
	update_at       *uint32
	addupdate_at    *uint32
	delete_at       *uint32
	adddelete_at    *uint32
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*FeeType, error)
	predicates      []predicate.FeeType
}

var _ ent.Mutation = (*FeeTypeMutation)(nil)

// feetypeOption allows management of the mutation configuration using functional options.
type feetypeOption func(*FeeTypeMutation)

// newFeeTypeMutation creates new mutation for the FeeType entity.
func newFeeTypeMutation(c config, op Op, opts ...feetypeOption) *FeeTypeMutation {
	m := &FeeTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeFeeType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFeeTypeID sets the ID field of the mutation.
func withFeeTypeID(id uuid.UUID) feetypeOption {
	return func(m *FeeTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *FeeType
		)
		m.oldValue = func(ctx context.Context) (*FeeType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FeeType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFeeType sets the old FeeType of the mutation.
func withFeeType(node *FeeType) feetypeOption {
	return func(m *FeeTypeMutation) {
		m.oldValue = func(context.Context) (*FeeType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FeeTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FeeTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FeeType entities.
func (m *FeeTypeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FeeTypeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFeeType sets the "fee_type" field.
func (m *FeeTypeMutation) SetFeeType(s string) {
	m.fee_type = &s
}

// FeeType returns the value of the "fee_type" field in the mutation.
func (m *FeeTypeMutation) FeeType() (r string, exists bool) {
	v := m.fee_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeType returns the old "fee_type" field's value of the FeeType entity.
// If the FeeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeTypeMutation) OldFeeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeType: %w", err)
	}
	return oldValue.FeeType, nil
}

// ResetFeeType resets all changes to the "fee_type" field.
func (m *FeeTypeMutation) ResetFeeType() {
	m.fee_type = nil
}

// SetFeeDescription sets the "fee_description" field.
func (m *FeeTypeMutation) SetFeeDescription(s string) {
	m.fee_description = &s
}

// FeeDescription returns the value of the "fee_description" field in the mutation.
func (m *FeeTypeMutation) FeeDescription() (r string, exists bool) {
	v := m.fee_description
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeDescription returns the old "fee_description" field's value of the FeeType entity.
// If the FeeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeTypeMutation) OldFeeDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeDescription: %w", err)
	}
	return oldValue.FeeDescription, nil
}

// ResetFeeDescription resets all changes to the "fee_description" field.
func (m *FeeTypeMutation) ResetFeeDescription() {
	m.fee_description = nil
}

// SetPayType sets the "pay_type" field.
func (m *FeeTypeMutation) SetPayType(ft feetype.PayType) {
	m.pay_type = &ft
}

// PayType returns the value of the "pay_type" field in the mutation.
func (m *FeeTypeMutation) PayType() (r feetype.PayType, exists bool) {
	v := m.pay_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPayType returns the old "pay_type" field's value of the FeeType entity.
// If the FeeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeTypeMutation) OldPayType(ctx context.Context) (v feetype.PayType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPayType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPayType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayType: %w", err)
	}
	return oldValue.PayType, nil
}

// ResetPayType resets all changes to the "pay_type" field.
func (m *FeeTypeMutation) ResetPayType() {
	m.pay_type = nil
}

// SetCreateAt sets the "create_at" field.
func (m *FeeTypeMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *FeeTypeMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the FeeType entity.
// If the FeeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeTypeMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *FeeTypeMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *FeeTypeMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *FeeTypeMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *FeeTypeMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *FeeTypeMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the FeeType entity.
// If the FeeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeTypeMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *FeeTypeMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *FeeTypeMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *FeeTypeMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *FeeTypeMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *FeeTypeMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the FeeType entity.
// If the FeeType object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FeeTypeMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *FeeTypeMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *FeeTypeMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *FeeTypeMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the FeeTypeMutation builder.
func (m *FeeTypeMutation) Where(ps ...predicate.FeeType) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FeeTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FeeType).
func (m *FeeTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FeeTypeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.fee_type != nil {
		fields = append(fields, feetype.FieldFeeType)
	}
	if m.fee_description != nil {
		fields = append(fields, feetype.FieldFeeDescription)
	}
	if m.pay_type != nil {
		fields = append(fields, feetype.FieldPayType)
	}
	if m.create_at != nil {
		fields = append(fields, feetype.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, feetype.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, feetype.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FeeTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case feetype.FieldFeeType:
		return m.FeeType()
	case feetype.FieldFeeDescription:
		return m.FeeDescription()
	case feetype.FieldPayType:
		return m.PayType()
	case feetype.FieldCreateAt:
		return m.CreateAt()
	case feetype.FieldUpdateAt:
		return m.UpdateAt()
	case feetype.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FeeTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case feetype.FieldFeeType:
		return m.OldFeeType(ctx)
	case feetype.FieldFeeDescription:
		return m.OldFeeDescription(ctx)
	case feetype.FieldPayType:
		return m.OldPayType(ctx)
	case feetype.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case feetype.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case feetype.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown FeeType field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeeTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case feetype.FieldFeeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeType(v)
		return nil
	case feetype.FieldFeeDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeDescription(v)
		return nil
	case feetype.FieldPayType:
		v, ok := value.(feetype.PayType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayType(v)
		return nil
	case feetype.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case feetype.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case feetype.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown FeeType field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FeeTypeMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, feetype.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, feetype.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, feetype.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FeeTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case feetype.FieldCreateAt:
		return m.AddedCreateAt()
	case feetype.FieldUpdateAt:
		return m.AddedUpdateAt()
	case feetype.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FeeTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case feetype.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case feetype.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case feetype.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown FeeType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FeeTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FeeTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FeeTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FeeType nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FeeTypeMutation) ResetField(name string) error {
	switch name {
	case feetype.FieldFeeType:
		m.ResetFeeType()
		return nil
	case feetype.FieldFeeDescription:
		m.ResetFeeDescription()
		return nil
	case feetype.FieldPayType:
		m.ResetPayType()
		return nil
	case feetype.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case feetype.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case feetype.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown FeeType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FeeTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FeeTypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FeeTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FeeTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FeeTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FeeTypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FeeTypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FeeType unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FeeTypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FeeType edge %s", name)
}

// GoodCommentMutation represents an operation that mutates the GoodComment nodes in the graph.
type GoodCommentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	reply_to_id   *uuid.UUID
	user_id       *uuid.UUID
	app_id        *uuid.UUID
	good_id       *uuid.UUID
	order_id      *uuid.UUID
	content       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GoodComment, error)
	predicates    []predicate.GoodComment
}

var _ ent.Mutation = (*GoodCommentMutation)(nil)

// goodcommentOption allows management of the mutation configuration using functional options.
type goodcommentOption func(*GoodCommentMutation)

// newGoodCommentMutation creates new mutation for the GoodComment entity.
func newGoodCommentMutation(c config, op Op, opts ...goodcommentOption) *GoodCommentMutation {
	m := &GoodCommentMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodCommentID sets the ID field of the mutation.
func withGoodCommentID(id uuid.UUID) goodcommentOption {
	return func(m *GoodCommentMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodComment
		)
		m.oldValue = func(ctx context.Context) (*GoodComment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodComment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodComment sets the old GoodComment of the mutation.
func withGoodComment(node *GoodComment) goodcommentOption {
	return func(m *GoodCommentMutation) {
		m.oldValue = func(context.Context) (*GoodComment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodCommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodCommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodComment entities.
func (m *GoodCommentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodCommentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetReplyToID sets the "reply_to_id" field.
func (m *GoodCommentMutation) SetReplyToID(u uuid.UUID) {
	m.reply_to_id = &u
}

// ReplyToID returns the value of the "reply_to_id" field in the mutation.
func (m *GoodCommentMutation) ReplyToID() (r uuid.UUID, exists bool) {
	v := m.reply_to_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReplyToID returns the old "reply_to_id" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldReplyToID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReplyToID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReplyToID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReplyToID: %w", err)
	}
	return oldValue.ReplyToID, nil
}

// ClearReplyToID clears the value of the "reply_to_id" field.
func (m *GoodCommentMutation) ClearReplyToID() {
	m.reply_to_id = nil
	m.clearedFields[goodcomment.FieldReplyToID] = struct{}{}
}

// ReplyToIDCleared returns if the "reply_to_id" field was cleared in this mutation.
func (m *GoodCommentMutation) ReplyToIDCleared() bool {
	_, ok := m.clearedFields[goodcomment.FieldReplyToID]
	return ok
}

// ResetReplyToID resets all changes to the "reply_to_id" field.
func (m *GoodCommentMutation) ResetReplyToID() {
	m.reply_to_id = nil
	delete(m.clearedFields, goodcomment.FieldReplyToID)
}

// SetUserID sets the "user_id" field.
func (m *GoodCommentMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GoodCommentMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GoodCommentMutation) ResetUserID() {
	m.user_id = nil
}

// SetAppID sets the "app_id" field.
func (m *GoodCommentMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *GoodCommentMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *GoodCommentMutation) ResetAppID() {
	m.app_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *GoodCommentMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodCommentMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodCommentMutation) ResetGoodID() {
	m.good_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *GoodCommentMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *GoodCommentMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *GoodCommentMutation) ResetOrderID() {
	m.order_id = nil
}

// SetContent sets the "content" field.
func (m *GoodCommentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *GoodCommentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *GoodCommentMutation) ResetContent() {
	m.content = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodCommentMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodCommentMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *GoodCommentMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodCommentMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodCommentMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodCommentMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodCommentMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *GoodCommentMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodCommentMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodCommentMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodCommentMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodCommentMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodComment entity.
// If the GoodComment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodCommentMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *GoodCommentMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodCommentMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodCommentMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodCommentMutation builder.
func (m *GoodCommentMutation) Where(ps ...predicate.GoodComment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodCommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodComment).
func (m *GoodCommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodCommentMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.reply_to_id != nil {
		fields = append(fields, goodcomment.FieldReplyToID)
	}
	if m.user_id != nil {
		fields = append(fields, goodcomment.FieldUserID)
	}
	if m.app_id != nil {
		fields = append(fields, goodcomment.FieldAppID)
	}
	if m.good_id != nil {
		fields = append(fields, goodcomment.FieldGoodID)
	}
	if m.order_id != nil {
		fields = append(fields, goodcomment.FieldOrderID)
	}
	if m.content != nil {
		fields = append(fields, goodcomment.FieldContent)
	}
	if m.create_at != nil {
		fields = append(fields, goodcomment.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodcomment.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodcomment.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodCommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodcomment.FieldReplyToID:
		return m.ReplyToID()
	case goodcomment.FieldUserID:
		return m.UserID()
	case goodcomment.FieldAppID:
		return m.AppID()
	case goodcomment.FieldGoodID:
		return m.GoodID()
	case goodcomment.FieldOrderID:
		return m.OrderID()
	case goodcomment.FieldContent:
		return m.Content()
	case goodcomment.FieldCreateAt:
		return m.CreateAt()
	case goodcomment.FieldUpdateAt:
		return m.UpdateAt()
	case goodcomment.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodCommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodcomment.FieldReplyToID:
		return m.OldReplyToID(ctx)
	case goodcomment.FieldUserID:
		return m.OldUserID(ctx)
	case goodcomment.FieldAppID:
		return m.OldAppID(ctx)
	case goodcomment.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodcomment.FieldOrderID:
		return m.OldOrderID(ctx)
	case goodcomment.FieldContent:
		return m.OldContent(ctx)
	case goodcomment.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodcomment.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodcomment.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodComment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodCommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodcomment.FieldReplyToID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReplyToID(v)
		return nil
	case goodcomment.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case goodcomment.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case goodcomment.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodcomment.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case goodcomment.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case goodcomment.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodcomment.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodcomment.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodComment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodCommentMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, goodcomment.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodcomment.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodcomment.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodCommentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodcomment.FieldCreateAt:
		return m.AddedCreateAt()
	case goodcomment.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodcomment.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodCommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodcomment.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodcomment.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodcomment.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodComment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodCommentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goodcomment.FieldReplyToID) {
		fields = append(fields, goodcomment.FieldReplyToID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodCommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodCommentMutation) ClearField(name string) error {
	switch name {
	case goodcomment.FieldReplyToID:
		m.ClearReplyToID()
		return nil
	}
	return fmt.Errorf("unknown GoodComment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodCommentMutation) ResetField(name string) error {
	switch name {
	case goodcomment.FieldReplyToID:
		m.ResetReplyToID()
		return nil
	case goodcomment.FieldUserID:
		m.ResetUserID()
		return nil
	case goodcomment.FieldAppID:
		m.ResetAppID()
		return nil
	case goodcomment.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodcomment.FieldOrderID:
		m.ResetOrderID()
		return nil
	case goodcomment.FieldContent:
		m.ResetContent()
		return nil
	case goodcomment.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodcomment.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodcomment.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodComment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodCommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodCommentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodCommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodCommentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodCommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodCommentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodCommentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodComment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodCommentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodComment edge %s", name)
}

// GoodExtraInfoMutation represents an operation that mutates the GoodExtraInfo nodes in the graph.
type GoodExtraInfoMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	good_id       *uuid.UUID
	posters       *[]string
	labels        *[]string
	out_sale      *bool
	pre_sale      *bool
	vote_count    *uint32
	addvote_count *uint32
	rating        *float32
	addrating     *float32
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GoodExtraInfo, error)
	predicates    []predicate.GoodExtraInfo
}

var _ ent.Mutation = (*GoodExtraInfoMutation)(nil)

// goodextrainfoOption allows management of the mutation configuration using functional options.
type goodextrainfoOption func(*GoodExtraInfoMutation)

// newGoodExtraInfoMutation creates new mutation for the GoodExtraInfo entity.
func newGoodExtraInfoMutation(c config, op Op, opts ...goodextrainfoOption) *GoodExtraInfoMutation {
	m := &GoodExtraInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodExtraInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodExtraInfoID sets the ID field of the mutation.
func withGoodExtraInfoID(id uuid.UUID) goodextrainfoOption {
	return func(m *GoodExtraInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodExtraInfo
		)
		m.oldValue = func(ctx context.Context) (*GoodExtraInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodExtraInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodExtraInfo sets the old GoodExtraInfo of the mutation.
func withGoodExtraInfo(node *GoodExtraInfo) goodextrainfoOption {
	return func(m *GoodExtraInfoMutation) {
		m.oldValue = func(context.Context) (*GoodExtraInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodExtraInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodExtraInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodExtraInfo entities.
func (m *GoodExtraInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodExtraInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGoodID sets the "good_id" field.
func (m *GoodExtraInfoMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodExtraInfoMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodExtraInfoMutation) ResetGoodID() {
	m.good_id = nil
}

// SetPosters sets the "posters" field.
func (m *GoodExtraInfoMutation) SetPosters(s []string) {
	m.posters = &s
}

// Posters returns the value of the "posters" field in the mutation.
func (m *GoodExtraInfoMutation) Posters() (r []string, exists bool) {
	v := m.posters
	if v == nil {
		return
	}
	return *v, true
}

// OldPosters returns the old "posters" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldPosters(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPosters is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPosters requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosters: %w", err)
	}
	return oldValue.Posters, nil
}

// ResetPosters resets all changes to the "posters" field.
func (m *GoodExtraInfoMutation) ResetPosters() {
	m.posters = nil
}

// SetLabels sets the "labels" field.
func (m *GoodExtraInfoMutation) SetLabels(s []string) {
	m.labels = &s
}

// Labels returns the value of the "labels" field in the mutation.
func (m *GoodExtraInfoMutation) Labels() (r []string, exists bool) {
	v := m.labels
	if v == nil {
		return
	}
	return *v, true
}

// OldLabels returns the old "labels" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldLabels(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLabels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLabels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabels: %w", err)
	}
	return oldValue.Labels, nil
}

// ResetLabels resets all changes to the "labels" field.
func (m *GoodExtraInfoMutation) ResetLabels() {
	m.labels = nil
}

// SetOutSale sets the "out_sale" field.
func (m *GoodExtraInfoMutation) SetOutSale(b bool) {
	m.out_sale = &b
}

// OutSale returns the value of the "out_sale" field in the mutation.
func (m *GoodExtraInfoMutation) OutSale() (r bool, exists bool) {
	v := m.out_sale
	if v == nil {
		return
	}
	return *v, true
}

// OldOutSale returns the old "out_sale" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldOutSale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOutSale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOutSale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutSale: %w", err)
	}
	return oldValue.OutSale, nil
}

// ResetOutSale resets all changes to the "out_sale" field.
func (m *GoodExtraInfoMutation) ResetOutSale() {
	m.out_sale = nil
}

// SetPreSale sets the "pre_sale" field.
func (m *GoodExtraInfoMutation) SetPreSale(b bool) {
	m.pre_sale = &b
}

// PreSale returns the value of the "pre_sale" field in the mutation.
func (m *GoodExtraInfoMutation) PreSale() (r bool, exists bool) {
	v := m.pre_sale
	if v == nil {
		return
	}
	return *v, true
}

// OldPreSale returns the old "pre_sale" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldPreSale(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPreSale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPreSale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPreSale: %w", err)
	}
	return oldValue.PreSale, nil
}

// ResetPreSale resets all changes to the "pre_sale" field.
func (m *GoodExtraInfoMutation) ResetPreSale() {
	m.pre_sale = nil
}

// SetVoteCount sets the "vote_count" field.
func (m *GoodExtraInfoMutation) SetVoteCount(u uint32) {
	m.vote_count = &u
	m.addvote_count = nil
}

// VoteCount returns the value of the "vote_count" field in the mutation.
func (m *GoodExtraInfoMutation) VoteCount() (r uint32, exists bool) {
	v := m.vote_count
	if v == nil {
		return
	}
	return *v, true
}

// OldVoteCount returns the old "vote_count" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldVoteCount(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVoteCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVoteCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoteCount: %w", err)
	}
	return oldValue.VoteCount, nil
}

// AddVoteCount adds u to the "vote_count" field.
func (m *GoodExtraInfoMutation) AddVoteCount(u uint32) {
	if m.addvote_count != nil {
		*m.addvote_count += u
	} else {
		m.addvote_count = &u
	}
}

// AddedVoteCount returns the value that was added to the "vote_count" field in this mutation.
func (m *GoodExtraInfoMutation) AddedVoteCount() (r uint32, exists bool) {
	v := m.addvote_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetVoteCount resets all changes to the "vote_count" field.
func (m *GoodExtraInfoMutation) ResetVoteCount() {
	m.vote_count = nil
	m.addvote_count = nil
}

// SetRating sets the "rating" field.
func (m *GoodExtraInfoMutation) SetRating(f float32) {
	m.rating = &f
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *GoodExtraInfoMutation) Rating() (r float32, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldRating(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds f to the "rating" field.
func (m *GoodExtraInfoMutation) AddRating(f float32) {
	if m.addrating != nil {
		*m.addrating += f
	} else {
		m.addrating = &f
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *GoodExtraInfoMutation) AddedRating() (r float32, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *GoodExtraInfoMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodExtraInfoMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodExtraInfoMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *GoodExtraInfoMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodExtraInfoMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodExtraInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodExtraInfoMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodExtraInfoMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *GoodExtraInfoMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodExtraInfoMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodExtraInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodExtraInfoMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodExtraInfoMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodExtraInfo entity.
// If the GoodExtraInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodExtraInfoMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *GoodExtraInfoMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodExtraInfoMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodExtraInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodExtraInfoMutation builder.
func (m *GoodExtraInfoMutation) Where(ps ...predicate.GoodExtraInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodExtraInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodExtraInfo).
func (m *GoodExtraInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodExtraInfoMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.good_id != nil {
		fields = append(fields, goodextrainfo.FieldGoodID)
	}
	if m.posters != nil {
		fields = append(fields, goodextrainfo.FieldPosters)
	}
	if m.labels != nil {
		fields = append(fields, goodextrainfo.FieldLabels)
	}
	if m.out_sale != nil {
		fields = append(fields, goodextrainfo.FieldOutSale)
	}
	if m.pre_sale != nil {
		fields = append(fields, goodextrainfo.FieldPreSale)
	}
	if m.vote_count != nil {
		fields = append(fields, goodextrainfo.FieldVoteCount)
	}
	if m.rating != nil {
		fields = append(fields, goodextrainfo.FieldRating)
	}
	if m.create_at != nil {
		fields = append(fields, goodextrainfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodextrainfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodextrainfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodExtraInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodextrainfo.FieldGoodID:
		return m.GoodID()
	case goodextrainfo.FieldPosters:
		return m.Posters()
	case goodextrainfo.FieldLabels:
		return m.Labels()
	case goodextrainfo.FieldOutSale:
		return m.OutSale()
	case goodextrainfo.FieldPreSale:
		return m.PreSale()
	case goodextrainfo.FieldVoteCount:
		return m.VoteCount()
	case goodextrainfo.FieldRating:
		return m.Rating()
	case goodextrainfo.FieldCreateAt:
		return m.CreateAt()
	case goodextrainfo.FieldUpdateAt:
		return m.UpdateAt()
	case goodextrainfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodExtraInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodextrainfo.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodextrainfo.FieldPosters:
		return m.OldPosters(ctx)
	case goodextrainfo.FieldLabels:
		return m.OldLabels(ctx)
	case goodextrainfo.FieldOutSale:
		return m.OldOutSale(ctx)
	case goodextrainfo.FieldPreSale:
		return m.OldPreSale(ctx)
	case goodextrainfo.FieldVoteCount:
		return m.OldVoteCount(ctx)
	case goodextrainfo.FieldRating:
		return m.OldRating(ctx)
	case goodextrainfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodextrainfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodextrainfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodExtraInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodExtraInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodextrainfo.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodextrainfo.FieldPosters:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosters(v)
		return nil
	case goodextrainfo.FieldLabels:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabels(v)
		return nil
	case goodextrainfo.FieldOutSale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutSale(v)
		return nil
	case goodextrainfo.FieldPreSale:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPreSale(v)
		return nil
	case goodextrainfo.FieldVoteCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoteCount(v)
		return nil
	case goodextrainfo.FieldRating:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case goodextrainfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodextrainfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodextrainfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodExtraInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodExtraInfoMutation) AddedFields() []string {
	var fields []string
	if m.addvote_count != nil {
		fields = append(fields, goodextrainfo.FieldVoteCount)
	}
	if m.addrating != nil {
		fields = append(fields, goodextrainfo.FieldRating)
	}
	if m.addcreate_at != nil {
		fields = append(fields, goodextrainfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodextrainfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodextrainfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodExtraInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodextrainfo.FieldVoteCount:
		return m.AddedVoteCount()
	case goodextrainfo.FieldRating:
		return m.AddedRating()
	case goodextrainfo.FieldCreateAt:
		return m.AddedCreateAt()
	case goodextrainfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodextrainfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodExtraInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodextrainfo.FieldVoteCount:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVoteCount(v)
		return nil
	case goodextrainfo.FieldRating:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	case goodextrainfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodextrainfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodextrainfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodExtraInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodExtraInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodExtraInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodExtraInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodExtraInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodExtraInfoMutation) ResetField(name string) error {
	switch name {
	case goodextrainfo.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodextrainfo.FieldPosters:
		m.ResetPosters()
		return nil
	case goodextrainfo.FieldLabels:
		m.ResetLabels()
		return nil
	case goodextrainfo.FieldOutSale:
		m.ResetOutSale()
		return nil
	case goodextrainfo.FieldPreSale:
		m.ResetPreSale()
		return nil
	case goodextrainfo.FieldVoteCount:
		m.ResetVoteCount()
		return nil
	case goodextrainfo.FieldRating:
		m.ResetRating()
		return nil
	case goodextrainfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodextrainfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodextrainfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodExtraInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodExtraInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodExtraInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodExtraInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodExtraInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodExtraInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodExtraInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodExtraInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodExtraInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodExtraInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodExtraInfo edge %s", name)
}

// GoodInfoMutation represents an operation that mutates the GoodInfo nodes in the graph.
type GoodInfoMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	device_info_id        *uuid.UUID
	separate_fee          *bool
	unit_power            *int32
	addunit_power         *int32
	duration_days         *int32
	addduration_days      *int32
	coin_info_id          *uuid.UUID
	actuals               *bool
	delivery_at           *uint32
	adddelivery_at        *uint32
	inherit_from_good_id  *uuid.UUID
	vendor_location_id    *uuid.UUID
	price                 *uint64
	addprice              *uint64
	price_currency        *uuid.UUID
	benefit_type          *goodinfo.BenefitType
	classic               *bool
	title                 *string
	unit                  *string
	support_coin_type_ids *[]uuid.UUID
	fee_ids               *[]uuid.UUID
	total                 *int32
	addtotal              *int32
	create_at             *uint32
	addcreate_at          *uint32
	update_at             *uint32
	addupdate_at          *uint32
	delete_at             *uint32
	adddelete_at          *uint32
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*GoodInfo, error)
	predicates            []predicate.GoodInfo
}

var _ ent.Mutation = (*GoodInfoMutation)(nil)

// goodinfoOption allows management of the mutation configuration using functional options.
type goodinfoOption func(*GoodInfoMutation)

// newGoodInfoMutation creates new mutation for the GoodInfo entity.
func newGoodInfoMutation(c config, op Op, opts ...goodinfoOption) *GoodInfoMutation {
	m := &GoodInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodInfoID sets the ID field of the mutation.
func withGoodInfoID(id uuid.UUID) goodinfoOption {
	return func(m *GoodInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodInfo
		)
		m.oldValue = func(ctx context.Context) (*GoodInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodInfo sets the old GoodInfo of the mutation.
func withGoodInfo(node *GoodInfo) goodinfoOption {
	return func(m *GoodInfoMutation) {
		m.oldValue = func(context.Context) (*GoodInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodInfo entities.
func (m *GoodInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDeviceInfoID sets the "device_info_id" field.
func (m *GoodInfoMutation) SetDeviceInfoID(u uuid.UUID) {
	m.device_info_id = &u
}

// DeviceInfoID returns the value of the "device_info_id" field in the mutation.
func (m *GoodInfoMutation) DeviceInfoID() (r uuid.UUID, exists bool) {
	v := m.device_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceInfoID returns the old "device_info_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeviceInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeviceInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeviceInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceInfoID: %w", err)
	}
	return oldValue.DeviceInfoID, nil
}

// ResetDeviceInfoID resets all changes to the "device_info_id" field.
func (m *GoodInfoMutation) ResetDeviceInfoID() {
	m.device_info_id = nil
}

// SetSeparateFee sets the "separate_fee" field.
func (m *GoodInfoMutation) SetSeparateFee(b bool) {
	m.separate_fee = &b
}

// SeparateFee returns the value of the "separate_fee" field in the mutation.
func (m *GoodInfoMutation) SeparateFee() (r bool, exists bool) {
	v := m.separate_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldSeparateFee returns the old "separate_fee" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldSeparateFee(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeparateFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeparateFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeparateFee: %w", err)
	}
	return oldValue.SeparateFee, nil
}

// ResetSeparateFee resets all changes to the "separate_fee" field.
func (m *GoodInfoMutation) ResetSeparateFee() {
	m.separate_fee = nil
}

// SetUnitPower sets the "unit_power" field.
func (m *GoodInfoMutation) SetUnitPower(i int32) {
	m.unit_power = &i
	m.addunit_power = nil
}

// UnitPower returns the value of the "unit_power" field in the mutation.
func (m *GoodInfoMutation) UnitPower() (r int32, exists bool) {
	v := m.unit_power
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitPower returns the old "unit_power" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldUnitPower(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitPower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitPower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitPower: %w", err)
	}
	return oldValue.UnitPower, nil
}

// AddUnitPower adds i to the "unit_power" field.
func (m *GoodInfoMutation) AddUnitPower(i int32) {
	if m.addunit_power != nil {
		*m.addunit_power += i
	} else {
		m.addunit_power = &i
	}
}

// AddedUnitPower returns the value that was added to the "unit_power" field in this mutation.
func (m *GoodInfoMutation) AddedUnitPower() (r int32, exists bool) {
	v := m.addunit_power
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnitPower resets all changes to the "unit_power" field.
func (m *GoodInfoMutation) ResetUnitPower() {
	m.unit_power = nil
	m.addunit_power = nil
}

// SetDurationDays sets the "duration_days" field.
func (m *GoodInfoMutation) SetDurationDays(i int32) {
	m.duration_days = &i
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *GoodInfoMutation) DurationDays() (r int32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDurationDays(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds i to the "duration_days" field.
func (m *GoodInfoMutation) AddDurationDays(i int32) {
	if m.addduration_days != nil {
		*m.addduration_days += i
	} else {
		m.addduration_days = &i
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *GoodInfoMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *GoodInfoMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
}

// SetCoinInfoID sets the "coin_info_id" field.
func (m *GoodInfoMutation) SetCoinInfoID(u uuid.UUID) {
	m.coin_info_id = &u
}

// CoinInfoID returns the value of the "coin_info_id" field in the mutation.
func (m *GoodInfoMutation) CoinInfoID() (r uuid.UUID, exists bool) {
	v := m.coin_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinInfoID returns the old "coin_info_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldCoinInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoinInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoinInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinInfoID: %w", err)
	}
	return oldValue.CoinInfoID, nil
}

// ResetCoinInfoID resets all changes to the "coin_info_id" field.
func (m *GoodInfoMutation) ResetCoinInfoID() {
	m.coin_info_id = nil
}

// SetActuals sets the "actuals" field.
func (m *GoodInfoMutation) SetActuals(b bool) {
	m.actuals = &b
}

// Actuals returns the value of the "actuals" field in the mutation.
func (m *GoodInfoMutation) Actuals() (r bool, exists bool) {
	v := m.actuals
	if v == nil {
		return
	}
	return *v, true
}

// OldActuals returns the old "actuals" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldActuals(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActuals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActuals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActuals: %w", err)
	}
	return oldValue.Actuals, nil
}

// ResetActuals resets all changes to the "actuals" field.
func (m *GoodInfoMutation) ResetActuals() {
	m.actuals = nil
}

// SetDeliveryAt sets the "delivery_at" field.
func (m *GoodInfoMutation) SetDeliveryAt(u uint32) {
	m.delivery_at = &u
	m.adddelivery_at = nil
}

// DeliveryAt returns the value of the "delivery_at" field in the mutation.
func (m *GoodInfoMutation) DeliveryAt() (r uint32, exists bool) {
	v := m.delivery_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveryAt returns the old "delivery_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeliveryAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeliveryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeliveryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveryAt: %w", err)
	}
	return oldValue.DeliveryAt, nil
}

// AddDeliveryAt adds u to the "delivery_at" field.
func (m *GoodInfoMutation) AddDeliveryAt(u uint32) {
	if m.adddelivery_at != nil {
		*m.adddelivery_at += u
	} else {
		m.adddelivery_at = &u
	}
}

// AddedDeliveryAt returns the value that was added to the "delivery_at" field in this mutation.
func (m *GoodInfoMutation) AddedDeliveryAt() (r uint32, exists bool) {
	v := m.adddelivery_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeliveryAt resets all changes to the "delivery_at" field.
func (m *GoodInfoMutation) ResetDeliveryAt() {
	m.delivery_at = nil
	m.adddelivery_at = nil
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (m *GoodInfoMutation) SetInheritFromGoodID(u uuid.UUID) {
	m.inherit_from_good_id = &u
}

// InheritFromGoodID returns the value of the "inherit_from_good_id" field in the mutation.
func (m *GoodInfoMutation) InheritFromGoodID() (r uuid.UUID, exists bool) {
	v := m.inherit_from_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInheritFromGoodID returns the old "inherit_from_good_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldInheritFromGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInheritFromGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInheritFromGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInheritFromGoodID: %w", err)
	}
	return oldValue.InheritFromGoodID, nil
}

// ResetInheritFromGoodID resets all changes to the "inherit_from_good_id" field.
func (m *GoodInfoMutation) ResetInheritFromGoodID() {
	m.inherit_from_good_id = nil
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (m *GoodInfoMutation) SetVendorLocationID(u uuid.UUID) {
	m.vendor_location_id = &u
}

// VendorLocationID returns the value of the "vendor_location_id" field in the mutation.
func (m *GoodInfoMutation) VendorLocationID() (r uuid.UUID, exists bool) {
	v := m.vendor_location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorLocationID returns the old "vendor_location_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldVendorLocationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVendorLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVendorLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorLocationID: %w", err)
	}
	return oldValue.VendorLocationID, nil
}

// ResetVendorLocationID resets all changes to the "vendor_location_id" field.
func (m *GoodInfoMutation) ResetVendorLocationID() {
	m.vendor_location_id = nil
}

// SetPrice sets the "price" field.
func (m *GoodInfoMutation) SetPrice(u uint64) {
	m.price = &u
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *GoodInfoMutation) Price() (r uint64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldPrice(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds u to the "price" field.
func (m *GoodInfoMutation) AddPrice(u uint64) {
	if m.addprice != nil {
		*m.addprice += u
	} else {
		m.addprice = &u
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *GoodInfoMutation) AddedPrice() (r uint64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *GoodInfoMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetPriceCurrency sets the "price_currency" field.
func (m *GoodInfoMutation) SetPriceCurrency(u uuid.UUID) {
	m.price_currency = &u
}

// PriceCurrency returns the value of the "price_currency" field in the mutation.
func (m *GoodInfoMutation) PriceCurrency() (r uuid.UUID, exists bool) {
	v := m.price_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceCurrency returns the old "price_currency" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldPriceCurrency(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPriceCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPriceCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceCurrency: %w", err)
	}
	return oldValue.PriceCurrency, nil
}

// ResetPriceCurrency resets all changes to the "price_currency" field.
func (m *GoodInfoMutation) ResetPriceCurrency() {
	m.price_currency = nil
}

// SetBenefitType sets the "benefit_type" field.
func (m *GoodInfoMutation) SetBenefitType(gt goodinfo.BenefitType) {
	m.benefit_type = &gt
}

// BenefitType returns the value of the "benefit_type" field in the mutation.
func (m *GoodInfoMutation) BenefitType() (r goodinfo.BenefitType, exists bool) {
	v := m.benefit_type
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitType returns the old "benefit_type" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldBenefitType(ctx context.Context) (v goodinfo.BenefitType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBenefitType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBenefitType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitType: %w", err)
	}
	return oldValue.BenefitType, nil
}

// ResetBenefitType resets all changes to the "benefit_type" field.
func (m *GoodInfoMutation) ResetBenefitType() {
	m.benefit_type = nil
}

// SetClassic sets the "classic" field.
func (m *GoodInfoMutation) SetClassic(b bool) {
	m.classic = &b
}

// Classic returns the value of the "classic" field in the mutation.
func (m *GoodInfoMutation) Classic() (r bool, exists bool) {
	v := m.classic
	if v == nil {
		return
	}
	return *v, true
}

// OldClassic returns the old "classic" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldClassic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClassic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClassic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassic: %w", err)
	}
	return oldValue.Classic, nil
}

// ResetClassic resets all changes to the "classic" field.
func (m *GoodInfoMutation) ResetClassic() {
	m.classic = nil
}

// SetTitle sets the "title" field.
func (m *GoodInfoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *GoodInfoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *GoodInfoMutation) ResetTitle() {
	m.title = nil
}

// SetUnit sets the "unit" field.
func (m *GoodInfoMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *GoodInfoMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *GoodInfoMutation) ResetUnit() {
	m.unit = nil
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (m *GoodInfoMutation) SetSupportCoinTypeIds(u []uuid.UUID) {
	m.support_coin_type_ids = &u
}

// SupportCoinTypeIds returns the value of the "support_coin_type_ids" field in the mutation.
func (m *GoodInfoMutation) SupportCoinTypeIds() (r []uuid.UUID, exists bool) {
	v := m.support_coin_type_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldSupportCoinTypeIds returns the old "support_coin_type_ids" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldSupportCoinTypeIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSupportCoinTypeIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSupportCoinTypeIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupportCoinTypeIds: %w", err)
	}
	return oldValue.SupportCoinTypeIds, nil
}

// ResetSupportCoinTypeIds resets all changes to the "support_coin_type_ids" field.
func (m *GoodInfoMutation) ResetSupportCoinTypeIds() {
	m.support_coin_type_ids = nil
}

// SetFeeIds sets the "fee_ids" field.
func (m *GoodInfoMutation) SetFeeIds(u []uuid.UUID) {
	m.fee_ids = &u
}

// FeeIds returns the value of the "fee_ids" field in the mutation.
func (m *GoodInfoMutation) FeeIds() (r []uuid.UUID, exists bool) {
	v := m.fee_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeIds returns the old "fee_ids" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldFeeIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFeeIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFeeIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeIds: %w", err)
	}
	return oldValue.FeeIds, nil
}

// ResetFeeIds resets all changes to the "fee_ids" field.
func (m *GoodInfoMutation) ResetFeeIds() {
	m.fee_ids = nil
}

// SetTotal sets the "total" field.
func (m *GoodInfoMutation) SetTotal(i int32) {
	m.total = &i
	m.addtotal = nil
}

// Total returns the value of the "total" field in the mutation.
func (m *GoodInfoMutation) Total() (r int32, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldTotal(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds i to the "total" field.
func (m *GoodInfoMutation) AddTotal(i int32) {
	if m.addtotal != nil {
		*m.addtotal += i
	} else {
		m.addtotal = &i
	}
}

// AddedTotal returns the value that was added to the "total" field in this mutation.
func (m *GoodInfoMutation) AddedTotal() (r int32, exists bool) {
	v := m.addtotal
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotal resets all changes to the "total" field.
func (m *GoodInfoMutation) ResetTotal() {
	m.total = nil
	m.addtotal = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodInfoMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodInfoMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *GoodInfoMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodInfoMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodInfoMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodInfoMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *GoodInfoMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodInfoMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodInfoMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodInfoMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *GoodInfoMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodInfoMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodInfoMutation builder.
func (m *GoodInfoMutation) Where(ps ...predicate.GoodInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodInfo).
func (m *GoodInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodInfoMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.device_info_id != nil {
		fields = append(fields, goodinfo.FieldDeviceInfoID)
	}
	if m.separate_fee != nil {
		fields = append(fields, goodinfo.FieldSeparateFee)
	}
	if m.unit_power != nil {
		fields = append(fields, goodinfo.FieldUnitPower)
	}
	if m.duration_days != nil {
		fields = append(fields, goodinfo.FieldDurationDays)
	}
	if m.coin_info_id != nil {
		fields = append(fields, goodinfo.FieldCoinInfoID)
	}
	if m.actuals != nil {
		fields = append(fields, goodinfo.FieldActuals)
	}
	if m.delivery_at != nil {
		fields = append(fields, goodinfo.FieldDeliveryAt)
	}
	if m.inherit_from_good_id != nil {
		fields = append(fields, goodinfo.FieldInheritFromGoodID)
	}
	if m.vendor_location_id != nil {
		fields = append(fields, goodinfo.FieldVendorLocationID)
	}
	if m.price != nil {
		fields = append(fields, goodinfo.FieldPrice)
	}
	if m.price_currency != nil {
		fields = append(fields, goodinfo.FieldPriceCurrency)
	}
	if m.benefit_type != nil {
		fields = append(fields, goodinfo.FieldBenefitType)
	}
	if m.classic != nil {
		fields = append(fields, goodinfo.FieldClassic)
	}
	if m.title != nil {
		fields = append(fields, goodinfo.FieldTitle)
	}
	if m.unit != nil {
		fields = append(fields, goodinfo.FieldUnit)
	}
	if m.support_coin_type_ids != nil {
		fields = append(fields, goodinfo.FieldSupportCoinTypeIds)
	}
	if m.fee_ids != nil {
		fields = append(fields, goodinfo.FieldFeeIds)
	}
	if m.total != nil {
		fields = append(fields, goodinfo.FieldTotal)
	}
	if m.create_at != nil {
		fields = append(fields, goodinfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodinfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodinfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		return m.DeviceInfoID()
	case goodinfo.FieldSeparateFee:
		return m.SeparateFee()
	case goodinfo.FieldUnitPower:
		return m.UnitPower()
	case goodinfo.FieldDurationDays:
		return m.DurationDays()
	case goodinfo.FieldCoinInfoID:
		return m.CoinInfoID()
	case goodinfo.FieldActuals:
		return m.Actuals()
	case goodinfo.FieldDeliveryAt:
		return m.DeliveryAt()
	case goodinfo.FieldInheritFromGoodID:
		return m.InheritFromGoodID()
	case goodinfo.FieldVendorLocationID:
		return m.VendorLocationID()
	case goodinfo.FieldPrice:
		return m.Price()
	case goodinfo.FieldPriceCurrency:
		return m.PriceCurrency()
	case goodinfo.FieldBenefitType:
		return m.BenefitType()
	case goodinfo.FieldClassic:
		return m.Classic()
	case goodinfo.FieldTitle:
		return m.Title()
	case goodinfo.FieldUnit:
		return m.Unit()
	case goodinfo.FieldSupportCoinTypeIds:
		return m.SupportCoinTypeIds()
	case goodinfo.FieldFeeIds:
		return m.FeeIds()
	case goodinfo.FieldTotal:
		return m.Total()
	case goodinfo.FieldCreateAt:
		return m.CreateAt()
	case goodinfo.FieldUpdateAt:
		return m.UpdateAt()
	case goodinfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		return m.OldDeviceInfoID(ctx)
	case goodinfo.FieldSeparateFee:
		return m.OldSeparateFee(ctx)
	case goodinfo.FieldUnitPower:
		return m.OldUnitPower(ctx)
	case goodinfo.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case goodinfo.FieldCoinInfoID:
		return m.OldCoinInfoID(ctx)
	case goodinfo.FieldActuals:
		return m.OldActuals(ctx)
	case goodinfo.FieldDeliveryAt:
		return m.OldDeliveryAt(ctx)
	case goodinfo.FieldInheritFromGoodID:
		return m.OldInheritFromGoodID(ctx)
	case goodinfo.FieldVendorLocationID:
		return m.OldVendorLocationID(ctx)
	case goodinfo.FieldPrice:
		return m.OldPrice(ctx)
	case goodinfo.FieldPriceCurrency:
		return m.OldPriceCurrency(ctx)
	case goodinfo.FieldBenefitType:
		return m.OldBenefitType(ctx)
	case goodinfo.FieldClassic:
		return m.OldClassic(ctx)
	case goodinfo.FieldTitle:
		return m.OldTitle(ctx)
	case goodinfo.FieldUnit:
		return m.OldUnit(ctx)
	case goodinfo.FieldSupportCoinTypeIds:
		return m.OldSupportCoinTypeIds(ctx)
	case goodinfo.FieldFeeIds:
		return m.OldFeeIds(ctx)
	case goodinfo.FieldTotal:
		return m.OldTotal(ctx)
	case goodinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodinfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceInfoID(v)
		return nil
	case goodinfo.FieldSeparateFee:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeparateFee(v)
		return nil
	case goodinfo.FieldUnitPower:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitPower(v)
		return nil
	case goodinfo.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case goodinfo.FieldCoinInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinInfoID(v)
		return nil
	case goodinfo.FieldActuals:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActuals(v)
		return nil
	case goodinfo.FieldDeliveryAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveryAt(v)
		return nil
	case goodinfo.FieldInheritFromGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInheritFromGoodID(v)
		return nil
	case goodinfo.FieldVendorLocationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorLocationID(v)
		return nil
	case goodinfo.FieldPrice:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case goodinfo.FieldPriceCurrency:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceCurrency(v)
		return nil
	case goodinfo.FieldBenefitType:
		v, ok := value.(goodinfo.BenefitType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitType(v)
		return nil
	case goodinfo.FieldClassic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassic(v)
		return nil
	case goodinfo.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case goodinfo.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case goodinfo.FieldSupportCoinTypeIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupportCoinTypeIds(v)
		return nil
	case goodinfo.FieldFeeIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeIds(v)
		return nil
	case goodinfo.FieldTotal:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case goodinfo.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodinfo.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodinfo.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodInfoMutation) AddedFields() []string {
	var fields []string
	if m.addunit_power != nil {
		fields = append(fields, goodinfo.FieldUnitPower)
	}
	if m.addduration_days != nil {
		fields = append(fields, goodinfo.FieldDurationDays)
	}
	if m.adddelivery_at != nil {
		fields = append(fields, goodinfo.FieldDeliveryAt)
	}
	if m.addprice != nil {
		fields = append(fields, goodinfo.FieldPrice)
	}
	if m.addtotal != nil {
		fields = append(fields, goodinfo.FieldTotal)
	}
	if m.addcreate_at != nil {
		fields = append(fields, goodinfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodinfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodinfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodinfo.FieldUnitPower:
		return m.AddedUnitPower()
	case goodinfo.FieldDurationDays:
		return m.AddedDurationDays()
	case goodinfo.FieldDeliveryAt:
		return m.AddedDeliveryAt()
	case goodinfo.FieldPrice:
		return m.AddedPrice()
	case goodinfo.FieldTotal:
		return m.AddedTotal()
	case goodinfo.FieldCreateAt:
		return m.AddedCreateAt()
	case goodinfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodinfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodinfo.FieldUnitPower:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitPower(v)
		return nil
	case goodinfo.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	case goodinfo.FieldDeliveryAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeliveryAt(v)
		return nil
	case goodinfo.FieldPrice:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case goodinfo.FieldTotal:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	case goodinfo.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodinfo.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodinfo.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodInfoMutation) ResetField(name string) error {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		m.ResetDeviceInfoID()
		return nil
	case goodinfo.FieldSeparateFee:
		m.ResetSeparateFee()
		return nil
	case goodinfo.FieldUnitPower:
		m.ResetUnitPower()
		return nil
	case goodinfo.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case goodinfo.FieldCoinInfoID:
		m.ResetCoinInfoID()
		return nil
	case goodinfo.FieldActuals:
		m.ResetActuals()
		return nil
	case goodinfo.FieldDeliveryAt:
		m.ResetDeliveryAt()
		return nil
	case goodinfo.FieldInheritFromGoodID:
		m.ResetInheritFromGoodID()
		return nil
	case goodinfo.FieldVendorLocationID:
		m.ResetVendorLocationID()
		return nil
	case goodinfo.FieldPrice:
		m.ResetPrice()
		return nil
	case goodinfo.FieldPriceCurrency:
		m.ResetPriceCurrency()
		return nil
	case goodinfo.FieldBenefitType:
		m.ResetBenefitType()
		return nil
	case goodinfo.FieldClassic:
		m.ResetClassic()
		return nil
	case goodinfo.FieldTitle:
		m.ResetTitle()
		return nil
	case goodinfo.FieldUnit:
		m.ResetUnit()
		return nil
	case goodinfo.FieldSupportCoinTypeIds:
		m.ResetSupportCoinTypeIds()
		return nil
	case goodinfo.FieldFeeIds:
		m.ResetFeeIds()
		return nil
	case goodinfo.FieldTotal:
		m.ResetTotal()
		return nil
	case goodinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodinfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodInfo edge %s", name)
}

// GoodRecommandMutation represents an operation that mutates the GoodRecommand nodes in the graph.
type GoodRecommandMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	good_id       *uuid.UUID
	content       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GoodRecommand, error)
	predicates    []predicate.GoodRecommand
}

var _ ent.Mutation = (*GoodRecommandMutation)(nil)

// goodrecommandOption allows management of the mutation configuration using functional options.
type goodrecommandOption func(*GoodRecommandMutation)

// newGoodRecommandMutation creates new mutation for the GoodRecommand entity.
func newGoodRecommandMutation(c config, op Op, opts ...goodrecommandOption) *GoodRecommandMutation {
	m := &GoodRecommandMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodRecommand,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodRecommandID sets the ID field of the mutation.
func withGoodRecommandID(id uuid.UUID) goodrecommandOption {
	return func(m *GoodRecommandMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodRecommand
		)
		m.oldValue = func(ctx context.Context) (*GoodRecommand, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodRecommand.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodRecommand sets the old GoodRecommand of the mutation.
func withGoodRecommand(node *GoodRecommand) goodrecommandOption {
	return func(m *GoodRecommandMutation) {
		m.oldValue = func(context.Context) (*GoodRecommand, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodRecommandMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodRecommandMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodRecommand entities.
func (m *GoodRecommandMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodRecommandMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetAppID sets the "app_id" field.
func (m *GoodRecommandMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *GoodRecommandMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *GoodRecommandMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *GoodRecommandMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GoodRecommandMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GoodRecommandMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *GoodRecommandMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodRecommandMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodRecommandMutation) ResetGoodID() {
	m.good_id = nil
}

// SetContent sets the "content" field.
func (m *GoodRecommandMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *GoodRecommandMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *GoodRecommandMutation) ResetContent() {
	m.content = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodRecommandMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodRecommandMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *GoodRecommandMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodRecommandMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodRecommandMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodRecommandMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodRecommandMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *GoodRecommandMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodRecommandMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodRecommandMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodRecommandMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodRecommandMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodRecommand entity.
// If the GoodRecommand object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodRecommandMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *GoodRecommandMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodRecommandMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodRecommandMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodRecommandMutation builder.
func (m *GoodRecommandMutation) Where(ps ...predicate.GoodRecommand) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodRecommandMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodRecommand).
func (m *GoodRecommandMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodRecommandMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.app_id != nil {
		fields = append(fields, goodrecommand.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, goodrecommand.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, goodrecommand.FieldGoodID)
	}
	if m.content != nil {
		fields = append(fields, goodrecommand.FieldContent)
	}
	if m.create_at != nil {
		fields = append(fields, goodrecommand.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodrecommand.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodrecommand.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodRecommandMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodrecommand.FieldAppID:
		return m.AppID()
	case goodrecommand.FieldUserID:
		return m.UserID()
	case goodrecommand.FieldGoodID:
		return m.GoodID()
	case goodrecommand.FieldContent:
		return m.Content()
	case goodrecommand.FieldCreateAt:
		return m.CreateAt()
	case goodrecommand.FieldUpdateAt:
		return m.UpdateAt()
	case goodrecommand.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodRecommandMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodrecommand.FieldAppID:
		return m.OldAppID(ctx)
	case goodrecommand.FieldUserID:
		return m.OldUserID(ctx)
	case goodrecommand.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodrecommand.FieldContent:
		return m.OldContent(ctx)
	case goodrecommand.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodrecommand.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodrecommand.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodRecommand field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodRecommandMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodrecommand.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case goodrecommand.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case goodrecommand.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodrecommand.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case goodrecommand.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodrecommand.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodrecommand.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodRecommand field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodRecommandMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, goodrecommand.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodrecommand.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodrecommand.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodRecommandMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodrecommand.FieldCreateAt:
		return m.AddedCreateAt()
	case goodrecommand.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodrecommand.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodRecommandMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodrecommand.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodrecommand.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodrecommand.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodRecommand numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodRecommandMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodRecommandMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodRecommandMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodRecommand nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodRecommandMutation) ResetField(name string) error {
	switch name {
	case goodrecommand.FieldAppID:
		m.ResetAppID()
		return nil
	case goodrecommand.FieldUserID:
		m.ResetUserID()
		return nil
	case goodrecommand.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodrecommand.FieldContent:
		m.ResetContent()
		return nil
	case goodrecommand.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodrecommand.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodrecommand.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodRecommand field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodRecommandMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodRecommandMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodRecommandMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodRecommandMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodRecommandMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodRecommandMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodRecommandMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodRecommand unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodRecommandMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodRecommand edge %s", name)
}

// GoodReviewMutation represents an operation that mutates the GoodReview nodes in the graph.
type GoodReviewMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	entity_type   *goodreview.EntityType
	reviewed_id   *uuid.UUID
	reviewer_id   *uuid.UUID
	state         *goodreview.State
	message       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GoodReview, error)
	predicates    []predicate.GoodReview
}

var _ ent.Mutation = (*GoodReviewMutation)(nil)

// goodreviewOption allows management of the mutation configuration using functional options.
type goodreviewOption func(*GoodReviewMutation)

// newGoodReviewMutation creates new mutation for the GoodReview entity.
func newGoodReviewMutation(c config, op Op, opts ...goodreviewOption) *GoodReviewMutation {
	m := &GoodReviewMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodReview,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodReviewID sets the ID field of the mutation.
func withGoodReviewID(id uuid.UUID) goodreviewOption {
	return func(m *GoodReviewMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodReview
		)
		m.oldValue = func(ctx context.Context) (*GoodReview, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodReview.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodReview sets the old GoodReview of the mutation.
func withGoodReview(node *GoodReview) goodreviewOption {
	return func(m *GoodReviewMutation) {
		m.oldValue = func(context.Context) (*GoodReview, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodReviewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodReviewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodReview entities.
func (m *GoodReviewMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodReviewMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEntityType sets the "entity_type" field.
func (m *GoodReviewMutation) SetEntityType(gt goodreview.EntityType) {
	m.entity_type = &gt
}

// EntityType returns the value of the "entity_type" field in the mutation.
func (m *GoodReviewMutation) EntityType() (r goodreview.EntityType, exists bool) {
	v := m.entity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEntityType returns the old "entity_type" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldEntityType(ctx context.Context) (v goodreview.EntityType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEntityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEntityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntityType: %w", err)
	}
	return oldValue.EntityType, nil
}

// ResetEntityType resets all changes to the "entity_type" field.
func (m *GoodReviewMutation) ResetEntityType() {
	m.entity_type = nil
}

// SetReviewedID sets the "reviewed_id" field.
func (m *GoodReviewMutation) SetReviewedID(u uuid.UUID) {
	m.reviewed_id = &u
}

// ReviewedID returns the value of the "reviewed_id" field in the mutation.
func (m *GoodReviewMutation) ReviewedID() (r uuid.UUID, exists bool) {
	v := m.reviewed_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewedID returns the old "reviewed_id" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldReviewedID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReviewedID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReviewedID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewedID: %w", err)
	}
	return oldValue.ReviewedID, nil
}

// ResetReviewedID resets all changes to the "reviewed_id" field.
func (m *GoodReviewMutation) ResetReviewedID() {
	m.reviewed_id = nil
}

// SetReviewerID sets the "reviewer_id" field.
func (m *GoodReviewMutation) SetReviewerID(u uuid.UUID) {
	m.reviewer_id = &u
}

// ReviewerID returns the value of the "reviewer_id" field in the mutation.
func (m *GoodReviewMutation) ReviewerID() (r uuid.UUID, exists bool) {
	v := m.reviewer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewerID returns the old "reviewer_id" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldReviewerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReviewerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReviewerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewerID: %w", err)
	}
	return oldValue.ReviewerID, nil
}

// ResetReviewerID resets all changes to the "reviewer_id" field.
func (m *GoodReviewMutation) ResetReviewerID() {
	m.reviewer_id = nil
}

// SetState sets the "state" field.
func (m *GoodReviewMutation) SetState(_go goodreview.State) {
	m.state = &_go
}

// State returns the value of the "state" field in the mutation.
func (m *GoodReviewMutation) State() (r goodreview.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldState(ctx context.Context) (v goodreview.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *GoodReviewMutation) ResetState() {
	m.state = nil
}

// SetMessage sets the "message" field.
func (m *GoodReviewMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *GoodReviewMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *GoodReviewMutation) ResetMessage() {
	m.message = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodReviewMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodReviewMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *GoodReviewMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodReviewMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodReviewMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodReviewMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodReviewMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *GoodReviewMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodReviewMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodReviewMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodReviewMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodReviewMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodReview entity.
// If the GoodReview object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodReviewMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *GoodReviewMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodReviewMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodReviewMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodReviewMutation builder.
func (m *GoodReviewMutation) Where(ps ...predicate.GoodReview) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodReviewMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodReview).
func (m *GoodReviewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodReviewMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.entity_type != nil {
		fields = append(fields, goodreview.FieldEntityType)
	}
	if m.reviewed_id != nil {
		fields = append(fields, goodreview.FieldReviewedID)
	}
	if m.reviewer_id != nil {
		fields = append(fields, goodreview.FieldReviewerID)
	}
	if m.state != nil {
		fields = append(fields, goodreview.FieldState)
	}
	if m.message != nil {
		fields = append(fields, goodreview.FieldMessage)
	}
	if m.create_at != nil {
		fields = append(fields, goodreview.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodreview.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodreview.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodReviewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodreview.FieldEntityType:
		return m.EntityType()
	case goodreview.FieldReviewedID:
		return m.ReviewedID()
	case goodreview.FieldReviewerID:
		return m.ReviewerID()
	case goodreview.FieldState:
		return m.State()
	case goodreview.FieldMessage:
		return m.Message()
	case goodreview.FieldCreateAt:
		return m.CreateAt()
	case goodreview.FieldUpdateAt:
		return m.UpdateAt()
	case goodreview.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodReviewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodreview.FieldEntityType:
		return m.OldEntityType(ctx)
	case goodreview.FieldReviewedID:
		return m.OldReviewedID(ctx)
	case goodreview.FieldReviewerID:
		return m.OldReviewerID(ctx)
	case goodreview.FieldState:
		return m.OldState(ctx)
	case goodreview.FieldMessage:
		return m.OldMessage(ctx)
	case goodreview.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodreview.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodreview.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodReview field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodReviewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodreview.FieldEntityType:
		v, ok := value.(goodreview.EntityType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntityType(v)
		return nil
	case goodreview.FieldReviewedID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewedID(v)
		return nil
	case goodreview.FieldReviewerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewerID(v)
		return nil
	case goodreview.FieldState:
		v, ok := value.(goodreview.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case goodreview.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case goodreview.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodreview.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodreview.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodReview field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodReviewMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, goodreview.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodreview.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodreview.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodReviewMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodreview.FieldCreateAt:
		return m.AddedCreateAt()
	case goodreview.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodreview.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodReviewMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodreview.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodreview.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodreview.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodReview numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodReviewMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodReviewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodReviewMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodReview nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodReviewMutation) ResetField(name string) error {
	switch name {
	case goodreview.FieldEntityType:
		m.ResetEntityType()
		return nil
	case goodreview.FieldReviewedID:
		m.ResetReviewedID()
		return nil
	case goodreview.FieldReviewerID:
		m.ResetReviewerID()
		return nil
	case goodreview.FieldState:
		m.ResetState()
		return nil
	case goodreview.FieldMessage:
		m.ResetMessage()
		return nil
	case goodreview.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodreview.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodreview.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodReview field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodReviewMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodReviewMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodReviewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodReviewMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodReviewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodReviewMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodReviewMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodReview unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodReviewMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodReview edge %s", name)
}

// PriceCurrencyMutation represents an operation that mutates the PriceCurrency nodes in the graph.
type PriceCurrencyMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	unit          *string
	symbol        *string
	create_at     *uint32
	addcreate_at  *uint32
	update_at     *uint32
	addupdate_at  *uint32
	delete_at     *uint32
	adddelete_at  *uint32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PriceCurrency, error)
	predicates    []predicate.PriceCurrency
}

var _ ent.Mutation = (*PriceCurrencyMutation)(nil)

// pricecurrencyOption allows management of the mutation configuration using functional options.
type pricecurrencyOption func(*PriceCurrencyMutation)

// newPriceCurrencyMutation creates new mutation for the PriceCurrency entity.
func newPriceCurrencyMutation(c config, op Op, opts ...pricecurrencyOption) *PriceCurrencyMutation {
	m := &PriceCurrencyMutation{
		config:        c,
		op:            op,
		typ:           TypePriceCurrency,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceCurrencyID sets the ID field of the mutation.
func withPriceCurrencyID(id uuid.UUID) pricecurrencyOption {
	return func(m *PriceCurrencyMutation) {
		var (
			err   error
			once  sync.Once
			value *PriceCurrency
		)
		m.oldValue = func(ctx context.Context) (*PriceCurrency, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PriceCurrency.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPriceCurrency sets the old PriceCurrency of the mutation.
func withPriceCurrency(node *PriceCurrency) pricecurrencyOption {
	return func(m *PriceCurrencyMutation) {
		m.oldValue = func(context.Context) (*PriceCurrency, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceCurrencyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceCurrencyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PriceCurrency entities.
func (m *PriceCurrencyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PriceCurrencyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *PriceCurrencyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PriceCurrencyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PriceCurrency entity.
// If the PriceCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceCurrencyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PriceCurrencyMutation) ResetName() {
	m.name = nil
}

// SetUnit sets the "unit" field.
func (m *PriceCurrencyMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *PriceCurrencyMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the PriceCurrency entity.
// If the PriceCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceCurrencyMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *PriceCurrencyMutation) ResetUnit() {
	m.unit = nil
}

// SetSymbol sets the "symbol" field.
func (m *PriceCurrencyMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *PriceCurrencyMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the PriceCurrency entity.
// If the PriceCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceCurrencyMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *PriceCurrencyMutation) ResetSymbol() {
	m.symbol = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PriceCurrencyMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PriceCurrencyMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the PriceCurrency entity.
// If the PriceCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceCurrencyMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *PriceCurrencyMutation) AddCreateAt(u uint32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *PriceCurrencyMutation) AddedCreateAt() (r uint32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PriceCurrencyMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PriceCurrencyMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PriceCurrencyMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the PriceCurrency entity.
// If the PriceCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceCurrencyMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *PriceCurrencyMutation) AddUpdateAt(u uint32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *PriceCurrencyMutation) AddedUpdateAt() (r uint32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PriceCurrencyMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *PriceCurrencyMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *PriceCurrencyMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the PriceCurrency entity.
// If the PriceCurrency object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceCurrencyMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *PriceCurrencyMutation) AddDeleteAt(u uint32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *PriceCurrencyMutation) AddedDeleteAt() (r uint32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *PriceCurrencyMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the PriceCurrencyMutation builder.
func (m *PriceCurrencyMutation) Where(ps ...predicate.PriceCurrency) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PriceCurrencyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PriceCurrency).
func (m *PriceCurrencyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PriceCurrencyMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, pricecurrency.FieldName)
	}
	if m.unit != nil {
		fields = append(fields, pricecurrency.FieldUnit)
	}
	if m.symbol != nil {
		fields = append(fields, pricecurrency.FieldSymbol)
	}
	if m.create_at != nil {
		fields = append(fields, pricecurrency.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, pricecurrency.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, pricecurrency.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PriceCurrencyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pricecurrency.FieldName:
		return m.Name()
	case pricecurrency.FieldUnit:
		return m.Unit()
	case pricecurrency.FieldSymbol:
		return m.Symbol()
	case pricecurrency.FieldCreateAt:
		return m.CreateAt()
	case pricecurrency.FieldUpdateAt:
		return m.UpdateAt()
	case pricecurrency.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PriceCurrencyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pricecurrency.FieldName:
		return m.OldName(ctx)
	case pricecurrency.FieldUnit:
		return m.OldUnit(ctx)
	case pricecurrency.FieldSymbol:
		return m.OldSymbol(ctx)
	case pricecurrency.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case pricecurrency.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case pricecurrency.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown PriceCurrency field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceCurrencyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pricecurrency.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case pricecurrency.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case pricecurrency.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case pricecurrency.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case pricecurrency.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case pricecurrency.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PriceCurrency field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PriceCurrencyMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, pricecurrency.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, pricecurrency.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, pricecurrency.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PriceCurrencyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pricecurrency.FieldCreateAt:
		return m.AddedCreateAt()
	case pricecurrency.FieldUpdateAt:
		return m.AddedUpdateAt()
	case pricecurrency.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceCurrencyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pricecurrency.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case pricecurrency.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case pricecurrency.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PriceCurrency numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PriceCurrencyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PriceCurrencyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceCurrencyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PriceCurrency nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PriceCurrencyMutation) ResetField(name string) error {
	switch name {
	case pricecurrency.FieldName:
		m.ResetName()
		return nil
	case pricecurrency.FieldUnit:
		m.ResetUnit()
		return nil
	case pricecurrency.FieldSymbol:
		m.ResetSymbol()
		return nil
	case pricecurrency.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case pricecurrency.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case pricecurrency.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown PriceCurrency field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PriceCurrencyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PriceCurrencyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PriceCurrencyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PriceCurrencyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PriceCurrencyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PriceCurrencyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PriceCurrencyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PriceCurrency unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PriceCurrencyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PriceCurrency edge %s", name)
}

// TargetAreaMutation represents an operation that mutates the TargetArea nodes in the graph.
type TargetAreaMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	continent     *string
	country       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TargetArea, error)
	predicates    []predicate.TargetArea
}

var _ ent.Mutation = (*TargetAreaMutation)(nil)

// targetareaOption allows management of the mutation configuration using functional options.
type targetareaOption func(*TargetAreaMutation)

// newTargetAreaMutation creates new mutation for the TargetArea entity.
func newTargetAreaMutation(c config, op Op, opts ...targetareaOption) *TargetAreaMutation {
	m := &TargetAreaMutation{
		config:        c,
		op:            op,
		typ:           TypeTargetArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTargetAreaID sets the ID field of the mutation.
func withTargetAreaID(id uuid.UUID) targetareaOption {
	return func(m *TargetAreaMutation) {
		var (
			err   error
			once  sync.Once
			value *TargetArea
		)
		m.oldValue = func(ctx context.Context) (*TargetArea, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TargetArea.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTargetArea sets the old TargetArea of the mutation.
func withTargetArea(node *TargetArea) targetareaOption {
	return func(m *TargetAreaMutation) {
		m.oldValue = func(context.Context) (*TargetArea, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TargetAreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TargetAreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TargetArea entities.
func (m *TargetAreaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TargetAreaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContinent sets the "continent" field.
func (m *TargetAreaMutation) SetContinent(s string) {
	m.continent = &s
}

// Continent returns the value of the "continent" field in the mutation.
func (m *TargetAreaMutation) Continent() (r string, exists bool) {
	v := m.continent
	if v == nil {
		return
	}
	return *v, true
}

// OldContinent returns the old "continent" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldContinent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContinent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContinent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContinent: %w", err)
	}
	return oldValue.Continent, nil
}

// ResetContinent resets all changes to the "continent" field.
func (m *TargetAreaMutation) ResetContinent() {
	m.continent = nil
}

// SetCountry sets the "country" field.
func (m *TargetAreaMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *TargetAreaMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *TargetAreaMutation) ResetCountry() {
	m.country = nil
}

// SetCreateAt sets the "create_at" field.
func (m *TargetAreaMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *TargetAreaMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *TargetAreaMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *TargetAreaMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *TargetAreaMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *TargetAreaMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *TargetAreaMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *TargetAreaMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *TargetAreaMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *TargetAreaMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *TargetAreaMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *TargetAreaMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *TargetAreaMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *TargetAreaMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *TargetAreaMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the TargetAreaMutation builder.
func (m *TargetAreaMutation) Where(ps ...predicate.TargetArea) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TargetAreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TargetArea).
func (m *TargetAreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TargetAreaMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.continent != nil {
		fields = append(fields, targetarea.FieldContinent)
	}
	if m.country != nil {
		fields = append(fields, targetarea.FieldCountry)
	}
	if m.create_at != nil {
		fields = append(fields, targetarea.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, targetarea.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, targetarea.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TargetAreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case targetarea.FieldContinent:
		return m.Continent()
	case targetarea.FieldCountry:
		return m.Country()
	case targetarea.FieldCreateAt:
		return m.CreateAt()
	case targetarea.FieldUpdateAt:
		return m.UpdateAt()
	case targetarea.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TargetAreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case targetarea.FieldContinent:
		return m.OldContinent(ctx)
	case targetarea.FieldCountry:
		return m.OldCountry(ctx)
	case targetarea.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case targetarea.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case targetarea.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown TargetArea field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetAreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case targetarea.FieldContinent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContinent(v)
		return nil
	case targetarea.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case targetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case targetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case targetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown TargetArea field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TargetAreaMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, targetarea.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, targetarea.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, targetarea.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TargetAreaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case targetarea.FieldCreateAt:
		return m.AddedCreateAt()
	case targetarea.FieldUpdateAt:
		return m.AddedUpdateAt()
	case targetarea.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetAreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case targetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case targetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case targetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown TargetArea numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TargetAreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TargetAreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TargetAreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TargetArea nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TargetAreaMutation) ResetField(name string) error {
	switch name {
	case targetarea.FieldContinent:
		m.ResetContinent()
		return nil
	case targetarea.FieldCountry:
		m.ResetCountry()
		return nil
	case targetarea.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case targetarea.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case targetarea.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown TargetArea field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TargetAreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TargetAreaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TargetAreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TargetAreaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TargetAreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TargetAreaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TargetAreaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TargetArea unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TargetAreaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TargetArea edge %s", name)
}

// VendorLocationMutation represents an operation that mutates the VendorLocation nodes in the graph.
type VendorLocationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	country       *string
	province      *string
	city          *string
	address       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VendorLocation, error)
	predicates    []predicate.VendorLocation
}

var _ ent.Mutation = (*VendorLocationMutation)(nil)

// vendorlocationOption allows management of the mutation configuration using functional options.
type vendorlocationOption func(*VendorLocationMutation)

// newVendorLocationMutation creates new mutation for the VendorLocation entity.
func newVendorLocationMutation(c config, op Op, opts ...vendorlocationOption) *VendorLocationMutation {
	m := &VendorLocationMutation{
		config:        c,
		op:            op,
		typ:           TypeVendorLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVendorLocationID sets the ID field of the mutation.
func withVendorLocationID(id uuid.UUID) vendorlocationOption {
	return func(m *VendorLocationMutation) {
		var (
			err   error
			once  sync.Once
			value *VendorLocation
		)
		m.oldValue = func(ctx context.Context) (*VendorLocation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VendorLocation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVendorLocation sets the old VendorLocation of the mutation.
func withVendorLocation(node *VendorLocation) vendorlocationOption {
	return func(m *VendorLocationMutation) {
		m.oldValue = func(context.Context) (*VendorLocation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VendorLocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VendorLocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VendorLocation entities.
func (m *VendorLocationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VendorLocationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCountry sets the "country" field.
func (m *VendorLocationMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *VendorLocationMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *VendorLocationMutation) ResetCountry() {
	m.country = nil
}

// SetProvince sets the "province" field.
func (m *VendorLocationMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the value of the "province" field in the mutation.
func (m *VendorLocationMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old "province" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldProvince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProvince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ResetProvince resets all changes to the "province" field.
func (m *VendorLocationMutation) ResetProvince() {
	m.province = nil
}

// SetCity sets the "city" field.
func (m *VendorLocationMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *VendorLocationMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *VendorLocationMutation) ResetCity() {
	m.city = nil
}

// SetAddress sets the "address" field.
func (m *VendorLocationMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *VendorLocationMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *VendorLocationMutation) ResetAddress() {
	m.address = nil
}

// SetCreateAt sets the "create_at" field.
func (m *VendorLocationMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *VendorLocationMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *VendorLocationMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *VendorLocationMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *VendorLocationMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *VendorLocationMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *VendorLocationMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *VendorLocationMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *VendorLocationMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *VendorLocationMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *VendorLocationMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *VendorLocationMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *VendorLocationMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *VendorLocationMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *VendorLocationMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the VendorLocationMutation builder.
func (m *VendorLocationMutation) Where(ps ...predicate.VendorLocation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VendorLocationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VendorLocation).
func (m *VendorLocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VendorLocationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.country != nil {
		fields = append(fields, vendorlocation.FieldCountry)
	}
	if m.province != nil {
		fields = append(fields, vendorlocation.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, vendorlocation.FieldCity)
	}
	if m.address != nil {
		fields = append(fields, vendorlocation.FieldAddress)
	}
	if m.create_at != nil {
		fields = append(fields, vendorlocation.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, vendorlocation.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, vendorlocation.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VendorLocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vendorlocation.FieldCountry:
		return m.Country()
	case vendorlocation.FieldProvince:
		return m.Province()
	case vendorlocation.FieldCity:
		return m.City()
	case vendorlocation.FieldAddress:
		return m.Address()
	case vendorlocation.FieldCreateAt:
		return m.CreateAt()
	case vendorlocation.FieldUpdateAt:
		return m.UpdateAt()
	case vendorlocation.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VendorLocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vendorlocation.FieldCountry:
		return m.OldCountry(ctx)
	case vendorlocation.FieldProvince:
		return m.OldProvince(ctx)
	case vendorlocation.FieldCity:
		return m.OldCity(ctx)
	case vendorlocation.FieldAddress:
		return m.OldAddress(ctx)
	case vendorlocation.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case vendorlocation.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case vendorlocation.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown VendorLocation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorLocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vendorlocation.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case vendorlocation.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case vendorlocation.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case vendorlocation.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case vendorlocation.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case vendorlocation.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case vendorlocation.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown VendorLocation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VendorLocationMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, vendorlocation.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, vendorlocation.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, vendorlocation.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VendorLocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vendorlocation.FieldCreateAt:
		return m.AddedCreateAt()
	case vendorlocation.FieldUpdateAt:
		return m.AddedUpdateAt()
	case vendorlocation.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorLocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vendorlocation.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case vendorlocation.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case vendorlocation.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown VendorLocation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VendorLocationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VendorLocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VendorLocationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VendorLocation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VendorLocationMutation) ResetField(name string) error {
	switch name {
	case vendorlocation.FieldCountry:
		m.ResetCountry()
		return nil
	case vendorlocation.FieldProvince:
		m.ResetProvince()
		return nil
	case vendorlocation.FieldCity:
		m.ResetCity()
		return nil
	case vendorlocation.FieldAddress:
		m.ResetAddress()
		return nil
	case vendorlocation.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case vendorlocation.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case vendorlocation.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown VendorLocation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VendorLocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VendorLocationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VendorLocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VendorLocationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VendorLocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VendorLocationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VendorLocationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VendorLocation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VendorLocationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VendorLocation edge %s", name)
}
