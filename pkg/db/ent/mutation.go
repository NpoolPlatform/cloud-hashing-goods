// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/deviceinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/targetarea"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/vendorlocation"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDeviceInfo     = "DeviceInfo"
	TypeGoodInfo       = "GoodInfo"
	TypeTargetArea     = "TargetArea"
	TypeVendorLocation = "VendorLocation"
)

// DeviceInfoMutation represents an operation that mutates the DeviceInfo nodes in the graph.
type DeviceInfoMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	_type               *string
	manufacturer        *string
	power_comsuption    *int
	addpower_comsuption *int
	shipment_date       *int64
	addshipment_date    *int64
	create_at           *int64
	addcreate_at        *int64
	update_at           *int64
	addupdate_at        *int64
	delete_at           *int64
	adddelete_at        *int64
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*DeviceInfo, error)
	predicates          []predicate.DeviceInfo
}

var _ ent.Mutation = (*DeviceInfoMutation)(nil)

// deviceinfoOption allows management of the mutation configuration using functional options.
type deviceinfoOption func(*DeviceInfoMutation)

// newDeviceInfoMutation creates new mutation for the DeviceInfo entity.
func newDeviceInfoMutation(c config, op Op, opts ...deviceinfoOption) *DeviceInfoMutation {
	m := &DeviceInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeDeviceInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDeviceInfoID sets the ID field of the mutation.
func withDeviceInfoID(id uuid.UUID) deviceinfoOption {
	return func(m *DeviceInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *DeviceInfo
		)
		m.oldValue = func(ctx context.Context) (*DeviceInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DeviceInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeviceInfo sets the old DeviceInfo of the mutation.
func withDeviceInfo(node *DeviceInfo) deviceinfoOption {
	return func(m *DeviceInfoMutation) {
		m.oldValue = func(context.Context) (*DeviceInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DeviceInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DeviceInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DeviceInfo entities.
func (m *DeviceInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DeviceInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetType sets the "type" field.
func (m *DeviceInfoMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *DeviceInfoMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *DeviceInfoMutation) ResetType() {
	m._type = nil
}

// SetManufacturer sets the "manufacturer" field.
func (m *DeviceInfoMutation) SetManufacturer(s string) {
	m.manufacturer = &s
}

// Manufacturer returns the value of the "manufacturer" field in the mutation.
func (m *DeviceInfoMutation) Manufacturer() (r string, exists bool) {
	v := m.manufacturer
	if v == nil {
		return
	}
	return *v, true
}

// OldManufacturer returns the old "manufacturer" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldManufacturer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldManufacturer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldManufacturer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManufacturer: %w", err)
	}
	return oldValue.Manufacturer, nil
}

// ResetManufacturer resets all changes to the "manufacturer" field.
func (m *DeviceInfoMutation) ResetManufacturer() {
	m.manufacturer = nil
}

// SetPowerComsuption sets the "power_comsuption" field.
func (m *DeviceInfoMutation) SetPowerComsuption(i int) {
	m.power_comsuption = &i
	m.addpower_comsuption = nil
}

// PowerComsuption returns the value of the "power_comsuption" field in the mutation.
func (m *DeviceInfoMutation) PowerComsuption() (r int, exists bool) {
	v := m.power_comsuption
	if v == nil {
		return
	}
	return *v, true
}

// OldPowerComsuption returns the old "power_comsuption" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldPowerComsuption(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPowerComsuption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPowerComsuption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPowerComsuption: %w", err)
	}
	return oldValue.PowerComsuption, nil
}

// AddPowerComsuption adds i to the "power_comsuption" field.
func (m *DeviceInfoMutation) AddPowerComsuption(i int) {
	if m.addpower_comsuption != nil {
		*m.addpower_comsuption += i
	} else {
		m.addpower_comsuption = &i
	}
}

// AddedPowerComsuption returns the value that was added to the "power_comsuption" field in this mutation.
func (m *DeviceInfoMutation) AddedPowerComsuption() (r int, exists bool) {
	v := m.addpower_comsuption
	if v == nil {
		return
	}
	return *v, true
}

// ResetPowerComsuption resets all changes to the "power_comsuption" field.
func (m *DeviceInfoMutation) ResetPowerComsuption() {
	m.power_comsuption = nil
	m.addpower_comsuption = nil
}

// SetShipmentDate sets the "shipment_date" field.
func (m *DeviceInfoMutation) SetShipmentDate(i int64) {
	m.shipment_date = &i
	m.addshipment_date = nil
}

// ShipmentDate returns the value of the "shipment_date" field in the mutation.
func (m *DeviceInfoMutation) ShipmentDate() (r int64, exists bool) {
	v := m.shipment_date
	if v == nil {
		return
	}
	return *v, true
}

// OldShipmentDate returns the old "shipment_date" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldShipmentDate(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldShipmentDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldShipmentDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShipmentDate: %w", err)
	}
	return oldValue.ShipmentDate, nil
}

// AddShipmentDate adds i to the "shipment_date" field.
func (m *DeviceInfoMutation) AddShipmentDate(i int64) {
	if m.addshipment_date != nil {
		*m.addshipment_date += i
	} else {
		m.addshipment_date = &i
	}
}

// AddedShipmentDate returns the value that was added to the "shipment_date" field in this mutation.
func (m *DeviceInfoMutation) AddedShipmentDate() (r int64, exists bool) {
	v := m.addshipment_date
	if v == nil {
		return
	}
	return *v, true
}

// ResetShipmentDate resets all changes to the "shipment_date" field.
func (m *DeviceInfoMutation) ResetShipmentDate() {
	m.shipment_date = nil
	m.addshipment_date = nil
}

// SetCreateAt sets the "create_at" field.
func (m *DeviceInfoMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *DeviceInfoMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *DeviceInfoMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *DeviceInfoMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *DeviceInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *DeviceInfoMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *DeviceInfoMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *DeviceInfoMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *DeviceInfoMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *DeviceInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *DeviceInfoMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *DeviceInfoMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the DeviceInfo entity.
// If the DeviceInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DeviceInfoMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *DeviceInfoMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *DeviceInfoMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *DeviceInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the DeviceInfoMutation builder.
func (m *DeviceInfoMutation) Where(ps ...predicate.DeviceInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DeviceInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DeviceInfo).
func (m *DeviceInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DeviceInfoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m._type != nil {
		fields = append(fields, deviceinfo.FieldType)
	}
	if m.manufacturer != nil {
		fields = append(fields, deviceinfo.FieldManufacturer)
	}
	if m.power_comsuption != nil {
		fields = append(fields, deviceinfo.FieldPowerComsuption)
	}
	if m.shipment_date != nil {
		fields = append(fields, deviceinfo.FieldShipmentDate)
	}
	if m.create_at != nil {
		fields = append(fields, deviceinfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, deviceinfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, deviceinfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DeviceInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deviceinfo.FieldType:
		return m.GetType()
	case deviceinfo.FieldManufacturer:
		return m.Manufacturer()
	case deviceinfo.FieldPowerComsuption:
		return m.PowerComsuption()
	case deviceinfo.FieldShipmentDate:
		return m.ShipmentDate()
	case deviceinfo.FieldCreateAt:
		return m.CreateAt()
	case deviceinfo.FieldUpdateAt:
		return m.UpdateAt()
	case deviceinfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DeviceInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deviceinfo.FieldType:
		return m.OldType(ctx)
	case deviceinfo.FieldManufacturer:
		return m.OldManufacturer(ctx)
	case deviceinfo.FieldPowerComsuption:
		return m.OldPowerComsuption(ctx)
	case deviceinfo.FieldShipmentDate:
		return m.OldShipmentDate(ctx)
	case deviceinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case deviceinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case deviceinfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown DeviceInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deviceinfo.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case deviceinfo.FieldManufacturer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManufacturer(v)
		return nil
	case deviceinfo.FieldPowerComsuption:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPowerComsuption(v)
		return nil
	case deviceinfo.FieldShipmentDate:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShipmentDate(v)
		return nil
	case deviceinfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case deviceinfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case deviceinfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DeviceInfoMutation) AddedFields() []string {
	var fields []string
	if m.addpower_comsuption != nil {
		fields = append(fields, deviceinfo.FieldPowerComsuption)
	}
	if m.addshipment_date != nil {
		fields = append(fields, deviceinfo.FieldShipmentDate)
	}
	if m.addcreate_at != nil {
		fields = append(fields, deviceinfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, deviceinfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, deviceinfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DeviceInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deviceinfo.FieldPowerComsuption:
		return m.AddedPowerComsuption()
	case deviceinfo.FieldShipmentDate:
		return m.AddedShipmentDate()
	case deviceinfo.FieldCreateAt:
		return m.AddedCreateAt()
	case deviceinfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case deviceinfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DeviceInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deviceinfo.FieldPowerComsuption:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPowerComsuption(v)
		return nil
	case deviceinfo.FieldShipmentDate:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShipmentDate(v)
		return nil
	case deviceinfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case deviceinfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case deviceinfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown DeviceInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DeviceInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DeviceInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DeviceInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DeviceInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DeviceInfoMutation) ResetField(name string) error {
	switch name {
	case deviceinfo.FieldType:
		m.ResetType()
		return nil
	case deviceinfo.FieldManufacturer:
		m.ResetManufacturer()
		return nil
	case deviceinfo.FieldPowerComsuption:
		m.ResetPowerComsuption()
		return nil
	case deviceinfo.FieldShipmentDate:
		m.ResetShipmentDate()
		return nil
	case deviceinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case deviceinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case deviceinfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown DeviceInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DeviceInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DeviceInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DeviceInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DeviceInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DeviceInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DeviceInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DeviceInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DeviceInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DeviceInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DeviceInfo edge %s", name)
}

// GoodInfoMutation represents an operation that mutates the GoodInfo nodes in the graph.
type GoodInfoMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	device_info_id        *uuid.UUID
	gas_price             *int
	addgas_price          *int
	separate_gas_fee      *bool
	unit_power            *float64
	addunit_power         *float64
	duration              *int
	addduration           *int
	coin_info_id          *uuid.UUID
	actuals               *bool
	delivery_time         *int
	adddelivery_time      *int
	inherit_from_good_id  *uuid.UUID
	vendor_location_id    *uuid.UUID
	price                 *int
	addprice              *int
	benefit_type          *goodinfo.BenefitType
	classic               *bool
	support_coin_type_ids *[]uuid.UUID
	reviewer_id           *uuid.UUID
	review_state          *goodinfo.ReviewState
	total                 *int
	addtotal              *int
	create_at             *int64
	addcreate_at          *int64
	update_at             *int64
	addupdate_at          *int64
	delete_at             *int64
	adddelete_at          *int64
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*GoodInfo, error)
	predicates            []predicate.GoodInfo
}

var _ ent.Mutation = (*GoodInfoMutation)(nil)

// goodinfoOption allows management of the mutation configuration using functional options.
type goodinfoOption func(*GoodInfoMutation)

// newGoodInfoMutation creates new mutation for the GoodInfo entity.
func newGoodInfoMutation(c config, op Op, opts ...goodinfoOption) *GoodInfoMutation {
	m := &GoodInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodInfoID sets the ID field of the mutation.
func withGoodInfoID(id uuid.UUID) goodinfoOption {
	return func(m *GoodInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodInfo
		)
		m.oldValue = func(ctx context.Context) (*GoodInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodInfo sets the old GoodInfo of the mutation.
func withGoodInfo(node *GoodInfo) goodinfoOption {
	return func(m *GoodInfoMutation) {
		m.oldValue = func(context.Context) (*GoodInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodInfo entities.
func (m *GoodInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDeviceInfoID sets the "device_info_id" field.
func (m *GoodInfoMutation) SetDeviceInfoID(u uuid.UUID) {
	m.device_info_id = &u
}

// DeviceInfoID returns the value of the "device_info_id" field in the mutation.
func (m *GoodInfoMutation) DeviceInfoID() (r uuid.UUID, exists bool) {
	v := m.device_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceInfoID returns the old "device_info_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeviceInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeviceInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeviceInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceInfoID: %w", err)
	}
	return oldValue.DeviceInfoID, nil
}

// ResetDeviceInfoID resets all changes to the "device_info_id" field.
func (m *GoodInfoMutation) ResetDeviceInfoID() {
	m.device_info_id = nil
}

// SetGasPrice sets the "gas_price" field.
func (m *GoodInfoMutation) SetGasPrice(i int) {
	m.gas_price = &i
	m.addgas_price = nil
}

// GasPrice returns the value of the "gas_price" field in the mutation.
func (m *GoodInfoMutation) GasPrice() (r int, exists bool) {
	v := m.gas_price
	if v == nil {
		return
	}
	return *v, true
}

// OldGasPrice returns the old "gas_price" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldGasPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGasPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGasPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasPrice: %w", err)
	}
	return oldValue.GasPrice, nil
}

// AddGasPrice adds i to the "gas_price" field.
func (m *GoodInfoMutation) AddGasPrice(i int) {
	if m.addgas_price != nil {
		*m.addgas_price += i
	} else {
		m.addgas_price = &i
	}
}

// AddedGasPrice returns the value that was added to the "gas_price" field in this mutation.
func (m *GoodInfoMutation) AddedGasPrice() (r int, exists bool) {
	v := m.addgas_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetGasPrice resets all changes to the "gas_price" field.
func (m *GoodInfoMutation) ResetGasPrice() {
	m.gas_price = nil
	m.addgas_price = nil
}

// SetSeparateGasFee sets the "separate_gas_fee" field.
func (m *GoodInfoMutation) SetSeparateGasFee(b bool) {
	m.separate_gas_fee = &b
}

// SeparateGasFee returns the value of the "separate_gas_fee" field in the mutation.
func (m *GoodInfoMutation) SeparateGasFee() (r bool, exists bool) {
	v := m.separate_gas_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldSeparateGasFee returns the old "separate_gas_fee" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldSeparateGasFee(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeparateGasFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeparateGasFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeparateGasFee: %w", err)
	}
	return oldValue.SeparateGasFee, nil
}

// ResetSeparateGasFee resets all changes to the "separate_gas_fee" field.
func (m *GoodInfoMutation) ResetSeparateGasFee() {
	m.separate_gas_fee = nil
}

// SetUnitPower sets the "unit_power" field.
func (m *GoodInfoMutation) SetUnitPower(f float64) {
	m.unit_power = &f
	m.addunit_power = nil
}

// UnitPower returns the value of the "unit_power" field in the mutation.
func (m *GoodInfoMutation) UnitPower() (r float64, exists bool) {
	v := m.unit_power
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitPower returns the old "unit_power" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldUnitPower(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitPower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitPower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitPower: %w", err)
	}
	return oldValue.UnitPower, nil
}

// AddUnitPower adds f to the "unit_power" field.
func (m *GoodInfoMutation) AddUnitPower(f float64) {
	if m.addunit_power != nil {
		*m.addunit_power += f
	} else {
		m.addunit_power = &f
	}
}

// AddedUnitPower returns the value that was added to the "unit_power" field in this mutation.
func (m *GoodInfoMutation) AddedUnitPower() (r float64, exists bool) {
	v := m.addunit_power
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnitPower resets all changes to the "unit_power" field.
func (m *GoodInfoMutation) ResetUnitPower() {
	m.unit_power = nil
	m.addunit_power = nil
}

// SetDuration sets the "duration" field.
func (m *GoodInfoMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *GoodInfoMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *GoodInfoMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *GoodInfoMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *GoodInfoMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetCoinInfoID sets the "coin_info_id" field.
func (m *GoodInfoMutation) SetCoinInfoID(u uuid.UUID) {
	m.coin_info_id = &u
}

// CoinInfoID returns the value of the "coin_info_id" field in the mutation.
func (m *GoodInfoMutation) CoinInfoID() (r uuid.UUID, exists bool) {
	v := m.coin_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinInfoID returns the old "coin_info_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldCoinInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoinInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoinInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinInfoID: %w", err)
	}
	return oldValue.CoinInfoID, nil
}

// ResetCoinInfoID resets all changes to the "coin_info_id" field.
func (m *GoodInfoMutation) ResetCoinInfoID() {
	m.coin_info_id = nil
}

// SetActuals sets the "actuals" field.
func (m *GoodInfoMutation) SetActuals(b bool) {
	m.actuals = &b
}

// Actuals returns the value of the "actuals" field in the mutation.
func (m *GoodInfoMutation) Actuals() (r bool, exists bool) {
	v := m.actuals
	if v == nil {
		return
	}
	return *v, true
}

// OldActuals returns the old "actuals" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldActuals(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActuals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActuals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActuals: %w", err)
	}
	return oldValue.Actuals, nil
}

// ResetActuals resets all changes to the "actuals" field.
func (m *GoodInfoMutation) ResetActuals() {
	m.actuals = nil
}

// SetDeliveryTime sets the "delivery_time" field.
func (m *GoodInfoMutation) SetDeliveryTime(i int) {
	m.delivery_time = &i
	m.adddelivery_time = nil
}

// DeliveryTime returns the value of the "delivery_time" field in the mutation.
func (m *GoodInfoMutation) DeliveryTime() (r int, exists bool) {
	v := m.delivery_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveryTime returns the old "delivery_time" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeliveryTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeliveryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeliveryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveryTime: %w", err)
	}
	return oldValue.DeliveryTime, nil
}

// AddDeliveryTime adds i to the "delivery_time" field.
func (m *GoodInfoMutation) AddDeliveryTime(i int) {
	if m.adddelivery_time != nil {
		*m.adddelivery_time += i
	} else {
		m.adddelivery_time = &i
	}
}

// AddedDeliveryTime returns the value that was added to the "delivery_time" field in this mutation.
func (m *GoodInfoMutation) AddedDeliveryTime() (r int, exists bool) {
	v := m.adddelivery_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeliveryTime resets all changes to the "delivery_time" field.
func (m *GoodInfoMutation) ResetDeliveryTime() {
	m.delivery_time = nil
	m.adddelivery_time = nil
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (m *GoodInfoMutation) SetInheritFromGoodID(u uuid.UUID) {
	m.inherit_from_good_id = &u
}

// InheritFromGoodID returns the value of the "inherit_from_good_id" field in the mutation.
func (m *GoodInfoMutation) InheritFromGoodID() (r uuid.UUID, exists bool) {
	v := m.inherit_from_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInheritFromGoodID returns the old "inherit_from_good_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldInheritFromGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInheritFromGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInheritFromGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInheritFromGoodID: %w", err)
	}
	return oldValue.InheritFromGoodID, nil
}

// ResetInheritFromGoodID resets all changes to the "inherit_from_good_id" field.
func (m *GoodInfoMutation) ResetInheritFromGoodID() {
	m.inherit_from_good_id = nil
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (m *GoodInfoMutation) SetVendorLocationID(u uuid.UUID) {
	m.vendor_location_id = &u
}

// VendorLocationID returns the value of the "vendor_location_id" field in the mutation.
func (m *GoodInfoMutation) VendorLocationID() (r uuid.UUID, exists bool) {
	v := m.vendor_location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorLocationID returns the old "vendor_location_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldVendorLocationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVendorLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVendorLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorLocationID: %w", err)
	}
	return oldValue.VendorLocationID, nil
}

// ResetVendorLocationID resets all changes to the "vendor_location_id" field.
func (m *GoodInfoMutation) ResetVendorLocationID() {
	m.vendor_location_id = nil
}

// SetPrice sets the "price" field.
func (m *GoodInfoMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *GoodInfoMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *GoodInfoMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *GoodInfoMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *GoodInfoMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetBenefitType sets the "benefit_type" field.
func (m *GoodInfoMutation) SetBenefitType(gt goodinfo.BenefitType) {
	m.benefit_type = &gt
}

// BenefitType returns the value of the "benefit_type" field in the mutation.
func (m *GoodInfoMutation) BenefitType() (r goodinfo.BenefitType, exists bool) {
	v := m.benefit_type
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitType returns the old "benefit_type" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldBenefitType(ctx context.Context) (v goodinfo.BenefitType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBenefitType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBenefitType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitType: %w", err)
	}
	return oldValue.BenefitType, nil
}

// ResetBenefitType resets all changes to the "benefit_type" field.
func (m *GoodInfoMutation) ResetBenefitType() {
	m.benefit_type = nil
}

// SetClassic sets the "classic" field.
func (m *GoodInfoMutation) SetClassic(b bool) {
	m.classic = &b
}

// Classic returns the value of the "classic" field in the mutation.
func (m *GoodInfoMutation) Classic() (r bool, exists bool) {
	v := m.classic
	if v == nil {
		return
	}
	return *v, true
}

// OldClassic returns the old "classic" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldClassic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClassic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClassic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassic: %w", err)
	}
	return oldValue.Classic, nil
}

// ResetClassic resets all changes to the "classic" field.
func (m *GoodInfoMutation) ResetClassic() {
	m.classic = nil
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (m *GoodInfoMutation) SetSupportCoinTypeIds(u []uuid.UUID) {
	m.support_coin_type_ids = &u
}

// SupportCoinTypeIds returns the value of the "support_coin_type_ids" field in the mutation.
func (m *GoodInfoMutation) SupportCoinTypeIds() (r []uuid.UUID, exists bool) {
	v := m.support_coin_type_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldSupportCoinTypeIds returns the old "support_coin_type_ids" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldSupportCoinTypeIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSupportCoinTypeIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSupportCoinTypeIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupportCoinTypeIds: %w", err)
	}
	return oldValue.SupportCoinTypeIds, nil
}

// ResetSupportCoinTypeIds resets all changes to the "support_coin_type_ids" field.
func (m *GoodInfoMutation) ResetSupportCoinTypeIds() {
	m.support_coin_type_ids = nil
}

// SetReviewerID sets the "reviewer_id" field.
func (m *GoodInfoMutation) SetReviewerID(u uuid.UUID) {
	m.reviewer_id = &u
}

// ReviewerID returns the value of the "reviewer_id" field in the mutation.
func (m *GoodInfoMutation) ReviewerID() (r uuid.UUID, exists bool) {
	v := m.reviewer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewerID returns the old "reviewer_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldReviewerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReviewerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReviewerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewerID: %w", err)
	}
	return oldValue.ReviewerID, nil
}

// ResetReviewerID resets all changes to the "reviewer_id" field.
func (m *GoodInfoMutation) ResetReviewerID() {
	m.reviewer_id = nil
}

// SetReviewState sets the "review_state" field.
func (m *GoodInfoMutation) SetReviewState(gs goodinfo.ReviewState) {
	m.review_state = &gs
}

// ReviewState returns the value of the "review_state" field in the mutation.
func (m *GoodInfoMutation) ReviewState() (r goodinfo.ReviewState, exists bool) {
	v := m.review_state
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewState returns the old "review_state" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldReviewState(ctx context.Context) (v goodinfo.ReviewState, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReviewState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReviewState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewState: %w", err)
	}
	return oldValue.ReviewState, nil
}

// ResetReviewState resets all changes to the "review_state" field.
func (m *GoodInfoMutation) ResetReviewState() {
	m.review_state = nil
}

// SetTotal sets the "total" field.
func (m *GoodInfoMutation) SetTotal(i int) {
	m.total = &i
	m.addtotal = nil
}

// Total returns the value of the "total" field in the mutation.
func (m *GoodInfoMutation) Total() (r int, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldTotal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds i to the "total" field.
func (m *GoodInfoMutation) AddTotal(i int) {
	if m.addtotal != nil {
		*m.addtotal += i
	} else {
		m.addtotal = &i
	}
}

// AddedTotal returns the value that was added to the "total" field in this mutation.
func (m *GoodInfoMutation) AddedTotal() (r int, exists bool) {
	v := m.addtotal
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotal resets all changes to the "total" field.
func (m *GoodInfoMutation) ResetTotal() {
	m.total = nil
	m.addtotal = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodInfoMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodInfoMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *GoodInfoMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodInfoMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodInfoMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodInfoMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *GoodInfoMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodInfoMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodInfoMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodInfoMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *GoodInfoMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodInfoMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodInfoMutation builder.
func (m *GoodInfoMutation) Where(ps ...predicate.GoodInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodInfo).
func (m *GoodInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodInfoMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.device_info_id != nil {
		fields = append(fields, goodinfo.FieldDeviceInfoID)
	}
	if m.gas_price != nil {
		fields = append(fields, goodinfo.FieldGasPrice)
	}
	if m.separate_gas_fee != nil {
		fields = append(fields, goodinfo.FieldSeparateGasFee)
	}
	if m.unit_power != nil {
		fields = append(fields, goodinfo.FieldUnitPower)
	}
	if m.duration != nil {
		fields = append(fields, goodinfo.FieldDuration)
	}
	if m.coin_info_id != nil {
		fields = append(fields, goodinfo.FieldCoinInfoID)
	}
	if m.actuals != nil {
		fields = append(fields, goodinfo.FieldActuals)
	}
	if m.delivery_time != nil {
		fields = append(fields, goodinfo.FieldDeliveryTime)
	}
	if m.inherit_from_good_id != nil {
		fields = append(fields, goodinfo.FieldInheritFromGoodID)
	}
	if m.vendor_location_id != nil {
		fields = append(fields, goodinfo.FieldVendorLocationID)
	}
	if m.price != nil {
		fields = append(fields, goodinfo.FieldPrice)
	}
	if m.benefit_type != nil {
		fields = append(fields, goodinfo.FieldBenefitType)
	}
	if m.classic != nil {
		fields = append(fields, goodinfo.FieldClassic)
	}
	if m.support_coin_type_ids != nil {
		fields = append(fields, goodinfo.FieldSupportCoinTypeIds)
	}
	if m.reviewer_id != nil {
		fields = append(fields, goodinfo.FieldReviewerID)
	}
	if m.review_state != nil {
		fields = append(fields, goodinfo.FieldReviewState)
	}
	if m.total != nil {
		fields = append(fields, goodinfo.FieldTotal)
	}
	if m.create_at != nil {
		fields = append(fields, goodinfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodinfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodinfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		return m.DeviceInfoID()
	case goodinfo.FieldGasPrice:
		return m.GasPrice()
	case goodinfo.FieldSeparateGasFee:
		return m.SeparateGasFee()
	case goodinfo.FieldUnitPower:
		return m.UnitPower()
	case goodinfo.FieldDuration:
		return m.Duration()
	case goodinfo.FieldCoinInfoID:
		return m.CoinInfoID()
	case goodinfo.FieldActuals:
		return m.Actuals()
	case goodinfo.FieldDeliveryTime:
		return m.DeliveryTime()
	case goodinfo.FieldInheritFromGoodID:
		return m.InheritFromGoodID()
	case goodinfo.FieldVendorLocationID:
		return m.VendorLocationID()
	case goodinfo.FieldPrice:
		return m.Price()
	case goodinfo.FieldBenefitType:
		return m.BenefitType()
	case goodinfo.FieldClassic:
		return m.Classic()
	case goodinfo.FieldSupportCoinTypeIds:
		return m.SupportCoinTypeIds()
	case goodinfo.FieldReviewerID:
		return m.ReviewerID()
	case goodinfo.FieldReviewState:
		return m.ReviewState()
	case goodinfo.FieldTotal:
		return m.Total()
	case goodinfo.FieldCreateAt:
		return m.CreateAt()
	case goodinfo.FieldUpdateAt:
		return m.UpdateAt()
	case goodinfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		return m.OldDeviceInfoID(ctx)
	case goodinfo.FieldGasPrice:
		return m.OldGasPrice(ctx)
	case goodinfo.FieldSeparateGasFee:
		return m.OldSeparateGasFee(ctx)
	case goodinfo.FieldUnitPower:
		return m.OldUnitPower(ctx)
	case goodinfo.FieldDuration:
		return m.OldDuration(ctx)
	case goodinfo.FieldCoinInfoID:
		return m.OldCoinInfoID(ctx)
	case goodinfo.FieldActuals:
		return m.OldActuals(ctx)
	case goodinfo.FieldDeliveryTime:
		return m.OldDeliveryTime(ctx)
	case goodinfo.FieldInheritFromGoodID:
		return m.OldInheritFromGoodID(ctx)
	case goodinfo.FieldVendorLocationID:
		return m.OldVendorLocationID(ctx)
	case goodinfo.FieldPrice:
		return m.OldPrice(ctx)
	case goodinfo.FieldBenefitType:
		return m.OldBenefitType(ctx)
	case goodinfo.FieldClassic:
		return m.OldClassic(ctx)
	case goodinfo.FieldSupportCoinTypeIds:
		return m.OldSupportCoinTypeIds(ctx)
	case goodinfo.FieldReviewerID:
		return m.OldReviewerID(ctx)
	case goodinfo.FieldReviewState:
		return m.OldReviewState(ctx)
	case goodinfo.FieldTotal:
		return m.OldTotal(ctx)
	case goodinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodinfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceInfoID(v)
		return nil
	case goodinfo.FieldGasPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasPrice(v)
		return nil
	case goodinfo.FieldSeparateGasFee:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeparateGasFee(v)
		return nil
	case goodinfo.FieldUnitPower:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitPower(v)
		return nil
	case goodinfo.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case goodinfo.FieldCoinInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinInfoID(v)
		return nil
	case goodinfo.FieldActuals:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActuals(v)
		return nil
	case goodinfo.FieldDeliveryTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveryTime(v)
		return nil
	case goodinfo.FieldInheritFromGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInheritFromGoodID(v)
		return nil
	case goodinfo.FieldVendorLocationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorLocationID(v)
		return nil
	case goodinfo.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case goodinfo.FieldBenefitType:
		v, ok := value.(goodinfo.BenefitType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitType(v)
		return nil
	case goodinfo.FieldClassic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassic(v)
		return nil
	case goodinfo.FieldSupportCoinTypeIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupportCoinTypeIds(v)
		return nil
	case goodinfo.FieldReviewerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewerID(v)
		return nil
	case goodinfo.FieldReviewState:
		v, ok := value.(goodinfo.ReviewState)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewState(v)
		return nil
	case goodinfo.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case goodinfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodinfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodinfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodInfoMutation) AddedFields() []string {
	var fields []string
	if m.addgas_price != nil {
		fields = append(fields, goodinfo.FieldGasPrice)
	}
	if m.addunit_power != nil {
		fields = append(fields, goodinfo.FieldUnitPower)
	}
	if m.addduration != nil {
		fields = append(fields, goodinfo.FieldDuration)
	}
	if m.adddelivery_time != nil {
		fields = append(fields, goodinfo.FieldDeliveryTime)
	}
	if m.addprice != nil {
		fields = append(fields, goodinfo.FieldPrice)
	}
	if m.addtotal != nil {
		fields = append(fields, goodinfo.FieldTotal)
	}
	if m.addcreate_at != nil {
		fields = append(fields, goodinfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodinfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodinfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodinfo.FieldGasPrice:
		return m.AddedGasPrice()
	case goodinfo.FieldUnitPower:
		return m.AddedUnitPower()
	case goodinfo.FieldDuration:
		return m.AddedDuration()
	case goodinfo.FieldDeliveryTime:
		return m.AddedDeliveryTime()
	case goodinfo.FieldPrice:
		return m.AddedPrice()
	case goodinfo.FieldTotal:
		return m.AddedTotal()
	case goodinfo.FieldCreateAt:
		return m.AddedCreateAt()
	case goodinfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodinfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodinfo.FieldGasPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGasPrice(v)
		return nil
	case goodinfo.FieldUnitPower:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitPower(v)
		return nil
	case goodinfo.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case goodinfo.FieldDeliveryTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeliveryTime(v)
		return nil
	case goodinfo.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case goodinfo.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	case goodinfo.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodinfo.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodinfo.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodInfoMutation) ResetField(name string) error {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		m.ResetDeviceInfoID()
		return nil
	case goodinfo.FieldGasPrice:
		m.ResetGasPrice()
		return nil
	case goodinfo.FieldSeparateGasFee:
		m.ResetSeparateGasFee()
		return nil
	case goodinfo.FieldUnitPower:
		m.ResetUnitPower()
		return nil
	case goodinfo.FieldDuration:
		m.ResetDuration()
		return nil
	case goodinfo.FieldCoinInfoID:
		m.ResetCoinInfoID()
		return nil
	case goodinfo.FieldActuals:
		m.ResetActuals()
		return nil
	case goodinfo.FieldDeliveryTime:
		m.ResetDeliveryTime()
		return nil
	case goodinfo.FieldInheritFromGoodID:
		m.ResetInheritFromGoodID()
		return nil
	case goodinfo.FieldVendorLocationID:
		m.ResetVendorLocationID()
		return nil
	case goodinfo.FieldPrice:
		m.ResetPrice()
		return nil
	case goodinfo.FieldBenefitType:
		m.ResetBenefitType()
		return nil
	case goodinfo.FieldClassic:
		m.ResetClassic()
		return nil
	case goodinfo.FieldSupportCoinTypeIds:
		m.ResetSupportCoinTypeIds()
		return nil
	case goodinfo.FieldReviewerID:
		m.ResetReviewerID()
		return nil
	case goodinfo.FieldReviewState:
		m.ResetReviewState()
		return nil
	case goodinfo.FieldTotal:
		m.ResetTotal()
		return nil
	case goodinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodinfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodInfo edge %s", name)
}

// TargetAreaMutation represents an operation that mutates the TargetArea nodes in the graph.
type TargetAreaMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	continent     *string
	country       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TargetArea, error)
	predicates    []predicate.TargetArea
}

var _ ent.Mutation = (*TargetAreaMutation)(nil)

// targetareaOption allows management of the mutation configuration using functional options.
type targetareaOption func(*TargetAreaMutation)

// newTargetAreaMutation creates new mutation for the TargetArea entity.
func newTargetAreaMutation(c config, op Op, opts ...targetareaOption) *TargetAreaMutation {
	m := &TargetAreaMutation{
		config:        c,
		op:            op,
		typ:           TypeTargetArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTargetAreaID sets the ID field of the mutation.
func withTargetAreaID(id uuid.UUID) targetareaOption {
	return func(m *TargetAreaMutation) {
		var (
			err   error
			once  sync.Once
			value *TargetArea
		)
		m.oldValue = func(ctx context.Context) (*TargetArea, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TargetArea.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTargetArea sets the old TargetArea of the mutation.
func withTargetArea(node *TargetArea) targetareaOption {
	return func(m *TargetAreaMutation) {
		m.oldValue = func(context.Context) (*TargetArea, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TargetAreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TargetAreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TargetArea entities.
func (m *TargetAreaMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TargetAreaMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContinent sets the "continent" field.
func (m *TargetAreaMutation) SetContinent(s string) {
	m.continent = &s
}

// Continent returns the value of the "continent" field in the mutation.
func (m *TargetAreaMutation) Continent() (r string, exists bool) {
	v := m.continent
	if v == nil {
		return
	}
	return *v, true
}

// OldContinent returns the old "continent" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldContinent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContinent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContinent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContinent: %w", err)
	}
	return oldValue.Continent, nil
}

// ResetContinent resets all changes to the "continent" field.
func (m *TargetAreaMutation) ResetContinent() {
	m.continent = nil
}

// SetCountry sets the "country" field.
func (m *TargetAreaMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *TargetAreaMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *TargetAreaMutation) ResetCountry() {
	m.country = nil
}

// SetCreateAt sets the "create_at" field.
func (m *TargetAreaMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *TargetAreaMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *TargetAreaMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *TargetAreaMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *TargetAreaMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *TargetAreaMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *TargetAreaMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *TargetAreaMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *TargetAreaMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *TargetAreaMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *TargetAreaMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *TargetAreaMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the TargetArea entity.
// If the TargetArea object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetAreaMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *TargetAreaMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *TargetAreaMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *TargetAreaMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the TargetAreaMutation builder.
func (m *TargetAreaMutation) Where(ps ...predicate.TargetArea) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TargetAreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TargetArea).
func (m *TargetAreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TargetAreaMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.continent != nil {
		fields = append(fields, targetarea.FieldContinent)
	}
	if m.country != nil {
		fields = append(fields, targetarea.FieldCountry)
	}
	if m.create_at != nil {
		fields = append(fields, targetarea.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, targetarea.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, targetarea.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TargetAreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case targetarea.FieldContinent:
		return m.Continent()
	case targetarea.FieldCountry:
		return m.Country()
	case targetarea.FieldCreateAt:
		return m.CreateAt()
	case targetarea.FieldUpdateAt:
		return m.UpdateAt()
	case targetarea.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TargetAreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case targetarea.FieldContinent:
		return m.OldContinent(ctx)
	case targetarea.FieldCountry:
		return m.OldCountry(ctx)
	case targetarea.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case targetarea.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case targetarea.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown TargetArea field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetAreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case targetarea.FieldContinent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContinent(v)
		return nil
	case targetarea.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case targetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case targetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case targetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown TargetArea field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TargetAreaMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, targetarea.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, targetarea.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, targetarea.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TargetAreaMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case targetarea.FieldCreateAt:
		return m.AddedCreateAt()
	case targetarea.FieldUpdateAt:
		return m.AddedUpdateAt()
	case targetarea.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetAreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	case targetarea.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case targetarea.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case targetarea.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown TargetArea numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TargetAreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TargetAreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TargetAreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TargetArea nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TargetAreaMutation) ResetField(name string) error {
	switch name {
	case targetarea.FieldContinent:
		m.ResetContinent()
		return nil
	case targetarea.FieldCountry:
		m.ResetCountry()
		return nil
	case targetarea.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case targetarea.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case targetarea.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown TargetArea field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TargetAreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TargetAreaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TargetAreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TargetAreaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TargetAreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TargetAreaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TargetAreaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TargetArea unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TargetAreaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TargetArea edge %s", name)
}

// VendorLocationMutation represents an operation that mutates the VendorLocation nodes in the graph.
type VendorLocationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	country       *string
	province      *string
	city          *string
	address       *string
	create_at     *int64
	addcreate_at  *int64
	update_at     *int64
	addupdate_at  *int64
	delete_at     *int64
	adddelete_at  *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*VendorLocation, error)
	predicates    []predicate.VendorLocation
}

var _ ent.Mutation = (*VendorLocationMutation)(nil)

// vendorlocationOption allows management of the mutation configuration using functional options.
type vendorlocationOption func(*VendorLocationMutation)

// newVendorLocationMutation creates new mutation for the VendorLocation entity.
func newVendorLocationMutation(c config, op Op, opts ...vendorlocationOption) *VendorLocationMutation {
	m := &VendorLocationMutation{
		config:        c,
		op:            op,
		typ:           TypeVendorLocation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVendorLocationID sets the ID field of the mutation.
func withVendorLocationID(id uuid.UUID) vendorlocationOption {
	return func(m *VendorLocationMutation) {
		var (
			err   error
			once  sync.Once
			value *VendorLocation
		)
		m.oldValue = func(ctx context.Context) (*VendorLocation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VendorLocation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVendorLocation sets the old VendorLocation of the mutation.
func withVendorLocation(node *VendorLocation) vendorlocationOption {
	return func(m *VendorLocationMutation) {
		m.oldValue = func(context.Context) (*VendorLocation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VendorLocationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VendorLocationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of VendorLocation entities.
func (m *VendorLocationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VendorLocationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCountry sets the "country" field.
func (m *VendorLocationMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *VendorLocationMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *VendorLocationMutation) ResetCountry() {
	m.country = nil
}

// SetProvince sets the "province" field.
func (m *VendorLocationMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the value of the "province" field in the mutation.
func (m *VendorLocationMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old "province" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldProvince(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProvince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ResetProvince resets all changes to the "province" field.
func (m *VendorLocationMutation) ResetProvince() {
	m.province = nil
}

// SetCity sets the "city" field.
func (m *VendorLocationMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *VendorLocationMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *VendorLocationMutation) ResetCity() {
	m.city = nil
}

// SetAddress sets the "address" field.
func (m *VendorLocationMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *VendorLocationMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *VendorLocationMutation) ResetAddress() {
	m.address = nil
}

// SetCreateAt sets the "create_at" field.
func (m *VendorLocationMutation) SetCreateAt(i int64) {
	m.create_at = &i
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *VendorLocationMutation) CreateAt() (r int64, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldCreateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds i to the "create_at" field.
func (m *VendorLocationMutation) AddCreateAt(i int64) {
	if m.addcreate_at != nil {
		*m.addcreate_at += i
	} else {
		m.addcreate_at = &i
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *VendorLocationMutation) AddedCreateAt() (r int64, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *VendorLocationMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *VendorLocationMutation) SetUpdateAt(i int64) {
	m.update_at = &i
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *VendorLocationMutation) UpdateAt() (r int64, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldUpdateAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds i to the "update_at" field.
func (m *VendorLocationMutation) AddUpdateAt(i int64) {
	if m.addupdate_at != nil {
		*m.addupdate_at += i
	} else {
		m.addupdate_at = &i
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *VendorLocationMutation) AddedUpdateAt() (r int64, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *VendorLocationMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *VendorLocationMutation) SetDeleteAt(i int64) {
	m.delete_at = &i
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *VendorLocationMutation) DeleteAt() (r int64, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the VendorLocation entity.
// If the VendorLocation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorLocationMutation) OldDeleteAt(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds i to the "delete_at" field.
func (m *VendorLocationMutation) AddDeleteAt(i int64) {
	if m.adddelete_at != nil {
		*m.adddelete_at += i
	} else {
		m.adddelete_at = &i
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *VendorLocationMutation) AddedDeleteAt() (r int64, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *VendorLocationMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the VendorLocationMutation builder.
func (m *VendorLocationMutation) Where(ps ...predicate.VendorLocation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VendorLocationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VendorLocation).
func (m *VendorLocationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VendorLocationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.country != nil {
		fields = append(fields, vendorlocation.FieldCountry)
	}
	if m.province != nil {
		fields = append(fields, vendorlocation.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, vendorlocation.FieldCity)
	}
	if m.address != nil {
		fields = append(fields, vendorlocation.FieldAddress)
	}
	if m.create_at != nil {
		fields = append(fields, vendorlocation.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, vendorlocation.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, vendorlocation.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VendorLocationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vendorlocation.FieldCountry:
		return m.Country()
	case vendorlocation.FieldProvince:
		return m.Province()
	case vendorlocation.FieldCity:
		return m.City()
	case vendorlocation.FieldAddress:
		return m.Address()
	case vendorlocation.FieldCreateAt:
		return m.CreateAt()
	case vendorlocation.FieldUpdateAt:
		return m.UpdateAt()
	case vendorlocation.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VendorLocationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vendorlocation.FieldCountry:
		return m.OldCountry(ctx)
	case vendorlocation.FieldProvince:
		return m.OldProvince(ctx)
	case vendorlocation.FieldCity:
		return m.OldCity(ctx)
	case vendorlocation.FieldAddress:
		return m.OldAddress(ctx)
	case vendorlocation.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case vendorlocation.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case vendorlocation.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown VendorLocation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorLocationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vendorlocation.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case vendorlocation.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case vendorlocation.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case vendorlocation.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case vendorlocation.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case vendorlocation.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case vendorlocation.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown VendorLocation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VendorLocationMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, vendorlocation.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, vendorlocation.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, vendorlocation.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VendorLocationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vendorlocation.FieldCreateAt:
		return m.AddedCreateAt()
	case vendorlocation.FieldUpdateAt:
		return m.AddedUpdateAt()
	case vendorlocation.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorLocationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vendorlocation.FieldCreateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case vendorlocation.FieldUpdateAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case vendorlocation.FieldDeleteAt:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown VendorLocation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VendorLocationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VendorLocationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VendorLocationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VendorLocation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VendorLocationMutation) ResetField(name string) error {
	switch name {
	case vendorlocation.FieldCountry:
		m.ResetCountry()
		return nil
	case vendorlocation.FieldProvince:
		m.ResetProvince()
		return nil
	case vendorlocation.FieldCity:
		m.ResetCity()
		return nil
	case vendorlocation.FieldAddress:
		m.ResetAddress()
		return nil
	case vendorlocation.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case vendorlocation.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case vendorlocation.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown VendorLocation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VendorLocationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VendorLocationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VendorLocationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VendorLocationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VendorLocationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VendorLocationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VendorLocationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VendorLocation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VendorLocationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VendorLocation edge %s", name)
}
