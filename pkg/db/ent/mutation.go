// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGoodInfo = "GoodInfo"
)

// GoodInfoMutation represents an operation that mutates the GoodInfo nodes in the graph.
type GoodInfoMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	device_info_id        *uuid.UUID
	gas_price             *int
	addgas_price          *int
	separate_gas_fee      *bool
	unit_power            *float64
	addunit_power         *float64
	duration              *int
	addduration           *int
	coin_info_id          *uuid.UUID
	actuals               *bool
	delivery_time         *time.Time
	inherit_from_good_id  *uuid.UUID
	vendor_location_id    *uuid.UUID
	price                 *int
	addprice              *int
	benefit_type          *string
	classic               *bool
	support_coin_type_ids *[]uuid.UUID
	reviewer_id           *uuid.UUID
	state                 *string
	_Total                *int
	add_Total             *int
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*GoodInfo, error)
	predicates            []predicate.GoodInfo
}

var _ ent.Mutation = (*GoodInfoMutation)(nil)

// goodinfoOption allows management of the mutation configuration using functional options.
type goodinfoOption func(*GoodInfoMutation)

// newGoodInfoMutation creates new mutation for the GoodInfo entity.
func newGoodInfoMutation(c config, op Op, opts ...goodinfoOption) *GoodInfoMutation {
	m := &GoodInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodInfoID sets the ID field of the mutation.
func withGoodInfoID(id uuid.UUID) goodinfoOption {
	return func(m *GoodInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodInfo
		)
		m.oldValue = func(ctx context.Context) (*GoodInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodInfo sets the old GoodInfo of the mutation.
func withGoodInfo(node *GoodInfo) goodinfoOption {
	return func(m *GoodInfoMutation) {
		m.oldValue = func(context.Context) (*GoodInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodInfo entities.
func (m *GoodInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDeviceInfoID sets the "device_info_id" field.
func (m *GoodInfoMutation) SetDeviceInfoID(u uuid.UUID) {
	m.device_info_id = &u
}

// DeviceInfoID returns the value of the "device_info_id" field in the mutation.
func (m *GoodInfoMutation) DeviceInfoID() (r uuid.UUID, exists bool) {
	v := m.device_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceInfoID returns the old "device_info_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeviceInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeviceInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeviceInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceInfoID: %w", err)
	}
	return oldValue.DeviceInfoID, nil
}

// ResetDeviceInfoID resets all changes to the "device_info_id" field.
func (m *GoodInfoMutation) ResetDeviceInfoID() {
	m.device_info_id = nil
}

// SetGasPrice sets the "gas_price" field.
func (m *GoodInfoMutation) SetGasPrice(i int) {
	m.gas_price = &i
	m.addgas_price = nil
}

// GasPrice returns the value of the "gas_price" field in the mutation.
func (m *GoodInfoMutation) GasPrice() (r int, exists bool) {
	v := m.gas_price
	if v == nil {
		return
	}
	return *v, true
}

// OldGasPrice returns the old "gas_price" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldGasPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGasPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGasPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasPrice: %w", err)
	}
	return oldValue.GasPrice, nil
}

// AddGasPrice adds i to the "gas_price" field.
func (m *GoodInfoMutation) AddGasPrice(i int) {
	if m.addgas_price != nil {
		*m.addgas_price += i
	} else {
		m.addgas_price = &i
	}
}

// AddedGasPrice returns the value that was added to the "gas_price" field in this mutation.
func (m *GoodInfoMutation) AddedGasPrice() (r int, exists bool) {
	v := m.addgas_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetGasPrice resets all changes to the "gas_price" field.
func (m *GoodInfoMutation) ResetGasPrice() {
	m.gas_price = nil
	m.addgas_price = nil
}

// SetSeparateGasFee sets the "separate_gas_fee" field.
func (m *GoodInfoMutation) SetSeparateGasFee(b bool) {
	m.separate_gas_fee = &b
}

// SeparateGasFee returns the value of the "separate_gas_fee" field in the mutation.
func (m *GoodInfoMutation) SeparateGasFee() (r bool, exists bool) {
	v := m.separate_gas_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldSeparateGasFee returns the old "separate_gas_fee" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldSeparateGasFee(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSeparateGasFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSeparateGasFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeparateGasFee: %w", err)
	}
	return oldValue.SeparateGasFee, nil
}

// ResetSeparateGasFee resets all changes to the "separate_gas_fee" field.
func (m *GoodInfoMutation) ResetSeparateGasFee() {
	m.separate_gas_fee = nil
}

// SetUnitPower sets the "unit_power" field.
func (m *GoodInfoMutation) SetUnitPower(f float64) {
	m.unit_power = &f
	m.addunit_power = nil
}

// UnitPower returns the value of the "unit_power" field in the mutation.
func (m *GoodInfoMutation) UnitPower() (r float64, exists bool) {
	v := m.unit_power
	if v == nil {
		return
	}
	return *v, true
}

// OldUnitPower returns the old "unit_power" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldUnitPower(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnitPower is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnitPower requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnitPower: %w", err)
	}
	return oldValue.UnitPower, nil
}

// AddUnitPower adds f to the "unit_power" field.
func (m *GoodInfoMutation) AddUnitPower(f float64) {
	if m.addunit_power != nil {
		*m.addunit_power += f
	} else {
		m.addunit_power = &f
	}
}

// AddedUnitPower returns the value that was added to the "unit_power" field in this mutation.
func (m *GoodInfoMutation) AddedUnitPower() (r float64, exists bool) {
	v := m.addunit_power
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnitPower resets all changes to the "unit_power" field.
func (m *GoodInfoMutation) ResetUnitPower() {
	m.unit_power = nil
	m.addunit_power = nil
}

// SetDuration sets the "duration" field.
func (m *GoodInfoMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *GoodInfoMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *GoodInfoMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *GoodInfoMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *GoodInfoMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetCoinInfoID sets the "coin_info_id" field.
func (m *GoodInfoMutation) SetCoinInfoID(u uuid.UUID) {
	m.coin_info_id = &u
}

// CoinInfoID returns the value of the "coin_info_id" field in the mutation.
func (m *GoodInfoMutation) CoinInfoID() (r uuid.UUID, exists bool) {
	v := m.coin_info_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinInfoID returns the old "coin_info_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldCoinInfoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCoinInfoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCoinInfoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinInfoID: %w", err)
	}
	return oldValue.CoinInfoID, nil
}

// ResetCoinInfoID resets all changes to the "coin_info_id" field.
func (m *GoodInfoMutation) ResetCoinInfoID() {
	m.coin_info_id = nil
}

// SetActuals sets the "actuals" field.
func (m *GoodInfoMutation) SetActuals(b bool) {
	m.actuals = &b
}

// Actuals returns the value of the "actuals" field in the mutation.
func (m *GoodInfoMutation) Actuals() (r bool, exists bool) {
	v := m.actuals
	if v == nil {
		return
	}
	return *v, true
}

// OldActuals returns the old "actuals" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldActuals(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActuals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActuals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActuals: %w", err)
	}
	return oldValue.Actuals, nil
}

// ResetActuals resets all changes to the "actuals" field.
func (m *GoodInfoMutation) ResetActuals() {
	m.actuals = nil
}

// SetDeliveryTime sets the "delivery_time" field.
func (m *GoodInfoMutation) SetDeliveryTime(t time.Time) {
	m.delivery_time = &t
}

// DeliveryTime returns the value of the "delivery_time" field in the mutation.
func (m *GoodInfoMutation) DeliveryTime() (r time.Time, exists bool) {
	v := m.delivery_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveryTime returns the old "delivery_time" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldDeliveryTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeliveryTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeliveryTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveryTime: %w", err)
	}
	return oldValue.DeliveryTime, nil
}

// ResetDeliveryTime resets all changes to the "delivery_time" field.
func (m *GoodInfoMutation) ResetDeliveryTime() {
	m.delivery_time = nil
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (m *GoodInfoMutation) SetInheritFromGoodID(u uuid.UUID) {
	m.inherit_from_good_id = &u
}

// InheritFromGoodID returns the value of the "inherit_from_good_id" field in the mutation.
func (m *GoodInfoMutation) InheritFromGoodID() (r uuid.UUID, exists bool) {
	v := m.inherit_from_good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInheritFromGoodID returns the old "inherit_from_good_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldInheritFromGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInheritFromGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInheritFromGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInheritFromGoodID: %w", err)
	}
	return oldValue.InheritFromGoodID, nil
}

// ResetInheritFromGoodID resets all changes to the "inherit_from_good_id" field.
func (m *GoodInfoMutation) ResetInheritFromGoodID() {
	m.inherit_from_good_id = nil
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (m *GoodInfoMutation) SetVendorLocationID(u uuid.UUID) {
	m.vendor_location_id = &u
}

// VendorLocationID returns the value of the "vendor_location_id" field in the mutation.
func (m *GoodInfoMutation) VendorLocationID() (r uuid.UUID, exists bool) {
	v := m.vendor_location_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVendorLocationID returns the old "vendor_location_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldVendorLocationID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVendorLocationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVendorLocationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVendorLocationID: %w", err)
	}
	return oldValue.VendorLocationID, nil
}

// ResetVendorLocationID resets all changes to the "vendor_location_id" field.
func (m *GoodInfoMutation) ResetVendorLocationID() {
	m.vendor_location_id = nil
}

// SetPrice sets the "price" field.
func (m *GoodInfoMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *GoodInfoMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *GoodInfoMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *GoodInfoMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *GoodInfoMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetBenefitType sets the "benefit_type" field.
func (m *GoodInfoMutation) SetBenefitType(s string) {
	m.benefit_type = &s
}

// BenefitType returns the value of the "benefit_type" field in the mutation.
func (m *GoodInfoMutation) BenefitType() (r string, exists bool) {
	v := m.benefit_type
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitType returns the old "benefit_type" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldBenefitType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBenefitType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBenefitType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitType: %w", err)
	}
	return oldValue.BenefitType, nil
}

// ResetBenefitType resets all changes to the "benefit_type" field.
func (m *GoodInfoMutation) ResetBenefitType() {
	m.benefit_type = nil
}

// SetClassic sets the "classic" field.
func (m *GoodInfoMutation) SetClassic(b bool) {
	m.classic = &b
}

// Classic returns the value of the "classic" field in the mutation.
func (m *GoodInfoMutation) Classic() (r bool, exists bool) {
	v := m.classic
	if v == nil {
		return
	}
	return *v, true
}

// OldClassic returns the old "classic" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldClassic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClassic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClassic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassic: %w", err)
	}
	return oldValue.Classic, nil
}

// ResetClassic resets all changes to the "classic" field.
func (m *GoodInfoMutation) ResetClassic() {
	m.classic = nil
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (m *GoodInfoMutation) SetSupportCoinTypeIds(u []uuid.UUID) {
	m.support_coin_type_ids = &u
}

// SupportCoinTypeIds returns the value of the "support_coin_type_ids" field in the mutation.
func (m *GoodInfoMutation) SupportCoinTypeIds() (r []uuid.UUID, exists bool) {
	v := m.support_coin_type_ids
	if v == nil {
		return
	}
	return *v, true
}

// OldSupportCoinTypeIds returns the old "support_coin_type_ids" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldSupportCoinTypeIds(ctx context.Context) (v []uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSupportCoinTypeIds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSupportCoinTypeIds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSupportCoinTypeIds: %w", err)
	}
	return oldValue.SupportCoinTypeIds, nil
}

// ResetSupportCoinTypeIds resets all changes to the "support_coin_type_ids" field.
func (m *GoodInfoMutation) ResetSupportCoinTypeIds() {
	m.support_coin_type_ids = nil
}

// SetReviewerID sets the "reviewer_id" field.
func (m *GoodInfoMutation) SetReviewerID(u uuid.UUID) {
	m.reviewer_id = &u
}

// ReviewerID returns the value of the "reviewer_id" field in the mutation.
func (m *GoodInfoMutation) ReviewerID() (r uuid.UUID, exists bool) {
	v := m.reviewer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewerID returns the old "reviewer_id" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldReviewerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldReviewerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldReviewerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewerID: %w", err)
	}
	return oldValue.ReviewerID, nil
}

// ResetReviewerID resets all changes to the "reviewer_id" field.
func (m *GoodInfoMutation) ResetReviewerID() {
	m.reviewer_id = nil
}

// SetState sets the "state" field.
func (m *GoodInfoMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *GoodInfoMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *GoodInfoMutation) ResetState() {
	m.state = nil
}

// SetTotal sets the "Total" field.
func (m *GoodInfoMutation) SetTotal(i int) {
	m._Total = &i
	m.add_Total = nil
}

// Total returns the value of the "Total" field in the mutation.
func (m *GoodInfoMutation) Total() (r int, exists bool) {
	v := m._Total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "Total" field's value of the GoodInfo entity.
// If the GoodInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodInfoMutation) OldTotal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds i to the "Total" field.
func (m *GoodInfoMutation) AddTotal(i int) {
	if m.add_Total != nil {
		*m.add_Total += i
	} else {
		m.add_Total = &i
	}
}

// AddedTotal returns the value that was added to the "Total" field in this mutation.
func (m *GoodInfoMutation) AddedTotal() (r int, exists bool) {
	v := m.add_Total
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotal resets all changes to the "Total" field.
func (m *GoodInfoMutation) ResetTotal() {
	m._Total = nil
	m.add_Total = nil
}

// Where appends a list predicates to the GoodInfoMutation builder.
func (m *GoodInfoMutation) Where(ps ...predicate.GoodInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodInfo).
func (m *GoodInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodInfoMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.device_info_id != nil {
		fields = append(fields, goodinfo.FieldDeviceInfoID)
	}
	if m.gas_price != nil {
		fields = append(fields, goodinfo.FieldGasPrice)
	}
	if m.separate_gas_fee != nil {
		fields = append(fields, goodinfo.FieldSeparateGasFee)
	}
	if m.unit_power != nil {
		fields = append(fields, goodinfo.FieldUnitPower)
	}
	if m.duration != nil {
		fields = append(fields, goodinfo.FieldDuration)
	}
	if m.coin_info_id != nil {
		fields = append(fields, goodinfo.FieldCoinInfoID)
	}
	if m.actuals != nil {
		fields = append(fields, goodinfo.FieldActuals)
	}
	if m.delivery_time != nil {
		fields = append(fields, goodinfo.FieldDeliveryTime)
	}
	if m.inherit_from_good_id != nil {
		fields = append(fields, goodinfo.FieldInheritFromGoodID)
	}
	if m.vendor_location_id != nil {
		fields = append(fields, goodinfo.FieldVendorLocationID)
	}
	if m.price != nil {
		fields = append(fields, goodinfo.FieldPrice)
	}
	if m.benefit_type != nil {
		fields = append(fields, goodinfo.FieldBenefitType)
	}
	if m.classic != nil {
		fields = append(fields, goodinfo.FieldClassic)
	}
	if m.support_coin_type_ids != nil {
		fields = append(fields, goodinfo.FieldSupportCoinTypeIds)
	}
	if m.reviewer_id != nil {
		fields = append(fields, goodinfo.FieldReviewerID)
	}
	if m.state != nil {
		fields = append(fields, goodinfo.FieldState)
	}
	if m._Total != nil {
		fields = append(fields, goodinfo.FieldTotal)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		return m.DeviceInfoID()
	case goodinfo.FieldGasPrice:
		return m.GasPrice()
	case goodinfo.FieldSeparateGasFee:
		return m.SeparateGasFee()
	case goodinfo.FieldUnitPower:
		return m.UnitPower()
	case goodinfo.FieldDuration:
		return m.Duration()
	case goodinfo.FieldCoinInfoID:
		return m.CoinInfoID()
	case goodinfo.FieldActuals:
		return m.Actuals()
	case goodinfo.FieldDeliveryTime:
		return m.DeliveryTime()
	case goodinfo.FieldInheritFromGoodID:
		return m.InheritFromGoodID()
	case goodinfo.FieldVendorLocationID:
		return m.VendorLocationID()
	case goodinfo.FieldPrice:
		return m.Price()
	case goodinfo.FieldBenefitType:
		return m.BenefitType()
	case goodinfo.FieldClassic:
		return m.Classic()
	case goodinfo.FieldSupportCoinTypeIds:
		return m.SupportCoinTypeIds()
	case goodinfo.FieldReviewerID:
		return m.ReviewerID()
	case goodinfo.FieldState:
		return m.State()
	case goodinfo.FieldTotal:
		return m.Total()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		return m.OldDeviceInfoID(ctx)
	case goodinfo.FieldGasPrice:
		return m.OldGasPrice(ctx)
	case goodinfo.FieldSeparateGasFee:
		return m.OldSeparateGasFee(ctx)
	case goodinfo.FieldUnitPower:
		return m.OldUnitPower(ctx)
	case goodinfo.FieldDuration:
		return m.OldDuration(ctx)
	case goodinfo.FieldCoinInfoID:
		return m.OldCoinInfoID(ctx)
	case goodinfo.FieldActuals:
		return m.OldActuals(ctx)
	case goodinfo.FieldDeliveryTime:
		return m.OldDeliveryTime(ctx)
	case goodinfo.FieldInheritFromGoodID:
		return m.OldInheritFromGoodID(ctx)
	case goodinfo.FieldVendorLocationID:
		return m.OldVendorLocationID(ctx)
	case goodinfo.FieldPrice:
		return m.OldPrice(ctx)
	case goodinfo.FieldBenefitType:
		return m.OldBenefitType(ctx)
	case goodinfo.FieldClassic:
		return m.OldClassic(ctx)
	case goodinfo.FieldSupportCoinTypeIds:
		return m.OldSupportCoinTypeIds(ctx)
	case goodinfo.FieldReviewerID:
		return m.OldReviewerID(ctx)
	case goodinfo.FieldState:
		return m.OldState(ctx)
	case goodinfo.FieldTotal:
		return m.OldTotal(ctx)
	}
	return nil, fmt.Errorf("unknown GoodInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceInfoID(v)
		return nil
	case goodinfo.FieldGasPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasPrice(v)
		return nil
	case goodinfo.FieldSeparateGasFee:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeparateGasFee(v)
		return nil
	case goodinfo.FieldUnitPower:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnitPower(v)
		return nil
	case goodinfo.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case goodinfo.FieldCoinInfoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinInfoID(v)
		return nil
	case goodinfo.FieldActuals:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActuals(v)
		return nil
	case goodinfo.FieldDeliveryTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveryTime(v)
		return nil
	case goodinfo.FieldInheritFromGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInheritFromGoodID(v)
		return nil
	case goodinfo.FieldVendorLocationID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVendorLocationID(v)
		return nil
	case goodinfo.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case goodinfo.FieldBenefitType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitType(v)
		return nil
	case goodinfo.FieldClassic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassic(v)
		return nil
	case goodinfo.FieldSupportCoinTypeIds:
		v, ok := value.([]uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSupportCoinTypeIds(v)
		return nil
	case goodinfo.FieldReviewerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewerID(v)
		return nil
	case goodinfo.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case goodinfo.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	}
	return fmt.Errorf("unknown GoodInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodInfoMutation) AddedFields() []string {
	var fields []string
	if m.addgas_price != nil {
		fields = append(fields, goodinfo.FieldGasPrice)
	}
	if m.addunit_power != nil {
		fields = append(fields, goodinfo.FieldUnitPower)
	}
	if m.addduration != nil {
		fields = append(fields, goodinfo.FieldDuration)
	}
	if m.addprice != nil {
		fields = append(fields, goodinfo.FieldPrice)
	}
	if m.add_Total != nil {
		fields = append(fields, goodinfo.FieldTotal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodinfo.FieldGasPrice:
		return m.AddedGasPrice()
	case goodinfo.FieldUnitPower:
		return m.AddedUnitPower()
	case goodinfo.FieldDuration:
		return m.AddedDuration()
	case goodinfo.FieldPrice:
		return m.AddedPrice()
	case goodinfo.FieldTotal:
		return m.AddedTotal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodinfo.FieldGasPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGasPrice(v)
		return nil
	case goodinfo.FieldUnitPower:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnitPower(v)
		return nil
	case goodinfo.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case goodinfo.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case goodinfo.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	}
	return fmt.Errorf("unknown GoodInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodInfoMutation) ResetField(name string) error {
	switch name {
	case goodinfo.FieldDeviceInfoID:
		m.ResetDeviceInfoID()
		return nil
	case goodinfo.FieldGasPrice:
		m.ResetGasPrice()
		return nil
	case goodinfo.FieldSeparateGasFee:
		m.ResetSeparateGasFee()
		return nil
	case goodinfo.FieldUnitPower:
		m.ResetUnitPower()
		return nil
	case goodinfo.FieldDuration:
		m.ResetDuration()
		return nil
	case goodinfo.FieldCoinInfoID:
		m.ResetCoinInfoID()
		return nil
	case goodinfo.FieldActuals:
		m.ResetActuals()
		return nil
	case goodinfo.FieldDeliveryTime:
		m.ResetDeliveryTime()
		return nil
	case goodinfo.FieldInheritFromGoodID:
		m.ResetInheritFromGoodID()
		return nil
	case goodinfo.FieldVendorLocationID:
		m.ResetVendorLocationID()
		return nil
	case goodinfo.FieldPrice:
		m.ResetPrice()
		return nil
	case goodinfo.FieldBenefitType:
		m.ResetBenefitType()
		return nil
	case goodinfo.FieldClassic:
		m.ResetClassic()
		return nil
	case goodinfo.FieldSupportCoinTypeIds:
		m.ResetSupportCoinTypeIds()
		return nil
	case goodinfo.FieldReviewerID:
		m.ResetReviewerID()
		return nil
	case goodinfo.FieldState:
		m.ResetState()
		return nil
	case goodinfo.FieldTotal:
		m.ResetTotal()
		return nil
	}
	return fmt.Errorf("unknown GoodInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodInfo edge %s", name)
}
