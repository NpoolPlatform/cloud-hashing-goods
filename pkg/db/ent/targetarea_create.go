// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/targetarea"
	"github.com/google/uuid"
)

// TargetAreaCreate is the builder for creating a TargetArea entity.
type TargetAreaCreate struct {
	config
	mutation *TargetAreaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContinent sets the "continent" field.
func (tac *TargetAreaCreate) SetContinent(s string) *TargetAreaCreate {
	tac.mutation.SetContinent(s)
	return tac
}

// SetCountry sets the "country" field.
func (tac *TargetAreaCreate) SetCountry(s string) *TargetAreaCreate {
	tac.mutation.SetCountry(s)
	return tac
}

// SetCreateAt sets the "create_at" field.
func (tac *TargetAreaCreate) SetCreateAt(t time.Time) *TargetAreaCreate {
	tac.mutation.SetCreateAt(t)
	return tac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (tac *TargetAreaCreate) SetNillableCreateAt(t *time.Time) *TargetAreaCreate {
	if t != nil {
		tac.SetCreateAt(*t)
	}
	return tac
}

// SetUpdateAt sets the "update_at" field.
func (tac *TargetAreaCreate) SetUpdateAt(t time.Time) *TargetAreaCreate {
	tac.mutation.SetUpdateAt(t)
	return tac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tac *TargetAreaCreate) SetNillableUpdateAt(t *time.Time) *TargetAreaCreate {
	if t != nil {
		tac.SetUpdateAt(*t)
	}
	return tac
}

// SetDeleteAt sets the "delete_at" field.
func (tac *TargetAreaCreate) SetDeleteAt(t time.Time) *TargetAreaCreate {
	tac.mutation.SetDeleteAt(t)
	return tac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (tac *TargetAreaCreate) SetNillableDeleteAt(t *time.Time) *TargetAreaCreate {
	if t != nil {
		tac.SetDeleteAt(*t)
	}
	return tac
}

// SetID sets the "id" field.
func (tac *TargetAreaCreate) SetID(u uuid.UUID) *TargetAreaCreate {
	tac.mutation.SetID(u)
	return tac
}

// Mutation returns the TargetAreaMutation object of the builder.
func (tac *TargetAreaCreate) Mutation() *TargetAreaMutation {
	return tac.mutation
}

// Save creates the TargetArea in the database.
func (tac *TargetAreaCreate) Save(ctx context.Context) (*TargetArea, error) {
	var (
		err  error
		node *TargetArea
	)
	tac.defaults()
	if len(tac.hooks) == 0 {
		if err = tac.check(); err != nil {
			return nil, err
		}
		node, err = tac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TargetAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tac.check(); err != nil {
				return nil, err
			}
			tac.mutation = mutation
			if node, err = tac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tac.hooks) - 1; i >= 0; i-- {
			if tac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TargetAreaCreate) SaveX(ctx context.Context) *TargetArea {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TargetAreaCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TargetAreaCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tac *TargetAreaCreate) defaults() {
	if _, ok := tac.mutation.CreateAt(); !ok {
		v := targetarea.DefaultCreateAt()
		tac.mutation.SetCreateAt(v)
	}
	if _, ok := tac.mutation.UpdateAt(); !ok {
		v := targetarea.DefaultUpdateAt()
		tac.mutation.SetUpdateAt(v)
	}
	if _, ok := tac.mutation.ID(); !ok {
		v := targetarea.DefaultID()
		tac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TargetAreaCreate) check() error {
	if _, ok := tac.mutation.Continent(); !ok {
		return &ValidationError{Name: "continent", err: errors.New(`ent: missing required field "continent"`)}
	}
	if v, ok := tac.mutation.Continent(); ok {
		if err := targetarea.ContinentValidator(v); err != nil {
			return &ValidationError{Name: "continent", err: fmt.Errorf(`ent: validator failed for field "continent": %w`, err)}
		}
	}
	if _, ok := tac.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "country"`)}
	}
	if v, ok := tac.mutation.Country(); ok {
		if err := targetarea.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "country": %w`, err)}
		}
	}
	if _, ok := tac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := tac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	return nil
}

func (tac *TargetAreaCreate) sqlSave(ctx context.Context) (*TargetArea, error) {
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (tac *TargetAreaCreate) createSpec() (*TargetArea, *sqlgraph.CreateSpec) {
	var (
		_node = &TargetArea{config: tac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: targetarea.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: targetarea.FieldID,
			},
		}
	)
	_spec.OnConflict = tac.conflict
	if id, ok := tac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tac.mutation.Continent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: targetarea.FieldContinent,
		})
		_node.Continent = value
	}
	if value, ok := tac.mutation.Country(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: targetarea.FieldCountry,
		})
		_node.Country = value
	}
	if value, ok := tac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: targetarea.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := tac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: targetarea.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := tac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: targetarea.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TargetArea.Create().
//		SetContinent(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetAreaUpsert) {
//			SetContinent(v+v).
//		}).
//		Exec(ctx)
//
func (tac *TargetAreaCreate) OnConflict(opts ...sql.ConflictOption) *TargetAreaUpsertOne {
	tac.conflict = opts
	return &TargetAreaUpsertOne{
		create: tac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TargetArea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tac *TargetAreaCreate) OnConflictColumns(columns ...string) *TargetAreaUpsertOne {
	tac.conflict = append(tac.conflict, sql.ConflictColumns(columns...))
	return &TargetAreaUpsertOne{
		create: tac,
	}
}

type (
	// TargetAreaUpsertOne is the builder for "upsert"-ing
	//  one TargetArea node.
	TargetAreaUpsertOne struct {
		create *TargetAreaCreate
	}

	// TargetAreaUpsert is the "OnConflict" setter.
	TargetAreaUpsert struct {
		*sql.UpdateSet
	}
)

// SetContinent sets the "continent" field.
func (u *TargetAreaUpsert) SetContinent(v string) *TargetAreaUpsert {
	u.Set(targetarea.FieldContinent, v)
	return u
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *TargetAreaUpsert) UpdateContinent() *TargetAreaUpsert {
	u.SetExcluded(targetarea.FieldContinent)
	return u
}

// SetCountry sets the "country" field.
func (u *TargetAreaUpsert) SetCountry(v string) *TargetAreaUpsert {
	u.Set(targetarea.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *TargetAreaUpsert) UpdateCountry() *TargetAreaUpsert {
	u.SetExcluded(targetarea.FieldCountry)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *TargetAreaUpsert) SetCreateAt(v time.Time) *TargetAreaUpsert {
	u.Set(targetarea.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *TargetAreaUpsert) UpdateCreateAt() *TargetAreaUpsert {
	u.SetExcluded(targetarea.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *TargetAreaUpsert) SetUpdateAt(v time.Time) *TargetAreaUpsert {
	u.Set(targetarea.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *TargetAreaUpsert) UpdateUpdateAt() *TargetAreaUpsert {
	u.SetExcluded(targetarea.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *TargetAreaUpsert) SetDeleteAt(v time.Time) *TargetAreaUpsert {
	u.Set(targetarea.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *TargetAreaUpsert) UpdateDeleteAt() *TargetAreaUpsert {
	u.SetExcluded(targetarea.FieldDeleteAt)
	return u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (u *TargetAreaUpsert) ClearDeleteAt() *TargetAreaUpsert {
	u.SetNull(targetarea.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TargetArea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(targetarea.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TargetAreaUpsertOne) UpdateNewValues() *TargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(targetarea.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TargetArea.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TargetAreaUpsertOne) Ignore() *TargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetAreaUpsertOne) DoNothing() *TargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetAreaCreate.OnConflict
// documentation for more info.
func (u *TargetAreaUpsertOne) Update(set func(*TargetAreaUpsert)) *TargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetAreaUpsert{UpdateSet: update})
	}))
	return u
}

// SetContinent sets the "continent" field.
func (u *TargetAreaUpsertOne) SetContinent(v string) *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetContinent(v)
	})
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *TargetAreaUpsertOne) UpdateContinent() *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateContinent()
	})
}

// SetCountry sets the "country" field.
func (u *TargetAreaUpsertOne) SetCountry(v string) *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *TargetAreaUpsertOne) UpdateCountry() *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateCountry()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *TargetAreaUpsertOne) SetCreateAt(v time.Time) *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *TargetAreaUpsertOne) UpdateCreateAt() *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *TargetAreaUpsertOne) SetUpdateAt(v time.Time) *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *TargetAreaUpsertOne) UpdateUpdateAt() *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *TargetAreaUpsertOne) SetDeleteAt(v time.Time) *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *TargetAreaUpsertOne) UpdateDeleteAt() *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateDeleteAt()
	})
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (u *TargetAreaUpsertOne) ClearDeleteAt() *TargetAreaUpsertOne {
	return u.Update(func(s *TargetAreaUpsert) {
		s.ClearDeleteAt()
	})
}

// Exec executes the query.
func (u *TargetAreaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetAreaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetAreaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TargetAreaUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TargetAreaUpsertOne.ID is not supported by MySQL driver. Use TargetAreaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TargetAreaUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TargetAreaCreateBulk is the builder for creating many TargetArea entities in bulk.
type TargetAreaCreateBulk struct {
	config
	builders []*TargetAreaCreate
	conflict []sql.ConflictOption
}

// Save creates the TargetArea entities in the database.
func (tacb *TargetAreaCreateBulk) Save(ctx context.Context) ([]*TargetArea, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TargetArea, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TargetAreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TargetAreaCreateBulk) SaveX(ctx context.Context) []*TargetArea {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TargetAreaCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TargetAreaCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TargetArea.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TargetAreaUpsert) {
//			SetContinent(v+v).
//		}).
//		Exec(ctx)
//
func (tacb *TargetAreaCreateBulk) OnConflict(opts ...sql.ConflictOption) *TargetAreaUpsertBulk {
	tacb.conflict = opts
	return &TargetAreaUpsertBulk{
		create: tacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TargetArea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tacb *TargetAreaCreateBulk) OnConflictColumns(columns ...string) *TargetAreaUpsertBulk {
	tacb.conflict = append(tacb.conflict, sql.ConflictColumns(columns...))
	return &TargetAreaUpsertBulk{
		create: tacb,
	}
}

// TargetAreaUpsertBulk is the builder for "upsert"-ing
// a bulk of TargetArea nodes.
type TargetAreaUpsertBulk struct {
	create *TargetAreaCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TargetArea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(targetarea.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TargetAreaUpsertBulk) UpdateNewValues() *TargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(targetarea.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TargetArea.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TargetAreaUpsertBulk) Ignore() *TargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TargetAreaUpsertBulk) DoNothing() *TargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TargetAreaCreateBulk.OnConflict
// documentation for more info.
func (u *TargetAreaUpsertBulk) Update(set func(*TargetAreaUpsert)) *TargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TargetAreaUpsert{UpdateSet: update})
	}))
	return u
}

// SetContinent sets the "continent" field.
func (u *TargetAreaUpsertBulk) SetContinent(v string) *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetContinent(v)
	})
}

// UpdateContinent sets the "continent" field to the value that was provided on create.
func (u *TargetAreaUpsertBulk) UpdateContinent() *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateContinent()
	})
}

// SetCountry sets the "country" field.
func (u *TargetAreaUpsertBulk) SetCountry(v string) *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *TargetAreaUpsertBulk) UpdateCountry() *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateCountry()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *TargetAreaUpsertBulk) SetCreateAt(v time.Time) *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *TargetAreaUpsertBulk) UpdateCreateAt() *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *TargetAreaUpsertBulk) SetUpdateAt(v time.Time) *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *TargetAreaUpsertBulk) UpdateUpdateAt() *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *TargetAreaUpsertBulk) SetDeleteAt(v time.Time) *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *TargetAreaUpsertBulk) UpdateDeleteAt() *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.UpdateDeleteAt()
	})
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (u *TargetAreaUpsertBulk) ClearDeleteAt() *TargetAreaUpsertBulk {
	return u.Update(func(s *TargetAreaUpsert) {
		s.ClearDeleteAt()
	})
}

// Exec executes the query.
func (u *TargetAreaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TargetAreaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TargetAreaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TargetAreaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
