// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodreview"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodReviewUpdate is the builder for updating GoodReview entities.
type GoodReviewUpdate struct {
	config
	hooks    []Hook
	mutation *GoodReviewMutation
}

// Where appends a list predicates to the GoodReviewUpdate builder.
func (gru *GoodReviewUpdate) Where(ps ...predicate.GoodReview) *GoodReviewUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetEntityType sets the "entity_type" field.
func (gru *GoodReviewUpdate) SetEntityType(gt goodreview.EntityType) *GoodReviewUpdate {
	gru.mutation.SetEntityType(gt)
	return gru
}

// SetReviewedID sets the "reviewed_id" field.
func (gru *GoodReviewUpdate) SetReviewedID(u uuid.UUID) *GoodReviewUpdate {
	gru.mutation.SetReviewedID(u)
	return gru
}

// SetReviewerID sets the "reviewer_id" field.
func (gru *GoodReviewUpdate) SetReviewerID(u uuid.UUID) *GoodReviewUpdate {
	gru.mutation.SetReviewerID(u)
	return gru
}

// SetState sets the "state" field.
func (gru *GoodReviewUpdate) SetState(_go goodreview.State) *GoodReviewUpdate {
	gru.mutation.SetState(_go)
	return gru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gru *GoodReviewUpdate) SetNillableState(_go *goodreview.State) *GoodReviewUpdate {
	if _go != nil {
		gru.SetState(*_go)
	}
	return gru
}

// SetMessage sets the "message" field.
func (gru *GoodReviewUpdate) SetMessage(s string) *GoodReviewUpdate {
	gru.mutation.SetMessage(s)
	return gru
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gru *GoodReviewUpdate) SetNillableMessage(s *string) *GoodReviewUpdate {
	if s != nil {
		gru.SetMessage(*s)
	}
	return gru
}

// SetCreateAt sets the "create_at" field.
func (gru *GoodReviewUpdate) SetCreateAt(i int64) *GoodReviewUpdate {
	gru.mutation.ResetCreateAt()
	gru.mutation.SetCreateAt(i)
	return gru
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gru *GoodReviewUpdate) SetNillableCreateAt(i *int64) *GoodReviewUpdate {
	if i != nil {
		gru.SetCreateAt(*i)
	}
	return gru
}

// AddCreateAt adds i to the "create_at" field.
func (gru *GoodReviewUpdate) AddCreateAt(i int64) *GoodReviewUpdate {
	gru.mutation.AddCreateAt(i)
	return gru
}

// SetUpdateAt sets the "update_at" field.
func (gru *GoodReviewUpdate) SetUpdateAt(i int64) *GoodReviewUpdate {
	gru.mutation.ResetUpdateAt()
	gru.mutation.SetUpdateAt(i)
	return gru
}

// AddUpdateAt adds i to the "update_at" field.
func (gru *GoodReviewUpdate) AddUpdateAt(i int64) *GoodReviewUpdate {
	gru.mutation.AddUpdateAt(i)
	return gru
}

// SetDeleteAt sets the "delete_at" field.
func (gru *GoodReviewUpdate) SetDeleteAt(i int64) *GoodReviewUpdate {
	gru.mutation.ResetDeleteAt()
	gru.mutation.SetDeleteAt(i)
	return gru
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gru *GoodReviewUpdate) SetNillableDeleteAt(i *int64) *GoodReviewUpdate {
	if i != nil {
		gru.SetDeleteAt(*i)
	}
	return gru
}

// AddDeleteAt adds i to the "delete_at" field.
func (gru *GoodReviewUpdate) AddDeleteAt(i int64) *GoodReviewUpdate {
	gru.mutation.AddDeleteAt(i)
	return gru
}

// Mutation returns the GoodReviewMutation object of the builder.
func (gru *GoodReviewUpdate) Mutation() *GoodReviewMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GoodReviewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gru.defaults()
	if len(gru.hooks) == 0 {
		if err = gru.check(); err != nil {
			return 0, err
		}
		affected, err = gru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gru.check(); err != nil {
				return 0, err
			}
			gru.mutation = mutation
			affected, err = gru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gru.hooks) - 1; i >= 0; i-- {
			if gru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GoodReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GoodReviewUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GoodReviewUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GoodReviewUpdate) defaults() {
	if _, ok := gru.mutation.UpdateAt(); !ok {
		v := goodreview.UpdateDefaultUpdateAt()
		gru.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GoodReviewUpdate) check() error {
	if v, ok := gru.mutation.EntityType(); ok {
		if err := goodreview.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "GoodReview.entity_type": %w`, err)}
		}
	}
	if v, ok := gru.mutation.State(); ok {
		if err := goodreview.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "GoodReview.state": %w`, err)}
		}
	}
	return nil
}

func (gru *GoodReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodreview.Table,
			Columns: goodreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodreview.FieldID,
			},
		},
	}
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.EntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodreview.FieldEntityType,
		})
	}
	if value, ok := gru.mutation.ReviewedID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreview.FieldReviewedID,
		})
	}
	if value, ok := gru.mutation.ReviewerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreview.FieldReviewerID,
		})
	}
	if value, ok := gru.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodreview.FieldState,
		})
	}
	if value, ok := gru.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodreview.FieldMessage,
		})
	}
	if value, ok := gru.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldCreateAt,
		})
	}
	if value, ok := gru.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldCreateAt,
		})
	}
	if value, ok := gru.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldUpdateAt,
		})
	}
	if value, ok := gru.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldUpdateAt,
		})
	}
	if value, ok := gru.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldDeleteAt,
		})
	}
	if value, ok := gru.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodReviewUpdateOne is the builder for updating a single GoodReview entity.
type GoodReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodReviewMutation
}

// SetEntityType sets the "entity_type" field.
func (gruo *GoodReviewUpdateOne) SetEntityType(gt goodreview.EntityType) *GoodReviewUpdateOne {
	gruo.mutation.SetEntityType(gt)
	return gruo
}

// SetReviewedID sets the "reviewed_id" field.
func (gruo *GoodReviewUpdateOne) SetReviewedID(u uuid.UUID) *GoodReviewUpdateOne {
	gruo.mutation.SetReviewedID(u)
	return gruo
}

// SetReviewerID sets the "reviewer_id" field.
func (gruo *GoodReviewUpdateOne) SetReviewerID(u uuid.UUID) *GoodReviewUpdateOne {
	gruo.mutation.SetReviewerID(u)
	return gruo
}

// SetState sets the "state" field.
func (gruo *GoodReviewUpdateOne) SetState(_go goodreview.State) *GoodReviewUpdateOne {
	gruo.mutation.SetState(_go)
	return gruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (gruo *GoodReviewUpdateOne) SetNillableState(_go *goodreview.State) *GoodReviewUpdateOne {
	if _go != nil {
		gruo.SetState(*_go)
	}
	return gruo
}

// SetMessage sets the "message" field.
func (gruo *GoodReviewUpdateOne) SetMessage(s string) *GoodReviewUpdateOne {
	gruo.mutation.SetMessage(s)
	return gruo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gruo *GoodReviewUpdateOne) SetNillableMessage(s *string) *GoodReviewUpdateOne {
	if s != nil {
		gruo.SetMessage(*s)
	}
	return gruo
}

// SetCreateAt sets the "create_at" field.
func (gruo *GoodReviewUpdateOne) SetCreateAt(i int64) *GoodReviewUpdateOne {
	gruo.mutation.ResetCreateAt()
	gruo.mutation.SetCreateAt(i)
	return gruo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gruo *GoodReviewUpdateOne) SetNillableCreateAt(i *int64) *GoodReviewUpdateOne {
	if i != nil {
		gruo.SetCreateAt(*i)
	}
	return gruo
}

// AddCreateAt adds i to the "create_at" field.
func (gruo *GoodReviewUpdateOne) AddCreateAt(i int64) *GoodReviewUpdateOne {
	gruo.mutation.AddCreateAt(i)
	return gruo
}

// SetUpdateAt sets the "update_at" field.
func (gruo *GoodReviewUpdateOne) SetUpdateAt(i int64) *GoodReviewUpdateOne {
	gruo.mutation.ResetUpdateAt()
	gruo.mutation.SetUpdateAt(i)
	return gruo
}

// AddUpdateAt adds i to the "update_at" field.
func (gruo *GoodReviewUpdateOne) AddUpdateAt(i int64) *GoodReviewUpdateOne {
	gruo.mutation.AddUpdateAt(i)
	return gruo
}

// SetDeleteAt sets the "delete_at" field.
func (gruo *GoodReviewUpdateOne) SetDeleteAt(i int64) *GoodReviewUpdateOne {
	gruo.mutation.ResetDeleteAt()
	gruo.mutation.SetDeleteAt(i)
	return gruo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (gruo *GoodReviewUpdateOne) SetNillableDeleteAt(i *int64) *GoodReviewUpdateOne {
	if i != nil {
		gruo.SetDeleteAt(*i)
	}
	return gruo
}

// AddDeleteAt adds i to the "delete_at" field.
func (gruo *GoodReviewUpdateOne) AddDeleteAt(i int64) *GoodReviewUpdateOne {
	gruo.mutation.AddDeleteAt(i)
	return gruo
}

// Mutation returns the GoodReviewMutation object of the builder.
func (gruo *GoodReviewUpdateOne) Mutation() *GoodReviewMutation {
	return gruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GoodReviewUpdateOne) Select(field string, fields ...string) *GoodReviewUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GoodReview entity.
func (gruo *GoodReviewUpdateOne) Save(ctx context.Context) (*GoodReview, error) {
	var (
		err  error
		node *GoodReview
	)
	gruo.defaults()
	if len(gruo.hooks) == 0 {
		if err = gruo.check(); err != nil {
			return nil, err
		}
		node, err = gruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodReviewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gruo.check(); err != nil {
				return nil, err
			}
			gruo.mutation = mutation
			node, err = gruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gruo.hooks) - 1; i >= 0; i-- {
			if gruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GoodReviewUpdateOne) SaveX(ctx context.Context) *GoodReview {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GoodReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GoodReviewUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GoodReviewUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdateAt(); !ok {
		v := goodreview.UpdateDefaultUpdateAt()
		gruo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GoodReviewUpdateOne) check() error {
	if v, ok := gruo.mutation.EntityType(); ok {
		if err := goodreview.EntityTypeValidator(v); err != nil {
			return &ValidationError{Name: "entity_type", err: fmt.Errorf(`ent: validator failed for field "GoodReview.entity_type": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.State(); ok {
		if err := goodreview.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "GoodReview.state": %w`, err)}
		}
	}
	return nil
}

func (gruo *GoodReviewUpdateOne) sqlSave(ctx context.Context) (_node *GoodReview, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodreview.Table,
			Columns: goodreview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodreview.FieldID,
			},
		},
	}
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoodReview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodreview.FieldID)
		for _, f := range fields {
			if !goodreview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.EntityType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodreview.FieldEntityType,
		})
	}
	if value, ok := gruo.mutation.ReviewedID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreview.FieldReviewedID,
		})
	}
	if value, ok := gruo.mutation.ReviewerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodreview.FieldReviewerID,
		})
	}
	if value, ok := gruo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodreview.FieldState,
		})
	}
	if value, ok := gruo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodreview.FieldMessage,
		})
	}
	if value, ok := gruo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldCreateAt,
		})
	}
	if value, ok := gruo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldCreateAt,
		})
	}
	if value, ok := gruo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldUpdateAt,
		})
	}
	if value, ok := gruo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldUpdateAt,
		})
	}
	if value, ok := gruo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldDeleteAt,
		})
	}
	if value, ok := gruo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodreview.FieldDeleteAt,
		})
	}
	_node = &GoodReview{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
