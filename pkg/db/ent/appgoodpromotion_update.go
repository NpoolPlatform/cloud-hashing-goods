// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appgoodpromotion"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppGoodPromotionUpdate is the builder for updating AppGoodPromotion entities.
type AppGoodPromotionUpdate struct {
	config
	hooks    []Hook
	mutation *AppGoodPromotionMutation
}

// Where appends a list predicates to the AppGoodPromotionUpdate builder.
func (agpu *AppGoodPromotionUpdate) Where(ps ...predicate.AppGoodPromotion) *AppGoodPromotionUpdate {
	agpu.mutation.Where(ps...)
	return agpu
}

// SetAppID sets the "app_id" field.
func (agpu *AppGoodPromotionUpdate) SetAppID(u uuid.UUID) *AppGoodPromotionUpdate {
	agpu.mutation.SetAppID(u)
	return agpu
}

// SetGoodID sets the "good_id" field.
func (agpu *AppGoodPromotionUpdate) SetGoodID(u uuid.UUID) *AppGoodPromotionUpdate {
	agpu.mutation.SetGoodID(u)
	return agpu
}

// SetMessage sets the "message" field.
func (agpu *AppGoodPromotionUpdate) SetMessage(s string) *AppGoodPromotionUpdate {
	agpu.mutation.SetMessage(s)
	return agpu
}

// SetStart sets the "start" field.
func (agpu *AppGoodPromotionUpdate) SetStart(u uint32) *AppGoodPromotionUpdate {
	agpu.mutation.ResetStart()
	agpu.mutation.SetStart(u)
	return agpu
}

// AddStart adds u to the "start" field.
func (agpu *AppGoodPromotionUpdate) AddStart(u int32) *AppGoodPromotionUpdate {
	agpu.mutation.AddStart(u)
	return agpu
}

// SetEnd sets the "end" field.
func (agpu *AppGoodPromotionUpdate) SetEnd(u uint32) *AppGoodPromotionUpdate {
	agpu.mutation.ResetEnd()
	agpu.mutation.SetEnd(u)
	return agpu
}

// AddEnd adds u to the "end" field.
func (agpu *AppGoodPromotionUpdate) AddEnd(u int32) *AppGoodPromotionUpdate {
	agpu.mutation.AddEnd(u)
	return agpu
}

// SetPrice sets the "price" field.
func (agpu *AppGoodPromotionUpdate) SetPrice(u uint64) *AppGoodPromotionUpdate {
	agpu.mutation.ResetPrice()
	agpu.mutation.SetPrice(u)
	return agpu
}

// AddPrice adds u to the "price" field.
func (agpu *AppGoodPromotionUpdate) AddPrice(u int64) *AppGoodPromotionUpdate {
	agpu.mutation.AddPrice(u)
	return agpu
}

// SetCreateAt sets the "create_at" field.
func (agpu *AppGoodPromotionUpdate) SetCreateAt(u uint32) *AppGoodPromotionUpdate {
	agpu.mutation.ResetCreateAt()
	agpu.mutation.SetCreateAt(u)
	return agpu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agpu *AppGoodPromotionUpdate) SetNillableCreateAt(u *uint32) *AppGoodPromotionUpdate {
	if u != nil {
		agpu.SetCreateAt(*u)
	}
	return agpu
}

// AddCreateAt adds u to the "create_at" field.
func (agpu *AppGoodPromotionUpdate) AddCreateAt(u int32) *AppGoodPromotionUpdate {
	agpu.mutation.AddCreateAt(u)
	return agpu
}

// SetUpdateAt sets the "update_at" field.
func (agpu *AppGoodPromotionUpdate) SetUpdateAt(u uint32) *AppGoodPromotionUpdate {
	agpu.mutation.ResetUpdateAt()
	agpu.mutation.SetUpdateAt(u)
	return agpu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (agpu *AppGoodPromotionUpdate) SetNillableUpdateAt(u *uint32) *AppGoodPromotionUpdate {
	if u != nil {
		agpu.SetUpdateAt(*u)
	}
	return agpu
}

// AddUpdateAt adds u to the "update_at" field.
func (agpu *AppGoodPromotionUpdate) AddUpdateAt(u int32) *AppGoodPromotionUpdate {
	agpu.mutation.AddUpdateAt(u)
	return agpu
}

// SetDeleteAt sets the "delete_at" field.
func (agpu *AppGoodPromotionUpdate) SetDeleteAt(u uint32) *AppGoodPromotionUpdate {
	agpu.mutation.ResetDeleteAt()
	agpu.mutation.SetDeleteAt(u)
	return agpu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agpu *AppGoodPromotionUpdate) SetNillableDeleteAt(u *uint32) *AppGoodPromotionUpdate {
	if u != nil {
		agpu.SetDeleteAt(*u)
	}
	return agpu
}

// AddDeleteAt adds u to the "delete_at" field.
func (agpu *AppGoodPromotionUpdate) AddDeleteAt(u int32) *AppGoodPromotionUpdate {
	agpu.mutation.AddDeleteAt(u)
	return agpu
}

// Mutation returns the AppGoodPromotionMutation object of the builder.
func (agpu *AppGoodPromotionUpdate) Mutation() *AppGoodPromotionMutation {
	return agpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agpu *AppGoodPromotionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(agpu.hooks) == 0 {
		affected, err = agpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodPromotionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agpu.mutation = mutation
			affected, err = agpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agpu.hooks) - 1; i >= 0; i-- {
			if agpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agpu *AppGoodPromotionUpdate) SaveX(ctx context.Context) int {
	affected, err := agpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agpu *AppGoodPromotionUpdate) Exec(ctx context.Context) error {
	_, err := agpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agpu *AppGoodPromotionUpdate) ExecX(ctx context.Context) {
	if err := agpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (agpu *AppGoodPromotionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgoodpromotion.Table,
			Columns: appgoodpromotion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgoodpromotion.FieldID,
			},
		},
	}
	if ps := agpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agpu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodpromotion.FieldAppID,
		})
	}
	if value, ok := agpu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodpromotion.FieldGoodID,
		})
	}
	if value, ok := agpu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgoodpromotion.FieldMessage,
		})
	}
	if value, ok := agpu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldStart,
		})
	}
	if value, ok := agpu.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldStart,
		})
	}
	if value, ok := agpu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldEnd,
		})
	}
	if value, ok := agpu.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldEnd,
		})
	}
	if value, ok := agpu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgoodpromotion.FieldPrice,
		})
	}
	if value, ok := agpu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgoodpromotion.FieldPrice,
		})
	}
	if value, ok := agpu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldCreateAt,
		})
	}
	if value, ok := agpu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldCreateAt,
		})
	}
	if value, ok := agpu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldUpdateAt,
		})
	}
	if value, ok := agpu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldUpdateAt,
		})
	}
	if value, ok := agpu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldDeleteAt,
		})
	}
	if value, ok := agpu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodpromotion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppGoodPromotionUpdateOne is the builder for updating a single AppGoodPromotion entity.
type AppGoodPromotionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppGoodPromotionMutation
}

// SetAppID sets the "app_id" field.
func (agpuo *AppGoodPromotionUpdateOne) SetAppID(u uuid.UUID) *AppGoodPromotionUpdateOne {
	agpuo.mutation.SetAppID(u)
	return agpuo
}

// SetGoodID sets the "good_id" field.
func (agpuo *AppGoodPromotionUpdateOne) SetGoodID(u uuid.UUID) *AppGoodPromotionUpdateOne {
	agpuo.mutation.SetGoodID(u)
	return agpuo
}

// SetMessage sets the "message" field.
func (agpuo *AppGoodPromotionUpdateOne) SetMessage(s string) *AppGoodPromotionUpdateOne {
	agpuo.mutation.SetMessage(s)
	return agpuo
}

// SetStart sets the "start" field.
func (agpuo *AppGoodPromotionUpdateOne) SetStart(u uint32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.ResetStart()
	agpuo.mutation.SetStart(u)
	return agpuo
}

// AddStart adds u to the "start" field.
func (agpuo *AppGoodPromotionUpdateOne) AddStart(u int32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.AddStart(u)
	return agpuo
}

// SetEnd sets the "end" field.
func (agpuo *AppGoodPromotionUpdateOne) SetEnd(u uint32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.ResetEnd()
	agpuo.mutation.SetEnd(u)
	return agpuo
}

// AddEnd adds u to the "end" field.
func (agpuo *AppGoodPromotionUpdateOne) AddEnd(u int32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.AddEnd(u)
	return agpuo
}

// SetPrice sets the "price" field.
func (agpuo *AppGoodPromotionUpdateOne) SetPrice(u uint64) *AppGoodPromotionUpdateOne {
	agpuo.mutation.ResetPrice()
	agpuo.mutation.SetPrice(u)
	return agpuo
}

// AddPrice adds u to the "price" field.
func (agpuo *AppGoodPromotionUpdateOne) AddPrice(u int64) *AppGoodPromotionUpdateOne {
	agpuo.mutation.AddPrice(u)
	return agpuo
}

// SetCreateAt sets the "create_at" field.
func (agpuo *AppGoodPromotionUpdateOne) SetCreateAt(u uint32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.ResetCreateAt()
	agpuo.mutation.SetCreateAt(u)
	return agpuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agpuo *AppGoodPromotionUpdateOne) SetNillableCreateAt(u *uint32) *AppGoodPromotionUpdateOne {
	if u != nil {
		agpuo.SetCreateAt(*u)
	}
	return agpuo
}

// AddCreateAt adds u to the "create_at" field.
func (agpuo *AppGoodPromotionUpdateOne) AddCreateAt(u int32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.AddCreateAt(u)
	return agpuo
}

// SetUpdateAt sets the "update_at" field.
func (agpuo *AppGoodPromotionUpdateOne) SetUpdateAt(u uint32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.ResetUpdateAt()
	agpuo.mutation.SetUpdateAt(u)
	return agpuo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (agpuo *AppGoodPromotionUpdateOne) SetNillableUpdateAt(u *uint32) *AppGoodPromotionUpdateOne {
	if u != nil {
		agpuo.SetUpdateAt(*u)
	}
	return agpuo
}

// AddUpdateAt adds u to the "update_at" field.
func (agpuo *AppGoodPromotionUpdateOne) AddUpdateAt(u int32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.AddUpdateAt(u)
	return agpuo
}

// SetDeleteAt sets the "delete_at" field.
func (agpuo *AppGoodPromotionUpdateOne) SetDeleteAt(u uint32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.ResetDeleteAt()
	agpuo.mutation.SetDeleteAt(u)
	return agpuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agpuo *AppGoodPromotionUpdateOne) SetNillableDeleteAt(u *uint32) *AppGoodPromotionUpdateOne {
	if u != nil {
		agpuo.SetDeleteAt(*u)
	}
	return agpuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (agpuo *AppGoodPromotionUpdateOne) AddDeleteAt(u int32) *AppGoodPromotionUpdateOne {
	agpuo.mutation.AddDeleteAt(u)
	return agpuo
}

// Mutation returns the AppGoodPromotionMutation object of the builder.
func (agpuo *AppGoodPromotionUpdateOne) Mutation() *AppGoodPromotionMutation {
	return agpuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agpuo *AppGoodPromotionUpdateOne) Select(field string, fields ...string) *AppGoodPromotionUpdateOne {
	agpuo.fields = append([]string{field}, fields...)
	return agpuo
}

// Save executes the query and returns the updated AppGoodPromotion entity.
func (agpuo *AppGoodPromotionUpdateOne) Save(ctx context.Context) (*AppGoodPromotion, error) {
	var (
		err  error
		node *AppGoodPromotion
	)
	if len(agpuo.hooks) == 0 {
		node, err = agpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppGoodPromotionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agpuo.mutation = mutation
			node, err = agpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(agpuo.hooks) - 1; i >= 0; i-- {
			if agpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (agpuo *AppGoodPromotionUpdateOne) SaveX(ctx context.Context) *AppGoodPromotion {
	node, err := agpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agpuo *AppGoodPromotionUpdateOne) Exec(ctx context.Context) error {
	_, err := agpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agpuo *AppGoodPromotionUpdateOne) ExecX(ctx context.Context) {
	if err := agpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (agpuo *AppGoodPromotionUpdateOne) sqlSave(ctx context.Context) (_node *AppGoodPromotion, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appgoodpromotion.Table,
			Columns: appgoodpromotion.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appgoodpromotion.FieldID,
			},
		},
	}
	id, ok := agpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppGoodPromotion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appgoodpromotion.FieldID)
		for _, f := range fields {
			if !appgoodpromotion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appgoodpromotion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agpuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodpromotion.FieldAppID,
		})
	}
	if value, ok := agpuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appgoodpromotion.FieldGoodID,
		})
	}
	if value, ok := agpuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appgoodpromotion.FieldMessage,
		})
	}
	if value, ok := agpuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldStart,
		})
	}
	if value, ok := agpuo.mutation.AddedStart(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldStart,
		})
	}
	if value, ok := agpuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldEnd,
		})
	}
	if value, ok := agpuo.mutation.AddedEnd(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldEnd,
		})
	}
	if value, ok := agpuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgoodpromotion.FieldPrice,
		})
	}
	if value, ok := agpuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: appgoodpromotion.FieldPrice,
		})
	}
	if value, ok := agpuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldCreateAt,
		})
	}
	if value, ok := agpuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldCreateAt,
		})
	}
	if value, ok := agpuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldUpdateAt,
		})
	}
	if value, ok := agpuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldUpdateAt,
		})
	}
	if value, ok := agpuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldDeleteAt,
		})
	}
	if value, ok := agpuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appgoodpromotion.FieldDeleteAt,
		})
	}
	_node = &AppGoodPromotion{config: agpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appgoodpromotion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
