// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appareaauth"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppAreaAuthQuery is the builder for querying AppAreaAuth entities.
type AppAreaAuthQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AppAreaAuth
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppAreaAuthQuery builder.
func (aaaq *AppAreaAuthQuery) Where(ps ...predicate.AppAreaAuth) *AppAreaAuthQuery {
	aaaq.predicates = append(aaaq.predicates, ps...)
	return aaaq
}

// Limit adds a limit step to the query.
func (aaaq *AppAreaAuthQuery) Limit(limit int) *AppAreaAuthQuery {
	aaaq.limit = &limit
	return aaaq
}

// Offset adds an offset step to the query.
func (aaaq *AppAreaAuthQuery) Offset(offset int) *AppAreaAuthQuery {
	aaaq.offset = &offset
	return aaaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aaaq *AppAreaAuthQuery) Unique(unique bool) *AppAreaAuthQuery {
	aaaq.unique = &unique
	return aaaq
}

// Order adds an order step to the query.
func (aaaq *AppAreaAuthQuery) Order(o ...OrderFunc) *AppAreaAuthQuery {
	aaaq.order = append(aaaq.order, o...)
	return aaaq
}

// First returns the first AppAreaAuth entity from the query.
// Returns a *NotFoundError when no AppAreaAuth was found.
func (aaaq *AppAreaAuthQuery) First(ctx context.Context) (*AppAreaAuth, error) {
	nodes, err := aaaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appareaauth.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) FirstX(ctx context.Context) *AppAreaAuth {
	node, err := aaaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppAreaAuth ID from the query.
// Returns a *NotFoundError when no AppAreaAuth ID was found.
func (aaaq *AppAreaAuthQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = aaaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appareaauth.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := aaaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppAreaAuth entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AppAreaAuth entity is not found.
// Returns a *NotFoundError when no AppAreaAuth entities are found.
func (aaaq *AppAreaAuthQuery) Only(ctx context.Context) (*AppAreaAuth, error) {
	nodes, err := aaaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appareaauth.Label}
	default:
		return nil, &NotSingularError{appareaauth.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) OnlyX(ctx context.Context) *AppAreaAuth {
	node, err := aaaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppAreaAuth ID in the query.
// Returns a *NotSingularError when exactly one AppAreaAuth ID is not found.
// Returns a *NotFoundError when no entities are found.
func (aaaq *AppAreaAuthQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = aaaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = &NotSingularError{appareaauth.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := aaaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppAreaAuths.
func (aaaq *AppAreaAuthQuery) All(ctx context.Context) ([]*AppAreaAuth, error) {
	if err := aaaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aaaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) AllX(ctx context.Context) []*AppAreaAuth {
	nodes, err := aaaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppAreaAuth IDs.
func (aaaq *AppAreaAuthQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := aaaq.Select(appareaauth.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := aaaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aaaq *AppAreaAuthQuery) Count(ctx context.Context) (int, error) {
	if err := aaaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aaaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) CountX(ctx context.Context) int {
	count, err := aaaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aaaq *AppAreaAuthQuery) Exist(ctx context.Context) (bool, error) {
	if err := aaaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aaaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aaaq *AppAreaAuthQuery) ExistX(ctx context.Context) bool {
	exist, err := aaaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppAreaAuthQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aaaq *AppAreaAuthQuery) Clone() *AppAreaAuthQuery {
	if aaaq == nil {
		return nil
	}
	return &AppAreaAuthQuery{
		config:     aaaq.config,
		limit:      aaaq.limit,
		offset:     aaaq.offset,
		order:      append([]OrderFunc{}, aaaq.order...),
		predicates: append([]predicate.AppAreaAuth{}, aaaq.predicates...),
		// clone intermediate query.
		sql:  aaaq.sql.Clone(),
		path: aaaq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TargetAreaID uuid.UUID `json:"target_area_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppAreaAuth.Query().
//		GroupBy(appareaauth.FieldTargetAreaID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aaaq *AppAreaAuthQuery) GroupBy(field string, fields ...string) *AppAreaAuthGroupBy {
	group := &AppAreaAuthGroupBy{config: aaaq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aaaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aaaq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TargetAreaID uuid.UUID `json:"target_area_id,omitempty"`
//	}
//
//	client.AppAreaAuth.Query().
//		Select(appareaauth.FieldTargetAreaID).
//		Scan(ctx, &v)
//
func (aaaq *AppAreaAuthQuery) Select(fields ...string) *AppAreaAuthSelect {
	aaaq.fields = append(aaaq.fields, fields...)
	return &AppAreaAuthSelect{AppAreaAuthQuery: aaaq}
}

func (aaaq *AppAreaAuthQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aaaq.fields {
		if !appareaauth.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aaaq.path != nil {
		prev, err := aaaq.path(ctx)
		if err != nil {
			return err
		}
		aaaq.sql = prev
	}
	return nil
}

func (aaaq *AppAreaAuthQuery) sqlAll(ctx context.Context) ([]*AppAreaAuth, error) {
	var (
		nodes = []*AppAreaAuth{}
		_spec = aaaq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AppAreaAuth{config: aaaq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aaaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (aaaq *AppAreaAuthQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aaaq.querySpec()
	return sqlgraph.CountNodes(ctx, aaaq.driver, _spec)
}

func (aaaq *AppAreaAuthQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aaaq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aaaq *AppAreaAuthQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appareaauth.Table,
			Columns: appareaauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appareaauth.FieldID,
			},
		},
		From:   aaaq.sql,
		Unique: true,
	}
	if unique := aaaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aaaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appareaauth.FieldID)
		for i := range fields {
			if fields[i] != appareaauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aaaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aaaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aaaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aaaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aaaq *AppAreaAuthQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aaaq.driver.Dialect())
	t1 := builder.Table(appareaauth.Table)
	columns := aaaq.fields
	if len(columns) == 0 {
		columns = appareaauth.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aaaq.sql != nil {
		selector = aaaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range aaaq.predicates {
		p(selector)
	}
	for _, p := range aaaq.order {
		p(selector)
	}
	if offset := aaaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aaaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppAreaAuthGroupBy is the group-by builder for AppAreaAuth entities.
type AppAreaAuthGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aaagb *AppAreaAuthGroupBy) Aggregate(fns ...AggregateFunc) *AppAreaAuthGroupBy {
	aaagb.fns = append(aaagb.fns, fns...)
	return aaagb
}

// Scan applies the group-by query and scans the result into the given value.
func (aaagb *AppAreaAuthGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aaagb.path(ctx)
	if err != nil {
		return err
	}
	aaagb.sql = query
	return aaagb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aaagb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aaagb.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) StringsX(ctx context.Context) []string {
	v, err := aaagb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aaagb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) StringX(ctx context.Context) string {
	v, err := aaagb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aaagb.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) IntsX(ctx context.Context) []int {
	v, err := aaagb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aaagb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) IntX(ctx context.Context) int {
	v, err := aaagb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aaagb.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aaagb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aaagb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aaagb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aaagb.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aaagb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aaagb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aaagb *AppAreaAuthGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aaagb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aaagb *AppAreaAuthGroupBy) BoolX(ctx context.Context) bool {
	v, err := aaagb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aaagb *AppAreaAuthGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aaagb.fields {
		if !appareaauth.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aaagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aaagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aaagb *AppAreaAuthGroupBy) sqlQuery() *sql.Selector {
	selector := aaagb.sql.Select()
	aggregation := make([]string, 0, len(aaagb.fns))
	for _, fn := range aaagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(aaagb.fields)+len(aaagb.fns))
		for _, f := range aaagb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(aaagb.fields...)...)
}

// AppAreaAuthSelect is the builder for selecting fields of AppAreaAuth entities.
type AppAreaAuthSelect struct {
	*AppAreaAuthQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aaas *AppAreaAuthSelect) Scan(ctx context.Context, v interface{}) error {
	if err := aaas.prepareQuery(ctx); err != nil {
		return err
	}
	aaas.sql = aaas.AppAreaAuthQuery.sqlQuery(ctx)
	return aaas.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) ScanX(ctx context.Context, v interface{}) {
	if err := aaas.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Strings(ctx context.Context) ([]string, error) {
	if len(aaas.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) StringsX(ctx context.Context) []string {
	v, err := aaas.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aaas.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) StringX(ctx context.Context) string {
	v, err := aaas.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Ints(ctx context.Context) ([]int, error) {
	if len(aaas.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) IntsX(ctx context.Context) []int {
	v, err := aaas.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aaas.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) IntX(ctx context.Context) int {
	v, err := aaas.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aaas.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) Float64sX(ctx context.Context) []float64 {
	v, err := aaas.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aaas.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) Float64X(ctx context.Context) float64 {
	v, err := aaas.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aaas.fields) > 1 {
		return nil, errors.New("ent: AppAreaAuthSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aaas.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) BoolsX(ctx context.Context) []bool {
	v, err := aaas.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aaas *AppAreaAuthSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aaas.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appareaauth.Label}
	default:
		err = fmt.Errorf("ent: AppAreaAuthSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aaas *AppAreaAuthSelect) BoolX(ctx context.Context) bool {
	v, err := aaas.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aaas *AppAreaAuthSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aaas.sql.Query()
	if err := aaas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
