// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodrecommend"
	"github.com/google/uuid"
)

// GoodRecommendCreate is the builder for creating a GoodRecommend entity.
type GoodRecommendCreate struct {
	config
	mutation *GoodRecommendMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (grc *GoodRecommendCreate) SetUserID(u uuid.UUID) *GoodRecommendCreate {
	grc.mutation.SetUserID(u)
	return grc
}

// SetGoodID sets the "good_id" field.
func (grc *GoodRecommendCreate) SetGoodID(u uuid.UUID) *GoodRecommendCreate {
	grc.mutation.SetGoodID(u)
	return grc
}

// SetContent sets the "content" field.
func (grc *GoodRecommendCreate) SetContent(s string) *GoodRecommendCreate {
	grc.mutation.SetContent(s)
	return grc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (grc *GoodRecommendCreate) SetNillableContent(s *string) *GoodRecommendCreate {
	if s != nil {
		grc.SetContent(*s)
	}
	return grc
}

// SetCreateAt sets the "create_at" field.
func (grc *GoodRecommendCreate) SetCreateAt(i int64) *GoodRecommendCreate {
	grc.mutation.SetCreateAt(i)
	return grc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (grc *GoodRecommendCreate) SetNillableCreateAt(i *int64) *GoodRecommendCreate {
	if i != nil {
		grc.SetCreateAt(*i)
	}
	return grc
}

// SetUpdateAt sets the "update_at" field.
func (grc *GoodRecommendCreate) SetUpdateAt(i int64) *GoodRecommendCreate {
	grc.mutation.SetUpdateAt(i)
	return grc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (grc *GoodRecommendCreate) SetNillableUpdateAt(i *int64) *GoodRecommendCreate {
	if i != nil {
		grc.SetUpdateAt(*i)
	}
	return grc
}

// SetDeleteAt sets the "delete_at" field.
func (grc *GoodRecommendCreate) SetDeleteAt(i int64) *GoodRecommendCreate {
	grc.mutation.SetDeleteAt(i)
	return grc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (grc *GoodRecommendCreate) SetNillableDeleteAt(i *int64) *GoodRecommendCreate {
	if i != nil {
		grc.SetDeleteAt(*i)
	}
	return grc
}

// SetID sets the "id" field.
func (grc *GoodRecommendCreate) SetID(u uuid.UUID) *GoodRecommendCreate {
	grc.mutation.SetID(u)
	return grc
}

// Mutation returns the GoodRecommendMutation object of the builder.
func (grc *GoodRecommendCreate) Mutation() *GoodRecommendMutation {
	return grc.mutation
}

// Save creates the GoodRecommend in the database.
func (grc *GoodRecommendCreate) Save(ctx context.Context) (*GoodRecommend, error) {
	var (
		err  error
		node *GoodRecommend
	)
	grc.defaults()
	if len(grc.hooks) == 0 {
		if err = grc.check(); err != nil {
			return nil, err
		}
		node, err = grc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodRecommendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = grc.check(); err != nil {
				return nil, err
			}
			grc.mutation = mutation
			if node, err = grc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(grc.hooks) - 1; i >= 0; i-- {
			if grc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = grc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, grc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (grc *GoodRecommendCreate) SaveX(ctx context.Context) *GoodRecommend {
	v, err := grc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grc *GoodRecommendCreate) Exec(ctx context.Context) error {
	_, err := grc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grc *GoodRecommendCreate) ExecX(ctx context.Context) {
	if err := grc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grc *GoodRecommendCreate) defaults() {
	if _, ok := grc.mutation.Content(); !ok {
		v := goodrecommend.DefaultContent
		grc.mutation.SetContent(v)
	}
	if _, ok := grc.mutation.CreateAt(); !ok {
		v := goodrecommend.DefaultCreateAt()
		grc.mutation.SetCreateAt(v)
	}
	if _, ok := grc.mutation.UpdateAt(); !ok {
		v := goodrecommend.DefaultUpdateAt()
		grc.mutation.SetUpdateAt(v)
	}
	if _, ok := grc.mutation.DeleteAt(); !ok {
		v := goodrecommend.DefaultDeleteAt()
		grc.mutation.SetDeleteAt(v)
	}
	if _, ok := grc.mutation.ID(); !ok {
		v := goodrecommend.DefaultID()
		grc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grc *GoodRecommendCreate) check() error {
	if _, ok := grc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := grc.mutation.GoodID(); !ok {
		return &ValidationError{Name: "good_id", err: errors.New(`ent: missing required field "good_id"`)}
	}
	if _, ok := grc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "content"`)}
	}
	if _, ok := grc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := grc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := grc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (grc *GoodRecommendCreate) sqlSave(ctx context.Context) (*GoodRecommend, error) {
	_node, _spec := grc.createSpec()
	if err := sqlgraph.CreateNode(ctx, grc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (grc *GoodRecommendCreate) createSpec() (*GoodRecommend, *sqlgraph.CreateSpec) {
	var (
		_node = &GoodRecommend{config: grc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: goodrecommend.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodrecommend.FieldID,
			},
		}
	)
	if id, ok := grc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := grc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommend.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := grc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodrecommend.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := grc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: goodrecommend.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := grc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommend.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := grc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommend.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := grc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodrecommend.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// GoodRecommendCreateBulk is the builder for creating many GoodRecommend entities in bulk.
type GoodRecommendCreateBulk struct {
	config
	builders []*GoodRecommendCreate
}

// Save creates the GoodRecommend entities in the database.
func (grcb *GoodRecommendCreateBulk) Save(ctx context.Context) ([]*GoodRecommend, error) {
	specs := make([]*sqlgraph.CreateSpec, len(grcb.builders))
	nodes := make([]*GoodRecommend, len(grcb.builders))
	mutators := make([]Mutator, len(grcb.builders))
	for i := range grcb.builders {
		func(i int, root context.Context) {
			builder := grcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodRecommendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, grcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, grcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, grcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (grcb *GoodRecommendCreateBulk) SaveX(ctx context.Context) []*GoodRecommend {
	v, err := grcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (grcb *GoodRecommendCreateBulk) Exec(ctx context.Context) error {
	_, err := grcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grcb *GoodRecommendCreateBulk) ExecX(ctx context.Context) {
	if err := grcb.Exec(ctx); err != nil {
		panic(err)
	}
}
