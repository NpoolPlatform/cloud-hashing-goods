// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/feeduration"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FeeDurationUpdate is the builder for updating FeeDuration entities.
type FeeDurationUpdate struct {
	config
	hooks    []Hook
	mutation *FeeDurationMutation
}

// Where appends a list predicates to the FeeDurationUpdate builder.
func (fdu *FeeDurationUpdate) Where(ps ...predicate.FeeDuration) *FeeDurationUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetFeeTypeID sets the "fee_type_id" field.
func (fdu *FeeDurationUpdate) SetFeeTypeID(u uuid.UUID) *FeeDurationUpdate {
	fdu.mutation.SetFeeTypeID(u)
	return fdu
}

// SetDuration sets the "duration" field.
func (fdu *FeeDurationUpdate) SetDuration(i int32) *FeeDurationUpdate {
	fdu.mutation.ResetDuration()
	fdu.mutation.SetDuration(i)
	return fdu
}

// AddDuration adds i to the "duration" field.
func (fdu *FeeDurationUpdate) AddDuration(i int32) *FeeDurationUpdate {
	fdu.mutation.AddDuration(i)
	return fdu
}

// SetCreateAt sets the "create_at" field.
func (fdu *FeeDurationUpdate) SetCreateAt(u uint32) *FeeDurationUpdate {
	fdu.mutation.ResetCreateAt()
	fdu.mutation.SetCreateAt(u)
	return fdu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (fdu *FeeDurationUpdate) SetNillableCreateAt(u *uint32) *FeeDurationUpdate {
	if u != nil {
		fdu.SetCreateAt(*u)
	}
	return fdu
}

// AddCreateAt adds u to the "create_at" field.
func (fdu *FeeDurationUpdate) AddCreateAt(u uint32) *FeeDurationUpdate {
	fdu.mutation.AddCreateAt(u)
	return fdu
}

// SetUpdateAt sets the "update_at" field.
func (fdu *FeeDurationUpdate) SetUpdateAt(u uint32) *FeeDurationUpdate {
	fdu.mutation.ResetUpdateAt()
	fdu.mutation.SetUpdateAt(u)
	return fdu
}

// AddUpdateAt adds u to the "update_at" field.
func (fdu *FeeDurationUpdate) AddUpdateAt(u uint32) *FeeDurationUpdate {
	fdu.mutation.AddUpdateAt(u)
	return fdu
}

// SetDeleteAt sets the "delete_at" field.
func (fdu *FeeDurationUpdate) SetDeleteAt(u uint32) *FeeDurationUpdate {
	fdu.mutation.ResetDeleteAt()
	fdu.mutation.SetDeleteAt(u)
	return fdu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (fdu *FeeDurationUpdate) SetNillableDeleteAt(u *uint32) *FeeDurationUpdate {
	if u != nil {
		fdu.SetDeleteAt(*u)
	}
	return fdu
}

// AddDeleteAt adds u to the "delete_at" field.
func (fdu *FeeDurationUpdate) AddDeleteAt(u uint32) *FeeDurationUpdate {
	fdu.mutation.AddDeleteAt(u)
	return fdu
}

// Mutation returns the FeeDurationMutation object of the builder.
func (fdu *FeeDurationUpdate) Mutation() *FeeDurationMutation {
	return fdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FeeDurationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fdu.defaults()
	if len(fdu.hooks) == 0 {
		affected, err = fdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeDurationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fdu.mutation = mutation
			affected, err = fdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fdu.hooks) - 1; i >= 0; i-- {
			if fdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FeeDurationUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FeeDurationUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FeeDurationUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdu *FeeDurationUpdate) defaults() {
	if _, ok := fdu.mutation.UpdateAt(); !ok {
		v := feeduration.UpdateDefaultUpdateAt()
		fdu.mutation.SetUpdateAt(v)
	}
}

func (fdu *FeeDurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feeduration.Table,
			Columns: feeduration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feeduration.FieldID,
			},
		},
	}
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.FeeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeduration.FieldFeeTypeID,
		})
	}
	if value, ok := fdu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: feeduration.FieldDuration,
		})
	}
	if value, ok := fdu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: feeduration.FieldDuration,
		})
	}
	if value, ok := fdu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldCreateAt,
		})
	}
	if value, ok := fdu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldCreateAt,
		})
	}
	if value, ok := fdu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldUpdateAt,
		})
	}
	if value, ok := fdu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldUpdateAt,
		})
	}
	if value, ok := fdu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldDeleteAt,
		})
	}
	if value, ok := fdu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeduration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FeeDurationUpdateOne is the builder for updating a single FeeDuration entity.
type FeeDurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeeDurationMutation
}

// SetFeeTypeID sets the "fee_type_id" field.
func (fduo *FeeDurationUpdateOne) SetFeeTypeID(u uuid.UUID) *FeeDurationUpdateOne {
	fduo.mutation.SetFeeTypeID(u)
	return fduo
}

// SetDuration sets the "duration" field.
func (fduo *FeeDurationUpdateOne) SetDuration(i int32) *FeeDurationUpdateOne {
	fduo.mutation.ResetDuration()
	fduo.mutation.SetDuration(i)
	return fduo
}

// AddDuration adds i to the "duration" field.
func (fduo *FeeDurationUpdateOne) AddDuration(i int32) *FeeDurationUpdateOne {
	fduo.mutation.AddDuration(i)
	return fduo
}

// SetCreateAt sets the "create_at" field.
func (fduo *FeeDurationUpdateOne) SetCreateAt(u uint32) *FeeDurationUpdateOne {
	fduo.mutation.ResetCreateAt()
	fduo.mutation.SetCreateAt(u)
	return fduo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (fduo *FeeDurationUpdateOne) SetNillableCreateAt(u *uint32) *FeeDurationUpdateOne {
	if u != nil {
		fduo.SetCreateAt(*u)
	}
	return fduo
}

// AddCreateAt adds u to the "create_at" field.
func (fduo *FeeDurationUpdateOne) AddCreateAt(u uint32) *FeeDurationUpdateOne {
	fduo.mutation.AddCreateAt(u)
	return fduo
}

// SetUpdateAt sets the "update_at" field.
func (fduo *FeeDurationUpdateOne) SetUpdateAt(u uint32) *FeeDurationUpdateOne {
	fduo.mutation.ResetUpdateAt()
	fduo.mutation.SetUpdateAt(u)
	return fduo
}

// AddUpdateAt adds u to the "update_at" field.
func (fduo *FeeDurationUpdateOne) AddUpdateAt(u uint32) *FeeDurationUpdateOne {
	fduo.mutation.AddUpdateAt(u)
	return fduo
}

// SetDeleteAt sets the "delete_at" field.
func (fduo *FeeDurationUpdateOne) SetDeleteAt(u uint32) *FeeDurationUpdateOne {
	fduo.mutation.ResetDeleteAt()
	fduo.mutation.SetDeleteAt(u)
	return fduo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (fduo *FeeDurationUpdateOne) SetNillableDeleteAt(u *uint32) *FeeDurationUpdateOne {
	if u != nil {
		fduo.SetDeleteAt(*u)
	}
	return fduo
}

// AddDeleteAt adds u to the "delete_at" field.
func (fduo *FeeDurationUpdateOne) AddDeleteAt(u uint32) *FeeDurationUpdateOne {
	fduo.mutation.AddDeleteAt(u)
	return fduo
}

// Mutation returns the FeeDurationMutation object of the builder.
func (fduo *FeeDurationUpdateOne) Mutation() *FeeDurationMutation {
	return fduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FeeDurationUpdateOne) Select(field string, fields ...string) *FeeDurationUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FeeDuration entity.
func (fduo *FeeDurationUpdateOne) Save(ctx context.Context) (*FeeDuration, error) {
	var (
		err  error
		node *FeeDuration
	)
	fduo.defaults()
	if len(fduo.hooks) == 0 {
		node, err = fduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeDurationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fduo.mutation = mutation
			node, err = fduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fduo.hooks) - 1; i >= 0; i-- {
			if fduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FeeDurationUpdateOne) SaveX(ctx context.Context) *FeeDuration {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FeeDurationUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FeeDurationUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fduo *FeeDurationUpdateOne) defaults() {
	if _, ok := fduo.mutation.UpdateAt(); !ok {
		v := feeduration.UpdateDefaultUpdateAt()
		fduo.mutation.SetUpdateAt(v)
	}
}

func (fduo *FeeDurationUpdateOne) sqlSave(ctx context.Context) (_node *FeeDuration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   feeduration.Table,
			Columns: feeduration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feeduration.FieldID,
			},
		},
	}
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FeeDuration.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feeduration.FieldID)
		for _, f := range fields {
			if !feeduration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feeduration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.FeeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: feeduration.FieldFeeTypeID,
		})
	}
	if value, ok := fduo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: feeduration.FieldDuration,
		})
	}
	if value, ok := fduo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: feeduration.FieldDuration,
		})
	}
	if value, ok := fduo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldCreateAt,
		})
	}
	if value, ok := fduo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldCreateAt,
		})
	}
	if value, ok := fduo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldUpdateAt,
		})
	}
	if value, ok := fduo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldUpdateAt,
		})
	}
	if value, ok := fduo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldDeleteAt,
		})
	}
	if value, ok := fduo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: feeduration.FieldDeleteAt,
		})
	}
	_node = &FeeDuration{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feeduration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
