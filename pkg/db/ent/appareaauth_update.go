// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appareaauth"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppAreaAuthUpdate is the builder for updating AppAreaAuth entities.
type AppAreaAuthUpdate struct {
	config
	hooks    []Hook
	mutation *AppAreaAuthMutation
}

// Where appends a list predicates to the AppAreaAuthUpdate builder.
func (aaau *AppAreaAuthUpdate) Where(ps ...predicate.AppAreaAuth) *AppAreaAuthUpdate {
	aaau.mutation.Where(ps...)
	return aaau
}

// SetTargetAreaID sets the "target_area_id" field.
func (aaau *AppAreaAuthUpdate) SetTargetAreaID(u uuid.UUID) *AppAreaAuthUpdate {
	aaau.mutation.SetTargetAreaID(u)
	return aaau
}

// SetAppID sets the "app_id" field.
func (aaau *AppAreaAuthUpdate) SetAppID(u uuid.UUID) *AppAreaAuthUpdate {
	aaau.mutation.SetAppID(u)
	return aaau
}

// SetCreateAt sets the "create_at" field.
func (aaau *AppAreaAuthUpdate) SetCreateAt(i int64) *AppAreaAuthUpdate {
	aaau.mutation.ResetCreateAt()
	aaau.mutation.SetCreateAt(i)
	return aaau
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aaau *AppAreaAuthUpdate) SetNillableCreateAt(i *int64) *AppAreaAuthUpdate {
	if i != nil {
		aaau.SetCreateAt(*i)
	}
	return aaau
}

// AddCreateAt adds i to the "create_at" field.
func (aaau *AppAreaAuthUpdate) AddCreateAt(i int64) *AppAreaAuthUpdate {
	aaau.mutation.AddCreateAt(i)
	return aaau
}

// SetUpdateAt sets the "update_at" field.
func (aaau *AppAreaAuthUpdate) SetUpdateAt(i int64) *AppAreaAuthUpdate {
	aaau.mutation.ResetUpdateAt()
	aaau.mutation.SetUpdateAt(i)
	return aaau
}

// AddUpdateAt adds i to the "update_at" field.
func (aaau *AppAreaAuthUpdate) AddUpdateAt(i int64) *AppAreaAuthUpdate {
	aaau.mutation.AddUpdateAt(i)
	return aaau
}

// SetDeleteAt sets the "delete_at" field.
func (aaau *AppAreaAuthUpdate) SetDeleteAt(i int64) *AppAreaAuthUpdate {
	aaau.mutation.ResetDeleteAt()
	aaau.mutation.SetDeleteAt(i)
	return aaau
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aaau *AppAreaAuthUpdate) SetNillableDeleteAt(i *int64) *AppAreaAuthUpdate {
	if i != nil {
		aaau.SetDeleteAt(*i)
	}
	return aaau
}

// AddDeleteAt adds i to the "delete_at" field.
func (aaau *AppAreaAuthUpdate) AddDeleteAt(i int64) *AppAreaAuthUpdate {
	aaau.mutation.AddDeleteAt(i)
	return aaau
}

// Mutation returns the AppAreaAuthMutation object of the builder.
func (aaau *AppAreaAuthUpdate) Mutation() *AppAreaAuthMutation {
	return aaau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aaau *AppAreaAuthUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aaau.defaults()
	if len(aaau.hooks) == 0 {
		affected, err = aaau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAreaAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aaau.mutation = mutation
			affected, err = aaau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aaau.hooks) - 1; i >= 0; i-- {
			if aaau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aaau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaau *AppAreaAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := aaau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aaau *AppAreaAuthUpdate) Exec(ctx context.Context) error {
	_, err := aaau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaau *AppAreaAuthUpdate) ExecX(ctx context.Context) {
	if err := aaau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaau *AppAreaAuthUpdate) defaults() {
	if _, ok := aaau.mutation.UpdateAt(); !ok {
		v := appareaauth.UpdateDefaultUpdateAt()
		aaau.mutation.SetUpdateAt(v)
	}
}

func (aaau *AppAreaAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appareaauth.Table,
			Columns: appareaauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appareaauth.FieldID,
			},
		},
	}
	if ps := aaau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaau.mutation.TargetAreaID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appareaauth.FieldTargetAreaID,
		})
	}
	if value, ok := aaau.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appareaauth.FieldAppID,
		})
	}
	if value, ok := aaau.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldCreateAt,
		})
	}
	if value, ok := aaau.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldCreateAt,
		})
	}
	if value, ok := aaau.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldUpdateAt,
		})
	}
	if value, ok := aaau.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldUpdateAt,
		})
	}
	if value, ok := aaau.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldDeleteAt,
		})
	}
	if value, ok := aaau.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aaau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appareaauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppAreaAuthUpdateOne is the builder for updating a single AppAreaAuth entity.
type AppAreaAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppAreaAuthMutation
}

// SetTargetAreaID sets the "target_area_id" field.
func (aaauo *AppAreaAuthUpdateOne) SetTargetAreaID(u uuid.UUID) *AppAreaAuthUpdateOne {
	aaauo.mutation.SetTargetAreaID(u)
	return aaauo
}

// SetAppID sets the "app_id" field.
func (aaauo *AppAreaAuthUpdateOne) SetAppID(u uuid.UUID) *AppAreaAuthUpdateOne {
	aaauo.mutation.SetAppID(u)
	return aaauo
}

// SetCreateAt sets the "create_at" field.
func (aaauo *AppAreaAuthUpdateOne) SetCreateAt(i int64) *AppAreaAuthUpdateOne {
	aaauo.mutation.ResetCreateAt()
	aaauo.mutation.SetCreateAt(i)
	return aaauo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aaauo *AppAreaAuthUpdateOne) SetNillableCreateAt(i *int64) *AppAreaAuthUpdateOne {
	if i != nil {
		aaauo.SetCreateAt(*i)
	}
	return aaauo
}

// AddCreateAt adds i to the "create_at" field.
func (aaauo *AppAreaAuthUpdateOne) AddCreateAt(i int64) *AppAreaAuthUpdateOne {
	aaauo.mutation.AddCreateAt(i)
	return aaauo
}

// SetUpdateAt sets the "update_at" field.
func (aaauo *AppAreaAuthUpdateOne) SetUpdateAt(i int64) *AppAreaAuthUpdateOne {
	aaauo.mutation.ResetUpdateAt()
	aaauo.mutation.SetUpdateAt(i)
	return aaauo
}

// AddUpdateAt adds i to the "update_at" field.
func (aaauo *AppAreaAuthUpdateOne) AddUpdateAt(i int64) *AppAreaAuthUpdateOne {
	aaauo.mutation.AddUpdateAt(i)
	return aaauo
}

// SetDeleteAt sets the "delete_at" field.
func (aaauo *AppAreaAuthUpdateOne) SetDeleteAt(i int64) *AppAreaAuthUpdateOne {
	aaauo.mutation.ResetDeleteAt()
	aaauo.mutation.SetDeleteAt(i)
	return aaauo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aaauo *AppAreaAuthUpdateOne) SetNillableDeleteAt(i *int64) *AppAreaAuthUpdateOne {
	if i != nil {
		aaauo.SetDeleteAt(*i)
	}
	return aaauo
}

// AddDeleteAt adds i to the "delete_at" field.
func (aaauo *AppAreaAuthUpdateOne) AddDeleteAt(i int64) *AppAreaAuthUpdateOne {
	aaauo.mutation.AddDeleteAt(i)
	return aaauo
}

// Mutation returns the AppAreaAuthMutation object of the builder.
func (aaauo *AppAreaAuthUpdateOne) Mutation() *AppAreaAuthMutation {
	return aaauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aaauo *AppAreaAuthUpdateOne) Select(field string, fields ...string) *AppAreaAuthUpdateOne {
	aaauo.fields = append([]string{field}, fields...)
	return aaauo
}

// Save executes the query and returns the updated AppAreaAuth entity.
func (aaauo *AppAreaAuthUpdateOne) Save(ctx context.Context) (*AppAreaAuth, error) {
	var (
		err  error
		node *AppAreaAuth
	)
	aaauo.defaults()
	if len(aaauo.hooks) == 0 {
		node, err = aaauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAreaAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aaauo.mutation = mutation
			node, err = aaauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aaauo.hooks) - 1; i >= 0; i-- {
			if aaauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aaauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aaauo *AppAreaAuthUpdateOne) SaveX(ctx context.Context) *AppAreaAuth {
	node, err := aaauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aaauo *AppAreaAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := aaauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaauo *AppAreaAuthUpdateOne) ExecX(ctx context.Context) {
	if err := aaauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaauo *AppAreaAuthUpdateOne) defaults() {
	if _, ok := aaauo.mutation.UpdateAt(); !ok {
		v := appareaauth.UpdateDefaultUpdateAt()
		aaauo.mutation.SetUpdateAt(v)
	}
}

func (aaauo *AppAreaAuthUpdateOne) sqlSave(ctx context.Context) (_node *AppAreaAuth, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appareaauth.Table,
			Columns: appareaauth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appareaauth.FieldID,
			},
		},
	}
	id, ok := aaauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppAreaAuth.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aaauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appareaauth.FieldID)
		for _, f := range fields {
			if !appareaauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appareaauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aaauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aaauo.mutation.TargetAreaID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appareaauth.FieldTargetAreaID,
		})
	}
	if value, ok := aaauo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appareaauth.FieldAppID,
		})
	}
	if value, ok := aaauo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldCreateAt,
		})
	}
	if value, ok := aaauo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldCreateAt,
		})
	}
	if value, ok := aaauo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldUpdateAt,
		})
	}
	if value, ok := aaauo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldUpdateAt,
		})
	}
	if value, ok := aaauo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldDeleteAt,
		})
	}
	if value, ok := aaauo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldDeleteAt,
		})
	}
	_node = &AppAreaAuth{config: aaauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aaauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appareaauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
