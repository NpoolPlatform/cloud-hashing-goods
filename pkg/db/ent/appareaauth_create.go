// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/appareaauth"
	"github.com/google/uuid"
)

// AppAreaAuthCreate is the builder for creating a AppAreaAuth entity.
type AppAreaAuthCreate struct {
	config
	mutation *AppAreaAuthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTargetAreaID sets the "target_area_id" field.
func (aaac *AppAreaAuthCreate) SetTargetAreaID(u uuid.UUID) *AppAreaAuthCreate {
	aaac.mutation.SetTargetAreaID(u)
	return aaac
}

// SetAppID sets the "app_id" field.
func (aaac *AppAreaAuthCreate) SetAppID(u uuid.UUID) *AppAreaAuthCreate {
	aaac.mutation.SetAppID(u)
	return aaac
}

// SetCreateAt sets the "create_at" field.
func (aaac *AppAreaAuthCreate) SetCreateAt(i int64) *AppAreaAuthCreate {
	aaac.mutation.SetCreateAt(i)
	return aaac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aaac *AppAreaAuthCreate) SetNillableCreateAt(i *int64) *AppAreaAuthCreate {
	if i != nil {
		aaac.SetCreateAt(*i)
	}
	return aaac
}

// SetUpdateAt sets the "update_at" field.
func (aaac *AppAreaAuthCreate) SetUpdateAt(i int64) *AppAreaAuthCreate {
	aaac.mutation.SetUpdateAt(i)
	return aaac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (aaac *AppAreaAuthCreate) SetNillableUpdateAt(i *int64) *AppAreaAuthCreate {
	if i != nil {
		aaac.SetUpdateAt(*i)
	}
	return aaac
}

// SetDeleteAt sets the "delete_at" field.
func (aaac *AppAreaAuthCreate) SetDeleteAt(i int64) *AppAreaAuthCreate {
	aaac.mutation.SetDeleteAt(i)
	return aaac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aaac *AppAreaAuthCreate) SetNillableDeleteAt(i *int64) *AppAreaAuthCreate {
	if i != nil {
		aaac.SetDeleteAt(*i)
	}
	return aaac
}

// SetID sets the "id" field.
func (aaac *AppAreaAuthCreate) SetID(u uuid.UUID) *AppAreaAuthCreate {
	aaac.mutation.SetID(u)
	return aaac
}

// Mutation returns the AppAreaAuthMutation object of the builder.
func (aaac *AppAreaAuthCreate) Mutation() *AppAreaAuthMutation {
	return aaac.mutation
}

// Save creates the AppAreaAuth in the database.
func (aaac *AppAreaAuthCreate) Save(ctx context.Context) (*AppAreaAuth, error) {
	var (
		err  error
		node *AppAreaAuth
	)
	aaac.defaults()
	if len(aaac.hooks) == 0 {
		if err = aaac.check(); err != nil {
			return nil, err
		}
		node, err = aaac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppAreaAuthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aaac.check(); err != nil {
				return nil, err
			}
			aaac.mutation = mutation
			if node, err = aaac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aaac.hooks) - 1; i >= 0; i-- {
			if aaac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aaac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aaac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aaac *AppAreaAuthCreate) SaveX(ctx context.Context) *AppAreaAuth {
	v, err := aaac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aaac *AppAreaAuthCreate) Exec(ctx context.Context) error {
	_, err := aaac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaac *AppAreaAuthCreate) ExecX(ctx context.Context) {
	if err := aaac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aaac *AppAreaAuthCreate) defaults() {
	if _, ok := aaac.mutation.CreateAt(); !ok {
		v := appareaauth.DefaultCreateAt()
		aaac.mutation.SetCreateAt(v)
	}
	if _, ok := aaac.mutation.UpdateAt(); !ok {
		v := appareaauth.DefaultUpdateAt()
		aaac.mutation.SetUpdateAt(v)
	}
	if _, ok := aaac.mutation.DeleteAt(); !ok {
		v := appareaauth.DefaultDeleteAt()
		aaac.mutation.SetDeleteAt(v)
	}
	if _, ok := aaac.mutation.ID(); !ok {
		v := appareaauth.DefaultID()
		aaac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aaac *AppAreaAuthCreate) check() error {
	if _, ok := aaac.mutation.TargetAreaID(); !ok {
		return &ValidationError{Name: "target_area_id", err: errors.New(`ent: missing required field "target_area_id"`)}
	}
	if _, ok := aaac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := aaac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := aaac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := aaac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (aaac *AppAreaAuthCreate) sqlSave(ctx context.Context) (*AppAreaAuth, error) {
	_node, _spec := aaac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aaac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (aaac *AppAreaAuthCreate) createSpec() (*AppAreaAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &AppAreaAuth{config: aaac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appareaauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appareaauth.FieldID,
			},
		}
	)
	_spec.OnConflict = aaac.conflict
	if id, ok := aaac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aaac.mutation.TargetAreaID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appareaauth.FieldTargetAreaID,
		})
		_node.TargetAreaID = value
	}
	if value, ok := aaac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appareaauth.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := aaac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := aaac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := aaac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: appareaauth.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppAreaAuth.Create().
//		SetTargetAreaID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppAreaAuthUpsert) {
//			SetTargetAreaID(v+v).
//		}).
//		Exec(ctx)
//
func (aaac *AppAreaAuthCreate) OnConflict(opts ...sql.ConflictOption) *AppAreaAuthUpsertOne {
	aaac.conflict = opts
	return &AppAreaAuthUpsertOne{
		create: aaac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppAreaAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aaac *AppAreaAuthCreate) OnConflictColumns(columns ...string) *AppAreaAuthUpsertOne {
	aaac.conflict = append(aaac.conflict, sql.ConflictColumns(columns...))
	return &AppAreaAuthUpsertOne{
		create: aaac,
	}
}

type (
	// AppAreaAuthUpsertOne is the builder for "upsert"-ing
	//  one AppAreaAuth node.
	AppAreaAuthUpsertOne struct {
		create *AppAreaAuthCreate
	}

	// AppAreaAuthUpsert is the "OnConflict" setter.
	AppAreaAuthUpsert struct {
		*sql.UpdateSet
	}
)

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppAreaAuthUpsert) SetTargetAreaID(v uuid.UUID) *AppAreaAuthUpsert {
	u.Set(appareaauth.FieldTargetAreaID, v)
	return u
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppAreaAuthUpsert) UpdateTargetAreaID() *AppAreaAuthUpsert {
	u.SetExcluded(appareaauth.FieldTargetAreaID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppAreaAuthUpsert) SetAppID(v uuid.UUID) *AppAreaAuthUpsert {
	u.Set(appareaauth.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAreaAuthUpsert) UpdateAppID() *AppAreaAuthUpsert {
	u.SetExcluded(appareaauth.FieldAppID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppAreaAuthUpsert) SetCreateAt(v int64) *AppAreaAuthUpsert {
	u.Set(appareaauth.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsert) UpdateCreateAt() *AppAreaAuthUpsert {
	u.SetExcluded(appareaauth.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppAreaAuthUpsert) SetUpdateAt(v int64) *AppAreaAuthUpsert {
	u.Set(appareaauth.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsert) UpdateUpdateAt() *AppAreaAuthUpsert {
	u.SetExcluded(appareaauth.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppAreaAuthUpsert) SetDeleteAt(v int64) *AppAreaAuthUpsert {
	u.Set(appareaauth.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsert) UpdateDeleteAt() *AppAreaAuthUpsert {
	u.SetExcluded(appareaauth.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppAreaAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appareaauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppAreaAuthUpsertOne) UpdateNewValues() *AppAreaAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appareaauth.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppAreaAuth.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppAreaAuthUpsertOne) Ignore() *AppAreaAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppAreaAuthUpsertOne) DoNothing() *AppAreaAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppAreaAuthCreate.OnConflict
// documentation for more info.
func (u *AppAreaAuthUpsertOne) Update(set func(*AppAreaAuthUpsert)) *AppAreaAuthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppAreaAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppAreaAuthUpsertOne) SetTargetAreaID(v uuid.UUID) *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetTargetAreaID(v)
	})
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppAreaAuthUpsertOne) UpdateTargetAreaID() *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateTargetAreaID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppAreaAuthUpsertOne) SetAppID(v uuid.UUID) *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAreaAuthUpsertOne) UpdateAppID() *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppAreaAuthUpsertOne) SetCreateAt(v int64) *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsertOne) UpdateCreateAt() *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppAreaAuthUpsertOne) SetUpdateAt(v int64) *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsertOne) UpdateUpdateAt() *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppAreaAuthUpsertOne) SetDeleteAt(v int64) *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsertOne) UpdateDeleteAt() *AppAreaAuthUpsertOne {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppAreaAuthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppAreaAuthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppAreaAuthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppAreaAuthUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppAreaAuthUpsertOne.ID is not supported by MySQL driver. Use AppAreaAuthUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppAreaAuthUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppAreaAuthCreateBulk is the builder for creating many AppAreaAuth entities in bulk.
type AppAreaAuthCreateBulk struct {
	config
	builders []*AppAreaAuthCreate
	conflict []sql.ConflictOption
}

// Save creates the AppAreaAuth entities in the database.
func (aaacb *AppAreaAuthCreateBulk) Save(ctx context.Context) ([]*AppAreaAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aaacb.builders))
	nodes := make([]*AppAreaAuth, len(aaacb.builders))
	mutators := make([]Mutator, len(aaacb.builders))
	for i := range aaacb.builders {
		func(i int, root context.Context) {
			builder := aaacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppAreaAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aaacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aaacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aaacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aaacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aaacb *AppAreaAuthCreateBulk) SaveX(ctx context.Context) []*AppAreaAuth {
	v, err := aaacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aaacb *AppAreaAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := aaacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aaacb *AppAreaAuthCreateBulk) ExecX(ctx context.Context) {
	if err := aaacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppAreaAuth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppAreaAuthUpsert) {
//			SetTargetAreaID(v+v).
//		}).
//		Exec(ctx)
//
func (aaacb *AppAreaAuthCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppAreaAuthUpsertBulk {
	aaacb.conflict = opts
	return &AppAreaAuthUpsertBulk{
		create: aaacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppAreaAuth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aaacb *AppAreaAuthCreateBulk) OnConflictColumns(columns ...string) *AppAreaAuthUpsertBulk {
	aaacb.conflict = append(aaacb.conflict, sql.ConflictColumns(columns...))
	return &AppAreaAuthUpsertBulk{
		create: aaacb,
	}
}

// AppAreaAuthUpsertBulk is the builder for "upsert"-ing
// a bulk of AppAreaAuth nodes.
type AppAreaAuthUpsertBulk struct {
	create *AppAreaAuthCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppAreaAuth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appareaauth.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppAreaAuthUpsertBulk) UpdateNewValues() *AppAreaAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appareaauth.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppAreaAuth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppAreaAuthUpsertBulk) Ignore() *AppAreaAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppAreaAuthUpsertBulk) DoNothing() *AppAreaAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppAreaAuthCreateBulk.OnConflict
// documentation for more info.
func (u *AppAreaAuthUpsertBulk) Update(set func(*AppAreaAuthUpsert)) *AppAreaAuthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppAreaAuthUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppAreaAuthUpsertBulk) SetTargetAreaID(v uuid.UUID) *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetTargetAreaID(v)
	})
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppAreaAuthUpsertBulk) UpdateTargetAreaID() *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateTargetAreaID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppAreaAuthUpsertBulk) SetAppID(v uuid.UUID) *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppAreaAuthUpsertBulk) UpdateAppID() *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateAppID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppAreaAuthUpsertBulk) SetCreateAt(v int64) *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsertBulk) UpdateCreateAt() *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppAreaAuthUpsertBulk) SetUpdateAt(v int64) *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsertBulk) UpdateUpdateAt() *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppAreaAuthUpsertBulk) SetDeleteAt(v int64) *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppAreaAuthUpsertBulk) UpdateDeleteAt() *AppAreaAuthUpsertBulk {
	return u.Update(func(s *AppAreaAuthUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppAreaAuthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppAreaAuthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppAreaAuthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppAreaAuthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
