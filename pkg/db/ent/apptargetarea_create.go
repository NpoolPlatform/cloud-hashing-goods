// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/apptargetarea"
	"github.com/google/uuid"
)

// AppTargetAreaCreate is the builder for creating a AppTargetArea entity.
type AppTargetAreaCreate struct {
	config
	mutation *AppTargetAreaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTargetAreaID sets the "target_area_id" field.
func (atac *AppTargetAreaCreate) SetTargetAreaID(u uuid.UUID) *AppTargetAreaCreate {
	atac.mutation.SetTargetAreaID(u)
	return atac
}

// SetAppID sets the "app_id" field.
func (atac *AppTargetAreaCreate) SetAppID(u uuid.UUID) *AppTargetAreaCreate {
	atac.mutation.SetAppID(u)
	return atac
}

// SetCreateAt sets the "create_at" field.
func (atac *AppTargetAreaCreate) SetCreateAt(i int64) *AppTargetAreaCreate {
	atac.mutation.SetCreateAt(i)
	return atac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (atac *AppTargetAreaCreate) SetNillableCreateAt(i *int64) *AppTargetAreaCreate {
	if i != nil {
		atac.SetCreateAt(*i)
	}
	return atac
}

// SetUpdateAt sets the "update_at" field.
func (atac *AppTargetAreaCreate) SetUpdateAt(i int64) *AppTargetAreaCreate {
	atac.mutation.SetUpdateAt(i)
	return atac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (atac *AppTargetAreaCreate) SetNillableUpdateAt(i *int64) *AppTargetAreaCreate {
	if i != nil {
		atac.SetUpdateAt(*i)
	}
	return atac
}

// SetDeleteAt sets the "delete_at" field.
func (atac *AppTargetAreaCreate) SetDeleteAt(i int64) *AppTargetAreaCreate {
	atac.mutation.SetDeleteAt(i)
	return atac
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (atac *AppTargetAreaCreate) SetNillableDeleteAt(i *int64) *AppTargetAreaCreate {
	if i != nil {
		atac.SetDeleteAt(*i)
	}
	return atac
}

// SetID sets the "id" field.
func (atac *AppTargetAreaCreate) SetID(u uuid.UUID) *AppTargetAreaCreate {
	atac.mutation.SetID(u)
	return atac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atac *AppTargetAreaCreate) SetNillableID(u *uuid.UUID) *AppTargetAreaCreate {
	if u != nil {
		atac.SetID(*u)
	}
	return atac
}

// Mutation returns the AppTargetAreaMutation object of the builder.
func (atac *AppTargetAreaCreate) Mutation() *AppTargetAreaMutation {
	return atac.mutation
}

// Save creates the AppTargetArea in the database.
func (atac *AppTargetAreaCreate) Save(ctx context.Context) (*AppTargetArea, error) {
	var (
		err  error
		node *AppTargetArea
	)
	atac.defaults()
	if len(atac.hooks) == 0 {
		if err = atac.check(); err != nil {
			return nil, err
		}
		node, err = atac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppTargetAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = atac.check(); err != nil {
				return nil, err
			}
			atac.mutation = mutation
			if node, err = atac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(atac.hooks) - 1; i >= 0; i-- {
			if atac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = atac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, atac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (atac *AppTargetAreaCreate) SaveX(ctx context.Context) *AppTargetArea {
	v, err := atac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atac *AppTargetAreaCreate) Exec(ctx context.Context) error {
	_, err := atac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atac *AppTargetAreaCreate) ExecX(ctx context.Context) {
	if err := atac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atac *AppTargetAreaCreate) defaults() {
	if _, ok := atac.mutation.CreateAt(); !ok {
		v := apptargetarea.DefaultCreateAt()
		atac.mutation.SetCreateAt(v)
	}
	if _, ok := atac.mutation.UpdateAt(); !ok {
		v := apptargetarea.DefaultUpdateAt()
		atac.mutation.SetUpdateAt(v)
	}
	if _, ok := atac.mutation.DeleteAt(); !ok {
		v := apptargetarea.DefaultDeleteAt()
		atac.mutation.SetDeleteAt(v)
	}
	if _, ok := atac.mutation.ID(); !ok {
		v := apptargetarea.DefaultID()
		atac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atac *AppTargetAreaCreate) check() error {
	if _, ok := atac.mutation.TargetAreaID(); !ok {
		return &ValidationError{Name: "target_area_id", err: errors.New(`ent: missing required field "AppTargetArea.target_area_id"`)}
	}
	if _, ok := atac.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppTargetArea.app_id"`)}
	}
	if _, ok := atac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppTargetArea.create_at"`)}
	}
	if _, ok := atac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppTargetArea.update_at"`)}
	}
	if _, ok := atac.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "AppTargetArea.delete_at"`)}
	}
	return nil
}

func (atac *AppTargetAreaCreate) sqlSave(ctx context.Context) (*AppTargetArea, error) {
	_node, _spec := atac.createSpec()
	if err := sqlgraph.CreateNode(ctx, atac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (atac *AppTargetAreaCreate) createSpec() (*AppTargetArea, *sqlgraph.CreateSpec) {
	var (
		_node = &AppTargetArea{config: atac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: apptargetarea.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: apptargetarea.FieldID,
			},
		}
	)
	_spec.OnConflict = atac.conflict
	if id, ok := atac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atac.mutation.TargetAreaID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apptargetarea.FieldTargetAreaID,
		})
		_node.TargetAreaID = value
	}
	if value, ok := atac.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: apptargetarea.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := atac.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := atac.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := atac.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: apptargetarea.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppTargetArea.Create().
//		SetTargetAreaID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppTargetAreaUpsert) {
//			SetTargetAreaID(v+v).
//		}).
//		Exec(ctx)
//
func (atac *AppTargetAreaCreate) OnConflict(opts ...sql.ConflictOption) *AppTargetAreaUpsertOne {
	atac.conflict = opts
	return &AppTargetAreaUpsertOne{
		create: atac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppTargetArea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (atac *AppTargetAreaCreate) OnConflictColumns(columns ...string) *AppTargetAreaUpsertOne {
	atac.conflict = append(atac.conflict, sql.ConflictColumns(columns...))
	return &AppTargetAreaUpsertOne{
		create: atac,
	}
}

type (
	// AppTargetAreaUpsertOne is the builder for "upsert"-ing
	//  one AppTargetArea node.
	AppTargetAreaUpsertOne struct {
		create *AppTargetAreaCreate
	}

	// AppTargetAreaUpsert is the "OnConflict" setter.
	AppTargetAreaUpsert struct {
		*sql.UpdateSet
	}
)

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppTargetAreaUpsert) SetTargetAreaID(v uuid.UUID) *AppTargetAreaUpsert {
	u.Set(apptargetarea.FieldTargetAreaID, v)
	return u
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppTargetAreaUpsert) UpdateTargetAreaID() *AppTargetAreaUpsert {
	u.SetExcluded(apptargetarea.FieldTargetAreaID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppTargetAreaUpsert) SetAppID(v uuid.UUID) *AppTargetAreaUpsert {
	u.Set(apptargetarea.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppTargetAreaUpsert) UpdateAppID() *AppTargetAreaUpsert {
	u.SetExcluded(apptargetarea.FieldAppID)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppTargetAreaUpsert) SetCreateAt(v int64) *AppTargetAreaUpsert {
	u.Set(apptargetarea.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsert) UpdateCreateAt() *AppTargetAreaUpsert {
	u.SetExcluded(apptargetarea.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppTargetAreaUpsert) AddCreateAt(v int64) *AppTargetAreaUpsert {
	u.Add(apptargetarea.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppTargetAreaUpsert) SetUpdateAt(v int64) *AppTargetAreaUpsert {
	u.Set(apptargetarea.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsert) UpdateUpdateAt() *AppTargetAreaUpsert {
	u.SetExcluded(apptargetarea.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppTargetAreaUpsert) AddUpdateAt(v int64) *AppTargetAreaUpsert {
	u.Add(apptargetarea.FieldUpdateAt, v)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppTargetAreaUpsert) SetDeleteAt(v int64) *AppTargetAreaUpsert {
	u.Set(apptargetarea.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsert) UpdateDeleteAt() *AppTargetAreaUpsert {
	u.SetExcluded(apptargetarea.FieldDeleteAt)
	return u
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppTargetAreaUpsert) AddDeleteAt(v int64) *AppTargetAreaUpsert {
	u.Add(apptargetarea.FieldDeleteAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppTargetArea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apptargetarea.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppTargetAreaUpsertOne) UpdateNewValues() *AppTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(apptargetarea.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppTargetArea.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppTargetAreaUpsertOne) Ignore() *AppTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppTargetAreaUpsertOne) DoNothing() *AppTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppTargetAreaCreate.OnConflict
// documentation for more info.
func (u *AppTargetAreaUpsertOne) Update(set func(*AppTargetAreaUpsert)) *AppTargetAreaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppTargetAreaUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppTargetAreaUpsertOne) SetTargetAreaID(v uuid.UUID) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetTargetAreaID(v)
	})
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppTargetAreaUpsertOne) UpdateTargetAreaID() *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateTargetAreaID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppTargetAreaUpsertOne) SetAppID(v uuid.UUID) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppTargetAreaUpsertOne) UpdateAppID() *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateAppID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppTargetAreaUpsertOne) SetCreateAt(v int64) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppTargetAreaUpsertOne) AddCreateAt(v int64) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsertOne) UpdateCreateAt() *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppTargetAreaUpsertOne) SetUpdateAt(v int64) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppTargetAreaUpsertOne) AddUpdateAt(v int64) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsertOne) UpdateUpdateAt() *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppTargetAreaUpsertOne) SetDeleteAt(v int64) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppTargetAreaUpsertOne) AddDeleteAt(v int64) *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsertOne) UpdateDeleteAt() *AppTargetAreaUpsertOne {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppTargetAreaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppTargetAreaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppTargetAreaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppTargetAreaUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppTargetAreaUpsertOne.ID is not supported by MySQL driver. Use AppTargetAreaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppTargetAreaUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppTargetAreaCreateBulk is the builder for creating many AppTargetArea entities in bulk.
type AppTargetAreaCreateBulk struct {
	config
	builders []*AppTargetAreaCreate
	conflict []sql.ConflictOption
}

// Save creates the AppTargetArea entities in the database.
func (atacb *AppTargetAreaCreateBulk) Save(ctx context.Context) ([]*AppTargetArea, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atacb.builders))
	nodes := make([]*AppTargetArea, len(atacb.builders))
	mutators := make([]Mutator, len(atacb.builders))
	for i := range atacb.builders {
		func(i int, root context.Context) {
			builder := atacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppTargetAreaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atacb *AppTargetAreaCreateBulk) SaveX(ctx context.Context) []*AppTargetArea {
	v, err := atacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atacb *AppTargetAreaCreateBulk) Exec(ctx context.Context) error {
	_, err := atacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atacb *AppTargetAreaCreateBulk) ExecX(ctx context.Context) {
	if err := atacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppTargetArea.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppTargetAreaUpsert) {
//			SetTargetAreaID(v+v).
//		}).
//		Exec(ctx)
//
func (atacb *AppTargetAreaCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppTargetAreaUpsertBulk {
	atacb.conflict = opts
	return &AppTargetAreaUpsertBulk{
		create: atacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppTargetArea.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (atacb *AppTargetAreaCreateBulk) OnConflictColumns(columns ...string) *AppTargetAreaUpsertBulk {
	atacb.conflict = append(atacb.conflict, sql.ConflictColumns(columns...))
	return &AppTargetAreaUpsertBulk{
		create: atacb,
	}
}

// AppTargetAreaUpsertBulk is the builder for "upsert"-ing
// a bulk of AppTargetArea nodes.
type AppTargetAreaUpsertBulk struct {
	create *AppTargetAreaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppTargetArea.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(apptargetarea.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppTargetAreaUpsertBulk) UpdateNewValues() *AppTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(apptargetarea.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppTargetArea.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppTargetAreaUpsertBulk) Ignore() *AppTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppTargetAreaUpsertBulk) DoNothing() *AppTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppTargetAreaCreateBulk.OnConflict
// documentation for more info.
func (u *AppTargetAreaUpsertBulk) Update(set func(*AppTargetAreaUpsert)) *AppTargetAreaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppTargetAreaUpsert{UpdateSet: update})
	}))
	return u
}

// SetTargetAreaID sets the "target_area_id" field.
func (u *AppTargetAreaUpsertBulk) SetTargetAreaID(v uuid.UUID) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetTargetAreaID(v)
	})
}

// UpdateTargetAreaID sets the "target_area_id" field to the value that was provided on create.
func (u *AppTargetAreaUpsertBulk) UpdateTargetAreaID() *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateTargetAreaID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppTargetAreaUpsertBulk) SetAppID(v uuid.UUID) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppTargetAreaUpsertBulk) UpdateAppID() *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateAppID()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppTargetAreaUpsertBulk) SetCreateAt(v int64) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppTargetAreaUpsertBulk) AddCreateAt(v int64) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsertBulk) UpdateCreateAt() *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppTargetAreaUpsertBulk) SetUpdateAt(v int64) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppTargetAreaUpsertBulk) AddUpdateAt(v int64) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsertBulk) UpdateUpdateAt() *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *AppTargetAreaUpsertBulk) SetDeleteAt(v int64) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.SetDeleteAt(v)
	})
}

// AddDeleteAt adds v to the "delete_at" field.
func (u *AppTargetAreaUpsertBulk) AddDeleteAt(v int64) *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.AddDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *AppTargetAreaUpsertBulk) UpdateDeleteAt() *AppTargetAreaUpsertBulk {
	return u.Update(func(s *AppTargetAreaUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *AppTargetAreaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppTargetAreaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppTargetAreaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppTargetAreaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
