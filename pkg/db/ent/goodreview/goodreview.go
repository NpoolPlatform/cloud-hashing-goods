// Code generated by entc, DO NOT EDIT.

package goodreview

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goodreview type in the database.
	Label = "good_review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEntityType holds the string denoting the entity_type field in the database.
	FieldEntityType = "entity_type"
	// FieldReviewedID holds the string denoting the reviewed_id field in the database.
	FieldReviewedID = "reviewed_id"
	// FieldReviewerID holds the string denoting the reviewer_id field in the database.
	FieldReviewerID = "reviewer_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// Table holds the table name of the goodreview in the database.
	Table = "good_reviews"
)

// Columns holds all SQL columns for goodreview fields.
var Columns = []string{
	FieldID,
	FieldEntityType,
	FieldReviewedID,
	FieldReviewerID,
	FieldState,
	FieldMessage,
	FieldCreateAt,
	FieldUpdateAt,
	FieldDeleteAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMessage holds the default value on creation for the "message" field.
	DefaultMessage string
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() int64
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() int64
	// UpdateDefaultUpdateAt holds the default value on update for the "update_at" field.
	UpdateDefaultUpdateAt func() int64
	// DefaultDeleteAt holds the default value on creation for the "delete_at" field.
	DefaultDeleteAt func() int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// EntityType defines the type for the "entity_type" enum field.
type EntityType string

// EntityType values.
const (
	EntityTypeGood              EntityType = "good"
	EntityTypeAppgood           EntityType = "appgood"
	EntityTypeApptargetarea     EntityType = "apptargetarea"
	EntityTypeAppgoodtargetarea EntityType = "appgoodtargetarea"
)

func (et EntityType) String() string {
	return string(et)
}

// EntityTypeValidator is a validator for the "entity_type" field enum values. It is called by the builders before save.
func EntityTypeValidator(et EntityType) error {
	switch et {
	case EntityTypeGood, EntityTypeAppgood, EntityTypeApptargetarea, EntityTypeAppgoodtargetarea:
		return nil
	default:
		return fmt.Errorf("goodreview: invalid enum value for entity_type field: %q", et)
	}
}

// State defines the type for the "state" enum field.
type State string

// StateNone is the default value of the State enum.
const DefaultState = StateNone

// State values.
const (
	StateApproved State = "approved"
	StateRejected State = "rejected"
	StateNone     State = "none"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateApproved, StateRejected, StateNone:
		return nil
	default:
		return fmt.Errorf("goodreview: invalid enum value for state field: %q", s)
	}
}
