// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/feetype"
	"github.com/google/uuid"
)

// FeeType is the model entity for the FeeType schema.
type FeeType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FeeType holds the value of the "fee_type" field.
	FeeType string `json:"fee_type,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FeeType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case feetype.FieldCreateAt, feetype.FieldUpdateAt, feetype.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case feetype.FieldFeeType:
			values[i] = new(sql.NullString)
		case feetype.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FeeType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FeeType fields.
func (ft *FeeType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feetype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ft.ID = *value
			}
		case feetype.FieldFeeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fee_type", values[i])
			} else if value.Valid {
				ft.FeeType = value.String
			}
		case feetype.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ft.CreateAt = uint32(value.Int64)
			}
		case feetype.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ft.UpdateAt = uint32(value.Int64)
			}
		case feetype.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ft.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FeeType.
// Note that you need to call FeeType.Unwrap() before calling this method if this FeeType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ft *FeeType) Update() *FeeTypeUpdateOne {
	return (&FeeTypeClient{config: ft.config}).UpdateOne(ft)
}

// Unwrap unwraps the FeeType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ft *FeeType) Unwrap() *FeeType {
	tx, ok := ft.config.driver.(*txDriver)
	if !ok {
		panic("ent: FeeType is not a transactional entity")
	}
	ft.config.driver = tx.drv
	return ft
}

// String implements the fmt.Stringer.
func (ft *FeeType) String() string {
	var builder strings.Builder
	builder.WriteString("FeeType(")
	builder.WriteString(fmt.Sprintf("id=%v", ft.ID))
	builder.WriteString(", fee_type=")
	builder.WriteString(ft.FeeType)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ft.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ft.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ft.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// FeeTypes is a parsable slice of FeeType.
type FeeTypes []*FeeType

func (ft FeeTypes) config(cfg config) {
	for _i := range ft {
		ft[_i].config = cfg
	}
}
