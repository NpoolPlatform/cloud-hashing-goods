// Code generated by entc, DO NOT EDIT.

package goodinfo

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the goodinfo type in the database.
	Label = "good_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeviceInfoID holds the string denoting the device_info_id field in the database.
	FieldDeviceInfoID = "device_info_id"
	// FieldGasPrice holds the string denoting the gas_price field in the database.
	FieldGasPrice = "gas_price"
	// FieldSeparateGasFee holds the string denoting the separate_gas_fee field in the database.
	FieldSeparateGasFee = "separate_gas_fee"
	// FieldUnitPower holds the string denoting the unit_power field in the database.
	FieldUnitPower = "unit_power"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldCoinInfoID holds the string denoting the coin_info_id field in the database.
	FieldCoinInfoID = "coin_info_id"
	// FieldActuals holds the string denoting the actuals field in the database.
	FieldActuals = "actuals"
	// FieldDeliveryTime holds the string denoting the delivery_time field in the database.
	FieldDeliveryTime = "delivery_time"
	// FieldInheritFromGoodID holds the string denoting the inherit_from_good_id field in the database.
	FieldInheritFromGoodID = "inherit_from_good_id"
	// FieldVendorLocationID holds the string denoting the vendor_location_id field in the database.
	FieldVendorLocationID = "vendor_location_id"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldBenefitType holds the string denoting the benefit_type field in the database.
	FieldBenefitType = "benefit_type"
	// FieldClassic holds the string denoting the classic field in the database.
	FieldClassic = "classic"
	// FieldSupportCoinTypeIds holds the string denoting the support_coin_type_ids field in the database.
	FieldSupportCoinTypeIds = "support_coin_type_ids"
	// FieldReviewerID holds the string denoting the reviewer_id field in the database.
	FieldReviewerID = "reviewer_id"
	// FieldReviewState holds the string denoting the review_state field in the database.
	FieldReviewState = "review_state"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldCreateAt holds the string denoting the create_at field in the database.
	FieldCreateAt = "create_at"
	// FieldUpdateAt holds the string denoting the update_at field in the database.
	FieldUpdateAt = "update_at"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// Table holds the table name of the goodinfo in the database.
	Table = "good_infos"
)

// Columns holds all SQL columns for goodinfo fields.
var Columns = []string{
	FieldID,
	FieldDeviceInfoID,
	FieldGasPrice,
	FieldSeparateGasFee,
	FieldUnitPower,
	FieldDuration,
	FieldCoinInfoID,
	FieldActuals,
	FieldDeliveryTime,
	FieldInheritFromGoodID,
	FieldVendorLocationID,
	FieldPrice,
	FieldBenefitType,
	FieldClassic,
	FieldSupportCoinTypeIds,
	FieldReviewerID,
	FieldReviewState,
	FieldTotal,
	FieldCreateAt,
	FieldUpdateAt,
	FieldDeleteAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// GasPriceValidator is a validator for the "gas_price" field. It is called by the builders before save.
	GasPriceValidator func(int) error
	// UnitPowerValidator is a validator for the "unit_power" field. It is called by the builders before save.
	UnitPowerValidator func(float64) error
	// DurationValidator is a validator for the "duration" field. It is called by the builders before save.
	DurationValidator func(int) error
	// PriceValidator is a validator for the "price" field. It is called by the builders before save.
	PriceValidator func(int) error
	// TotalValidator is a validator for the "total" field. It is called by the builders before save.
	TotalValidator func(int) error
	// DefaultCreateAt holds the default value on creation for the "create_at" field.
	DefaultCreateAt func() int64
	// DefaultUpdateAt holds the default value on creation for the "update_at" field.
	DefaultUpdateAt func() int64
	// DefaultDeleteAt holds the default value on creation for the "delete_at" field.
	DefaultDeleteAt func() int64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// BenefitType defines the type for the "benefit_type" enum field.
type BenefitType string

// BenefitType values.
const (
	BenefitTypePool     BenefitType = "pool"
	BenefitTypePlatform BenefitType = "platform"
)

func (bt BenefitType) String() string {
	return string(bt)
}

// BenefitTypeValidator is a validator for the "benefit_type" field enum values. It is called by the builders before save.
func BenefitTypeValidator(bt BenefitType) error {
	switch bt {
	case BenefitTypePool, BenefitTypePlatform:
		return nil
	default:
		return fmt.Errorf("goodinfo: invalid enum value for benefit_type field: %q", bt)
	}
}

// ReviewState defines the type for the "review_state" enum field.
type ReviewState string

// ReviewState values.
const (
	ReviewStatePassed   ReviewState = "passed"
	ReviewStateRejected ReviewState = "rejected"
)

func (rs ReviewState) String() string {
	return string(rs)
}

// ReviewStateValidator is a validator for the "review_state" field enum values. It is called by the builders before save.
func ReviewStateValidator(rs ReviewState) error {
	switch rs {
	case ReviewStatePassed, ReviewStateRejected:
		return nil
	default:
		return fmt.Errorf("goodinfo: invalid enum value for review_state field: %q", rs)
	}
}
