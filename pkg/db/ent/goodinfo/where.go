// Code generated by entc, DO NOT EDIT.

package goodinfo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceInfoID), v))
	})
}

// SeparateFee applies equality check predicate on the "separate_fee" field. It's identical to SeparateFeeEQ.
func SeparateFee(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeparateFee), v))
	})
}

// UnitPower applies equality check predicate on the "unit_power" field. It's identical to UnitPowerEQ.
func UnitPower(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPower), v))
	})
}

// DurationDays applies equality check predicate on the "duration_days" field. It's identical to DurationDaysEQ.
func DurationDays(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationDays), v))
	})
}

// CoinInfoID applies equality check predicate on the "coin_info_id" field. It's identical to CoinInfoIDEQ.
func CoinInfoID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinInfoID), v))
	})
}

// Actuals applies equality check predicate on the "actuals" field. It's identical to ActualsEQ.
func Actuals(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActuals), v))
	})
}

// DeliveryAt applies equality check predicate on the "delivery_at" field. It's identical to DeliveryAtEQ.
func DeliveryAt(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// InheritFromGoodID applies equality check predicate on the "inherit_from_good_id" field. It's identical to InheritFromGoodIDEQ.
func InheritFromGoodID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInheritFromGoodID), v))
	})
}

// VendorLocationID applies equality check predicate on the "vendor_location_id" field. It's identical to VendorLocationIDEQ.
func VendorLocationID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceCurrency applies equality check predicate on the "price_currency" field. It's identical to PriceCurrencyEQ.
func PriceCurrency(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceCurrency), v))
	})
}

// Classic applies equality check predicate on the "classic" field. It's identical to ClassicEQ.
func Classic(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassic), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceInfoID), v...))
	})
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceInfoID), v...))
	})
}

// DeviceInfoIDGT applies the GT predicate on the "device_info_id" field.
func DeviceInfoIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDGTE applies the GTE predicate on the "device_info_id" field.
func DeviceInfoIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDLT applies the LT predicate on the "device_info_id" field.
func DeviceInfoIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDLTE applies the LTE predicate on the "device_info_id" field.
func DeviceInfoIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceInfoID), v))
	})
}

// SeparateFeeEQ applies the EQ predicate on the "separate_fee" field.
func SeparateFeeEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeparateFee), v))
	})
}

// SeparateFeeNEQ applies the NEQ predicate on the "separate_fee" field.
func SeparateFeeNEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeparateFee), v))
	})
}

// UnitPowerEQ applies the EQ predicate on the "unit_power" field.
func UnitPowerEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPower), v))
	})
}

// UnitPowerNEQ applies the NEQ predicate on the "unit_power" field.
func UnitPowerNEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPower), v))
	})
}

// UnitPowerIn applies the In predicate on the "unit_power" field.
func UnitPowerIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitPower), v...))
	})
}

// UnitPowerNotIn applies the NotIn predicate on the "unit_power" field.
func UnitPowerNotIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitPower), v...))
	})
}

// UnitPowerGT applies the GT predicate on the "unit_power" field.
func UnitPowerGT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPower), v))
	})
}

// UnitPowerGTE applies the GTE predicate on the "unit_power" field.
func UnitPowerGTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPower), v))
	})
}

// UnitPowerLT applies the LT predicate on the "unit_power" field.
func UnitPowerLT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPower), v))
	})
}

// UnitPowerLTE applies the LTE predicate on the "unit_power" field.
func UnitPowerLTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPower), v))
	})
}

// DurationDaysEQ applies the EQ predicate on the "duration_days" field.
func DurationDaysEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDurationDays), v))
	})
}

// DurationDaysNEQ applies the NEQ predicate on the "duration_days" field.
func DurationDaysNEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDurationDays), v))
	})
}

// DurationDaysIn applies the In predicate on the "duration_days" field.
func DurationDaysIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDurationDays), v...))
	})
}

// DurationDaysNotIn applies the NotIn predicate on the "duration_days" field.
func DurationDaysNotIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDurationDays), v...))
	})
}

// DurationDaysGT applies the GT predicate on the "duration_days" field.
func DurationDaysGT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDurationDays), v))
	})
}

// DurationDaysGTE applies the GTE predicate on the "duration_days" field.
func DurationDaysGTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDurationDays), v))
	})
}

// DurationDaysLT applies the LT predicate on the "duration_days" field.
func DurationDaysLT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDurationDays), v))
	})
}

// DurationDaysLTE applies the LTE predicate on the "duration_days" field.
func DurationDaysLTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDurationDays), v))
	})
}

// CoinInfoIDEQ applies the EQ predicate on the "coin_info_id" field.
func CoinInfoIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDNEQ applies the NEQ predicate on the "coin_info_id" field.
func CoinInfoIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDIn applies the In predicate on the "coin_info_id" field.
func CoinInfoIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoinInfoID), v...))
	})
}

// CoinInfoIDNotIn applies the NotIn predicate on the "coin_info_id" field.
func CoinInfoIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoinInfoID), v...))
	})
}

// CoinInfoIDGT applies the GT predicate on the "coin_info_id" field.
func CoinInfoIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDGTE applies the GTE predicate on the "coin_info_id" field.
func CoinInfoIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDLT applies the LT predicate on the "coin_info_id" field.
func CoinInfoIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDLTE applies the LTE predicate on the "coin_info_id" field.
func CoinInfoIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinInfoID), v))
	})
}

// ActualsEQ applies the EQ predicate on the "actuals" field.
func ActualsEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActuals), v))
	})
}

// ActualsNEQ applies the NEQ predicate on the "actuals" field.
func ActualsNEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActuals), v))
	})
}

// DeliveryAtEQ applies the EQ predicate on the "delivery_at" field.
func DeliveryAtEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtNEQ applies the NEQ predicate on the "delivery_at" field.
func DeliveryAtNEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtIn applies the In predicate on the "delivery_at" field.
func DeliveryAtIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtNotIn applies the NotIn predicate on the "delivery_at" field.
func DeliveryAtNotIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeliveryAt), v...))
	})
}

// DeliveryAtGT applies the GT predicate on the "delivery_at" field.
func DeliveryAtGT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtGTE applies the GTE predicate on the "delivery_at" field.
func DeliveryAtGTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLT applies the LT predicate on the "delivery_at" field.
func DeliveryAtLT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryAt), v))
	})
}

// DeliveryAtLTE applies the LTE predicate on the "delivery_at" field.
func DeliveryAtLTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryAt), v))
	})
}

// InheritFromGoodIDEQ applies the EQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDNEQ applies the NEQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDIn applies the In predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInheritFromGoodID), v...))
	})
}

// InheritFromGoodIDNotIn applies the NotIn predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInheritFromGoodID), v...))
	})
}

// InheritFromGoodIDGT applies the GT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDGTE applies the GTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDLT applies the LT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDLTE applies the LTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInheritFromGoodID), v))
	})
}

// VendorLocationIDEQ applies the EQ predicate on the "vendor_location_id" field.
func VendorLocationIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDNEQ applies the NEQ predicate on the "vendor_location_id" field.
func VendorLocationIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDIn applies the In predicate on the "vendor_location_id" field.
func VendorLocationIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDNotIn applies the NotIn predicate on the "vendor_location_id" field.
func VendorLocationIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDGT applies the GT predicate on the "vendor_location_id" field.
func VendorLocationIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDGTE applies the GTE predicate on the "vendor_location_id" field.
func VendorLocationIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLT applies the LT predicate on the "vendor_location_id" field.
func VendorLocationIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLTE applies the LTE predicate on the "vendor_location_id" field.
func VendorLocationIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorLocationID), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...uint64) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...uint64) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v uint64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceCurrencyEQ applies the EQ predicate on the "price_currency" field.
func PriceCurrencyEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceCurrency), v))
	})
}

// PriceCurrencyNEQ applies the NEQ predicate on the "price_currency" field.
func PriceCurrencyNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceCurrency), v))
	})
}

// PriceCurrencyIn applies the In predicate on the "price_currency" field.
func PriceCurrencyIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceCurrency), v...))
	})
}

// PriceCurrencyNotIn applies the NotIn predicate on the "price_currency" field.
func PriceCurrencyNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceCurrency), v...))
	})
}

// PriceCurrencyGT applies the GT predicate on the "price_currency" field.
func PriceCurrencyGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceCurrency), v))
	})
}

// PriceCurrencyGTE applies the GTE predicate on the "price_currency" field.
func PriceCurrencyGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceCurrency), v))
	})
}

// PriceCurrencyLT applies the LT predicate on the "price_currency" field.
func PriceCurrencyLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceCurrency), v))
	})
}

// PriceCurrencyLTE applies the LTE predicate on the "price_currency" field.
func PriceCurrencyLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceCurrency), v))
	})
}

// BenefitTypeEQ applies the EQ predicate on the "benefit_type" field.
func BenefitTypeEQ(v BenefitType) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeNEQ applies the NEQ predicate on the "benefit_type" field.
func BenefitTypeNEQ(v BenefitType) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeIn applies the In predicate on the "benefit_type" field.
func BenefitTypeIn(vs ...BenefitType) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBenefitType), v...))
	})
}

// BenefitTypeNotIn applies the NotIn predicate on the "benefit_type" field.
func BenefitTypeNotIn(vs ...BenefitType) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBenefitType), v...))
	})
}

// ClassicEQ applies the EQ predicate on the "classic" field.
func ClassicEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassic), v))
	})
}

// ClassicNEQ applies the NEQ predicate on the "classic" field.
func ClassicNEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassic), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnit), v))
	})
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnit), v))
	})
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnit), v...))
	})
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnit), v...))
	})
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnit), v))
	})
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnit), v))
	})
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnit), v))
	})
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnit), v))
	})
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUnit), v))
	})
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUnit), v))
	})
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUnit), v))
	})
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUnit), v))
	})
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUnit), v))
	})
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStart), v))
	})
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStart), v...))
	})
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStart), v...))
	})
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStart), v))
	})
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStart), v))
	})
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStart), v))
	})
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStart), v))
	})
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotal), v))
	})
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotal), v...))
	})
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotal), v...))
	})
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotal), v))
	})
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotal), v))
	})
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotal), v))
	})
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotal), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodInfo) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodInfo) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodInfo) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
