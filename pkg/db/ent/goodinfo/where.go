// Code generated by entc, DO NOT EDIT.

package goodinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DeviceInfoID applies equality check predicate on the "device_info_id" field. It's identical to DeviceInfoIDEQ.
func DeviceInfoID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceInfoID), v))
	})
}

// GasPrice applies equality check predicate on the "gas_price" field. It's identical to GasPriceEQ.
func GasPrice(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGasPrice), v))
	})
}

// SeparateGasFee applies equality check predicate on the "separate_gas_fee" field. It's identical to SeparateGasFeeEQ.
func SeparateGasFee(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeparateGasFee), v))
	})
}

// UnitPower applies equality check predicate on the "unit_power" field. It's identical to UnitPowerEQ.
func UnitPower(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPower), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// CoinInfoID applies equality check predicate on the "coin_info_id" field. It's identical to CoinInfoIDEQ.
func CoinInfoID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinInfoID), v))
	})
}

// Actuals applies equality check predicate on the "actuals" field. It's identical to ActualsEQ.
func Actuals(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActuals), v))
	})
}

// DeliveryTime applies equality check predicate on the "delivery_time" field. It's identical to DeliveryTimeEQ.
func DeliveryTime(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryTime), v))
	})
}

// InheritFromGoodID applies equality check predicate on the "inherit_from_good_id" field. It's identical to InheritFromGoodIDEQ.
func InheritFromGoodID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInheritFromGoodID), v))
	})
}

// VendorLocationID applies equality check predicate on the "vendor_location_id" field. It's identical to VendorLocationIDEQ.
func VendorLocationID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// Classic applies equality check predicate on the "classic" field. It's identical to ClassicEQ.
func Classic(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassic), v))
	})
}

// ReviewerID applies equality check predicate on the "reviewer_id" field. It's identical to ReviewerIDEQ.
func ReviewerID(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewerID), v))
	})
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// DeviceInfoIDEQ applies the EQ predicate on the "device_info_id" field.
func DeviceInfoIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDNEQ applies the NEQ predicate on the "device_info_id" field.
func DeviceInfoIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDIn applies the In predicate on the "device_info_id" field.
func DeviceInfoIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceInfoID), v...))
	})
}

// DeviceInfoIDNotIn applies the NotIn predicate on the "device_info_id" field.
func DeviceInfoIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceInfoID), v...))
	})
}

// DeviceInfoIDGT applies the GT predicate on the "device_info_id" field.
func DeviceInfoIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDGTE applies the GTE predicate on the "device_info_id" field.
func DeviceInfoIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDLT applies the LT predicate on the "device_info_id" field.
func DeviceInfoIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceInfoID), v))
	})
}

// DeviceInfoIDLTE applies the LTE predicate on the "device_info_id" field.
func DeviceInfoIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceInfoID), v))
	})
}

// GasPriceEQ applies the EQ predicate on the "gas_price" field.
func GasPriceEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGasPrice), v))
	})
}

// GasPriceNEQ applies the NEQ predicate on the "gas_price" field.
func GasPriceNEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGasPrice), v))
	})
}

// GasPriceIn applies the In predicate on the "gas_price" field.
func GasPriceIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGasPrice), v...))
	})
}

// GasPriceNotIn applies the NotIn predicate on the "gas_price" field.
func GasPriceNotIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGasPrice), v...))
	})
}

// GasPriceGT applies the GT predicate on the "gas_price" field.
func GasPriceGT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGasPrice), v))
	})
}

// GasPriceGTE applies the GTE predicate on the "gas_price" field.
func GasPriceGTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGasPrice), v))
	})
}

// GasPriceLT applies the LT predicate on the "gas_price" field.
func GasPriceLT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGasPrice), v))
	})
}

// GasPriceLTE applies the LTE predicate on the "gas_price" field.
func GasPriceLTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGasPrice), v))
	})
}

// SeparateGasFeeEQ applies the EQ predicate on the "separate_gas_fee" field.
func SeparateGasFeeEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeparateGasFee), v))
	})
}

// SeparateGasFeeNEQ applies the NEQ predicate on the "separate_gas_fee" field.
func SeparateGasFeeNEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeparateGasFee), v))
	})
}

// UnitPowerEQ applies the EQ predicate on the "unit_power" field.
func UnitPowerEQ(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPower), v))
	})
}

// UnitPowerNEQ applies the NEQ predicate on the "unit_power" field.
func UnitPowerNEQ(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPower), v))
	})
}

// UnitPowerIn applies the In predicate on the "unit_power" field.
func UnitPowerIn(vs ...float64) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUnitPower), v...))
	})
}

// UnitPowerNotIn applies the NotIn predicate on the "unit_power" field.
func UnitPowerNotIn(vs ...float64) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUnitPower), v...))
	})
}

// UnitPowerGT applies the GT predicate on the "unit_power" field.
func UnitPowerGT(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPower), v))
	})
}

// UnitPowerGTE applies the GTE predicate on the "unit_power" field.
func UnitPowerGTE(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPower), v))
	})
}

// UnitPowerLT applies the LT predicate on the "unit_power" field.
func UnitPowerLT(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPower), v))
	})
}

// UnitPowerLTE applies the LTE predicate on the "unit_power" field.
func UnitPowerLTE(v float64) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPower), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// CoinInfoIDEQ applies the EQ predicate on the "coin_info_id" field.
func CoinInfoIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDNEQ applies the NEQ predicate on the "coin_info_id" field.
func CoinInfoIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDIn applies the In predicate on the "coin_info_id" field.
func CoinInfoIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCoinInfoID), v...))
	})
}

// CoinInfoIDNotIn applies the NotIn predicate on the "coin_info_id" field.
func CoinInfoIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCoinInfoID), v...))
	})
}

// CoinInfoIDGT applies the GT predicate on the "coin_info_id" field.
func CoinInfoIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDGTE applies the GTE predicate on the "coin_info_id" field.
func CoinInfoIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDLT applies the LT predicate on the "coin_info_id" field.
func CoinInfoIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinInfoID), v))
	})
}

// CoinInfoIDLTE applies the LTE predicate on the "coin_info_id" field.
func CoinInfoIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinInfoID), v))
	})
}

// ActualsEQ applies the EQ predicate on the "actuals" field.
func ActualsEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActuals), v))
	})
}

// ActualsNEQ applies the NEQ predicate on the "actuals" field.
func ActualsNEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActuals), v))
	})
}

// DeliveryTimeEQ applies the EQ predicate on the "delivery_time" field.
func DeliveryTimeEQ(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeNEQ applies the NEQ predicate on the "delivery_time" field.
func DeliveryTimeNEQ(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeIn applies the In predicate on the "delivery_time" field.
func DeliveryTimeIn(vs ...time.Time) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeliveryTime), v...))
	})
}

// DeliveryTimeNotIn applies the NotIn predicate on the "delivery_time" field.
func DeliveryTimeNotIn(vs ...time.Time) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeliveryTime), v...))
	})
}

// DeliveryTimeGT applies the GT predicate on the "delivery_time" field.
func DeliveryTimeGT(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeGTE applies the GTE predicate on the "delivery_time" field.
func DeliveryTimeGTE(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeLT applies the LT predicate on the "delivery_time" field.
func DeliveryTimeLT(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeliveryTime), v))
	})
}

// DeliveryTimeLTE applies the LTE predicate on the "delivery_time" field.
func DeliveryTimeLTE(v time.Time) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeliveryTime), v))
	})
}

// InheritFromGoodIDEQ applies the EQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDNEQ applies the NEQ predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDIn applies the In predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInheritFromGoodID), v...))
	})
}

// InheritFromGoodIDNotIn applies the NotIn predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInheritFromGoodID), v...))
	})
}

// InheritFromGoodIDGT applies the GT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDGTE applies the GTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDLT applies the LT predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInheritFromGoodID), v))
	})
}

// InheritFromGoodIDLTE applies the LTE predicate on the "inherit_from_good_id" field.
func InheritFromGoodIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInheritFromGoodID), v))
	})
}

// VendorLocationIDEQ applies the EQ predicate on the "vendor_location_id" field.
func VendorLocationIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDNEQ applies the NEQ predicate on the "vendor_location_id" field.
func VendorLocationIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDIn applies the In predicate on the "vendor_location_id" field.
func VendorLocationIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDNotIn applies the NotIn predicate on the "vendor_location_id" field.
func VendorLocationIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVendorLocationID), v...))
	})
}

// VendorLocationIDGT applies the GT predicate on the "vendor_location_id" field.
func VendorLocationIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDGTE applies the GTE predicate on the "vendor_location_id" field.
func VendorLocationIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLT applies the LT predicate on the "vendor_location_id" field.
func VendorLocationIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVendorLocationID), v))
	})
}

// VendorLocationIDLTE applies the LTE predicate on the "vendor_location_id" field.
func VendorLocationIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVendorLocationID), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// BenefitTypeEQ applies the EQ predicate on the "benefit_type" field.
func BenefitTypeEQ(v BenefitType) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeNEQ applies the NEQ predicate on the "benefit_type" field.
func BenefitTypeNEQ(v BenefitType) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBenefitType), v))
	})
}

// BenefitTypeIn applies the In predicate on the "benefit_type" field.
func BenefitTypeIn(vs ...BenefitType) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBenefitType), v...))
	})
}

// BenefitTypeNotIn applies the NotIn predicate on the "benefit_type" field.
func BenefitTypeNotIn(vs ...BenefitType) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBenefitType), v...))
	})
}

// ClassicEQ applies the EQ predicate on the "classic" field.
func ClassicEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassic), v))
	})
}

// ClassicNEQ applies the NEQ predicate on the "classic" field.
func ClassicNEQ(v bool) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassic), v))
	})
}

// ReviewerIDEQ applies the EQ predicate on the "reviewer_id" field.
func ReviewerIDEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDNEQ applies the NEQ predicate on the "reviewer_id" field.
func ReviewerIDNEQ(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDIn applies the In predicate on the "reviewer_id" field.
func ReviewerIDIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReviewerID), v...))
	})
}

// ReviewerIDNotIn applies the NotIn predicate on the "reviewer_id" field.
func ReviewerIDNotIn(vs ...uuid.UUID) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReviewerID), v...))
	})
}

// ReviewerIDGT applies the GT predicate on the "reviewer_id" field.
func ReviewerIDGT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDGTE applies the GTE predicate on the "reviewer_id" field.
func ReviewerIDGTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDLT applies the LT predicate on the "reviewer_id" field.
func ReviewerIDLT(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewerID), v))
	})
}

// ReviewerIDLTE applies the LTE predicate on the "reviewer_id" field.
func ReviewerIDLTE(v uuid.UUID) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewerID), v))
	})
}

// ReviewStateEQ applies the EQ predicate on the "review_state" field.
func ReviewStateEQ(v ReviewState) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewState), v))
	})
}

// ReviewStateNEQ applies the NEQ predicate on the "review_state" field.
func ReviewStateNEQ(v ReviewState) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewState), v))
	})
}

// ReviewStateIn applies the In predicate on the "review_state" field.
func ReviewStateIn(vs ...ReviewState) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReviewState), v...))
	})
}

// ReviewStateNotIn applies the NotIn predicate on the "review_state" field.
func ReviewStateNotIn(vs ...ReviewState) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReviewState), v...))
	})
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotal), v))
	})
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTotal), v...))
	})
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int) predicate.GoodInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTotal), v...))
	})
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotal), v))
	})
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotal), v))
	})
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotal), v))
	})
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotal), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodInfo) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodInfo) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodInfo) predicate.GoodInfo {
	return predicate.GoodInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
