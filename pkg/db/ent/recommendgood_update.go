// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/recommendgood"
	"github.com/google/uuid"
)

// RecommendGoodUpdate is the builder for updating RecommendGood entities.
type RecommendGoodUpdate struct {
	config
	hooks    []Hook
	mutation *RecommendGoodMutation
}

// Where appends a list predicates to the RecommendGoodUpdate builder.
func (rgu *RecommendGoodUpdate) Where(ps ...predicate.RecommendGood) *RecommendGoodUpdate {
	rgu.mutation.Where(ps...)
	return rgu
}

// SetRecommenderID sets the "recommender_id" field.
func (rgu *RecommendGoodUpdate) SetRecommenderID(u uuid.UUID) *RecommendGoodUpdate {
	rgu.mutation.SetRecommenderID(u)
	return rgu
}

// SetGoodID sets the "good_id" field.
func (rgu *RecommendGoodUpdate) SetGoodID(u uuid.UUID) *RecommendGoodUpdate {
	rgu.mutation.SetGoodID(u)
	return rgu
}

// SetMessage sets the "message" field.
func (rgu *RecommendGoodUpdate) SetMessage(s string) *RecommendGoodUpdate {
	rgu.mutation.SetMessage(s)
	return rgu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rgu *RecommendGoodUpdate) SetNillableMessage(s *string) *RecommendGoodUpdate {
	if s != nil {
		rgu.SetMessage(*s)
	}
	return rgu
}

// SetCreateAt sets the "create_at" field.
func (rgu *RecommendGoodUpdate) SetCreateAt(i int64) *RecommendGoodUpdate {
	rgu.mutation.ResetCreateAt()
	rgu.mutation.SetCreateAt(i)
	return rgu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rgu *RecommendGoodUpdate) SetNillableCreateAt(i *int64) *RecommendGoodUpdate {
	if i != nil {
		rgu.SetCreateAt(*i)
	}
	return rgu
}

// AddCreateAt adds i to the "create_at" field.
func (rgu *RecommendGoodUpdate) AddCreateAt(i int64) *RecommendGoodUpdate {
	rgu.mutation.AddCreateAt(i)
	return rgu
}

// SetUpdateAt sets the "update_at" field.
func (rgu *RecommendGoodUpdate) SetUpdateAt(i int64) *RecommendGoodUpdate {
	rgu.mutation.ResetUpdateAt()
	rgu.mutation.SetUpdateAt(i)
	return rgu
}

// AddUpdateAt adds i to the "update_at" field.
func (rgu *RecommendGoodUpdate) AddUpdateAt(i int64) *RecommendGoodUpdate {
	rgu.mutation.AddUpdateAt(i)
	return rgu
}

// SetDeleteAt sets the "delete_at" field.
func (rgu *RecommendGoodUpdate) SetDeleteAt(i int64) *RecommendGoodUpdate {
	rgu.mutation.ResetDeleteAt()
	rgu.mutation.SetDeleteAt(i)
	return rgu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (rgu *RecommendGoodUpdate) SetNillableDeleteAt(i *int64) *RecommendGoodUpdate {
	if i != nil {
		rgu.SetDeleteAt(*i)
	}
	return rgu
}

// AddDeleteAt adds i to the "delete_at" field.
func (rgu *RecommendGoodUpdate) AddDeleteAt(i int64) *RecommendGoodUpdate {
	rgu.mutation.AddDeleteAt(i)
	return rgu
}

// Mutation returns the RecommendGoodMutation object of the builder.
func (rgu *RecommendGoodUpdate) Mutation() *RecommendGoodMutation {
	return rgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rgu *RecommendGoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rgu.defaults()
	if len(rgu.hooks) == 0 {
		affected, err = rgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rgu.mutation = mutation
			affected, err = rgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rgu.hooks) - 1; i >= 0; i-- {
			if rgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rgu *RecommendGoodUpdate) SaveX(ctx context.Context) int {
	affected, err := rgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rgu *RecommendGoodUpdate) Exec(ctx context.Context) error {
	_, err := rgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgu *RecommendGoodUpdate) ExecX(ctx context.Context) {
	if err := rgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rgu *RecommendGoodUpdate) defaults() {
	if _, ok := rgu.mutation.UpdateAt(); !ok {
		v := recommendgood.UpdateDefaultUpdateAt()
		rgu.mutation.SetUpdateAt(v)
	}
}

func (rgu *RecommendGoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendgood.Table,
			Columns: recommendgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: recommendgood.FieldID,
			},
		},
	}
	if ps := rgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgu.mutation.RecommenderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recommendgood.FieldRecommenderID,
		})
	}
	if value, ok := rgu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recommendgood.FieldGoodID,
		})
	}
	if value, ok := rgu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendgood.FieldMessage,
		})
	}
	if value, ok := rgu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldCreateAt,
		})
	}
	if value, ok := rgu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldCreateAt,
		})
	}
	if value, ok := rgu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldUpdateAt,
		})
	}
	if value, ok := rgu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldUpdateAt,
		})
	}
	if value, ok := rgu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldDeleteAt,
		})
	}
	if value, ok := rgu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RecommendGoodUpdateOne is the builder for updating a single RecommendGood entity.
type RecommendGoodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecommendGoodMutation
}

// SetRecommenderID sets the "recommender_id" field.
func (rguo *RecommendGoodUpdateOne) SetRecommenderID(u uuid.UUID) *RecommendGoodUpdateOne {
	rguo.mutation.SetRecommenderID(u)
	return rguo
}

// SetGoodID sets the "good_id" field.
func (rguo *RecommendGoodUpdateOne) SetGoodID(u uuid.UUID) *RecommendGoodUpdateOne {
	rguo.mutation.SetGoodID(u)
	return rguo
}

// SetMessage sets the "message" field.
func (rguo *RecommendGoodUpdateOne) SetMessage(s string) *RecommendGoodUpdateOne {
	rguo.mutation.SetMessage(s)
	return rguo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (rguo *RecommendGoodUpdateOne) SetNillableMessage(s *string) *RecommendGoodUpdateOne {
	if s != nil {
		rguo.SetMessage(*s)
	}
	return rguo
}

// SetCreateAt sets the "create_at" field.
func (rguo *RecommendGoodUpdateOne) SetCreateAt(i int64) *RecommendGoodUpdateOne {
	rguo.mutation.ResetCreateAt()
	rguo.mutation.SetCreateAt(i)
	return rguo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rguo *RecommendGoodUpdateOne) SetNillableCreateAt(i *int64) *RecommendGoodUpdateOne {
	if i != nil {
		rguo.SetCreateAt(*i)
	}
	return rguo
}

// AddCreateAt adds i to the "create_at" field.
func (rguo *RecommendGoodUpdateOne) AddCreateAt(i int64) *RecommendGoodUpdateOne {
	rguo.mutation.AddCreateAt(i)
	return rguo
}

// SetUpdateAt sets the "update_at" field.
func (rguo *RecommendGoodUpdateOne) SetUpdateAt(i int64) *RecommendGoodUpdateOne {
	rguo.mutation.ResetUpdateAt()
	rguo.mutation.SetUpdateAt(i)
	return rguo
}

// AddUpdateAt adds i to the "update_at" field.
func (rguo *RecommendGoodUpdateOne) AddUpdateAt(i int64) *RecommendGoodUpdateOne {
	rguo.mutation.AddUpdateAt(i)
	return rguo
}

// SetDeleteAt sets the "delete_at" field.
func (rguo *RecommendGoodUpdateOne) SetDeleteAt(i int64) *RecommendGoodUpdateOne {
	rguo.mutation.ResetDeleteAt()
	rguo.mutation.SetDeleteAt(i)
	return rguo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (rguo *RecommendGoodUpdateOne) SetNillableDeleteAt(i *int64) *RecommendGoodUpdateOne {
	if i != nil {
		rguo.SetDeleteAt(*i)
	}
	return rguo
}

// AddDeleteAt adds i to the "delete_at" field.
func (rguo *RecommendGoodUpdateOne) AddDeleteAt(i int64) *RecommendGoodUpdateOne {
	rguo.mutation.AddDeleteAt(i)
	return rguo
}

// Mutation returns the RecommendGoodMutation object of the builder.
func (rguo *RecommendGoodUpdateOne) Mutation() *RecommendGoodMutation {
	return rguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rguo *RecommendGoodUpdateOne) Select(field string, fields ...string) *RecommendGoodUpdateOne {
	rguo.fields = append([]string{field}, fields...)
	return rguo
}

// Save executes the query and returns the updated RecommendGood entity.
func (rguo *RecommendGoodUpdateOne) Save(ctx context.Context) (*RecommendGood, error) {
	var (
		err  error
		node *RecommendGood
	)
	rguo.defaults()
	if len(rguo.hooks) == 0 {
		node, err = rguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecommendGoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rguo.mutation = mutation
			node, err = rguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rguo.hooks) - 1; i >= 0; i-- {
			if rguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rguo *RecommendGoodUpdateOne) SaveX(ctx context.Context) *RecommendGood {
	node, err := rguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rguo *RecommendGoodUpdateOne) Exec(ctx context.Context) error {
	_, err := rguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rguo *RecommendGoodUpdateOne) ExecX(ctx context.Context) {
	if err := rguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rguo *RecommendGoodUpdateOne) defaults() {
	if _, ok := rguo.mutation.UpdateAt(); !ok {
		v := recommendgood.UpdateDefaultUpdateAt()
		rguo.mutation.SetUpdateAt(v)
	}
}

func (rguo *RecommendGoodUpdateOne) sqlSave(ctx context.Context) (_node *RecommendGood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recommendgood.Table,
			Columns: recommendgood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: recommendgood.FieldID,
			},
		},
	}
	id, ok := rguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RecommendGood.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recommendgood.FieldID)
		for _, f := range fields {
			if !recommendgood.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recommendgood.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rguo.mutation.RecommenderID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recommendgood.FieldRecommenderID,
		})
	}
	if value, ok := rguo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: recommendgood.FieldGoodID,
		})
	}
	if value, ok := rguo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recommendgood.FieldMessage,
		})
	}
	if value, ok := rguo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldCreateAt,
		})
	}
	if value, ok := rguo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldCreateAt,
		})
	}
	if value, ok := rguo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldUpdateAt,
		})
	}
	if value, ok := rguo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldUpdateAt,
		})
	}
	if value, ok := rguo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldDeleteAt,
		})
	}
	if value, ok := rguo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recommendgood.FieldDeleteAt,
		})
	}
	_node = &RecommendGood{config: rguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recommendgood.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
