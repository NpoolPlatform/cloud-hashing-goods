// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/fee"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FeeUpdate is the builder for updating Fee entities.
type FeeUpdate struct {
	config
	hooks    []Hook
	mutation *FeeMutation
}

// Where appends a list predicates to the FeeUpdate builder.
func (fu *FeeUpdate) Where(ps ...predicate.Fee) *FeeUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetAppID sets the "app_id" field.
func (fu *FeeUpdate) SetAppID(u uuid.UUID) *FeeUpdate {
	fu.mutation.SetAppID(u)
	return fu
}

// SetFeeTypeID sets the "fee_type_id" field.
func (fu *FeeUpdate) SetFeeTypeID(u uuid.UUID) *FeeUpdate {
	fu.mutation.SetFeeTypeID(u)
	return fu
}

// SetValue sets the "value" field.
func (fu *FeeUpdate) SetValue(u uint64) *FeeUpdate {
	fu.mutation.ResetValue()
	fu.mutation.SetValue(u)
	return fu
}

// AddValue adds u to the "value" field.
func (fu *FeeUpdate) AddValue(u uint64) *FeeUpdate {
	fu.mutation.AddValue(u)
	return fu
}

// SetCreateAt sets the "create_at" field.
func (fu *FeeUpdate) SetCreateAt(u uint32) *FeeUpdate {
	fu.mutation.ResetCreateAt()
	fu.mutation.SetCreateAt(u)
	return fu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableCreateAt(u *uint32) *FeeUpdate {
	if u != nil {
		fu.SetCreateAt(*u)
	}
	return fu
}

// AddCreateAt adds u to the "create_at" field.
func (fu *FeeUpdate) AddCreateAt(u uint32) *FeeUpdate {
	fu.mutation.AddCreateAt(u)
	return fu
}

// SetUpdateAt sets the "update_at" field.
func (fu *FeeUpdate) SetUpdateAt(u uint32) *FeeUpdate {
	fu.mutation.ResetUpdateAt()
	fu.mutation.SetUpdateAt(u)
	return fu
}

// AddUpdateAt adds u to the "update_at" field.
func (fu *FeeUpdate) AddUpdateAt(u uint32) *FeeUpdate {
	fu.mutation.AddUpdateAt(u)
	return fu
}

// SetDeleteAt sets the "delete_at" field.
func (fu *FeeUpdate) SetDeleteAt(u uint32) *FeeUpdate {
	fu.mutation.ResetDeleteAt()
	fu.mutation.SetDeleteAt(u)
	return fu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (fu *FeeUpdate) SetNillableDeleteAt(u *uint32) *FeeUpdate {
	if u != nil {
		fu.SetDeleteAt(*u)
	}
	return fu
}

// AddDeleteAt adds u to the "delete_at" field.
func (fu *FeeUpdate) AddDeleteAt(u uint32) *FeeUpdate {
	fu.mutation.AddDeleteAt(u)
	return fu
}

// Mutation returns the FeeMutation object of the builder.
func (fu *FeeUpdate) Mutation() *FeeMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fu.defaults()
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeeUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeeUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeeUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeeUpdate) defaults() {
	if _, ok := fu.mutation.UpdateAt(); !ok {
		v := fee.UpdateDefaultUpdateAt()
		fu.mutation.SetUpdateAt(v)
	}
}

func (fu *FeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fee.Table,
			Columns: fee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fee.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldAppID,
		})
	}
	if value, ok := fu.mutation.FeeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldFeeTypeID,
		})
	}
	if value, ok := fu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: fee.FieldValue,
		})
	}
	if value, ok := fu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: fee.FieldValue,
		})
	}
	if value, ok := fu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldCreateAt,
		})
	}
	if value, ok := fu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldCreateAt,
		})
	}
	if value, ok := fu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldUpdateAt,
		})
	}
	if value, ok := fu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldUpdateAt,
		})
	}
	if value, ok := fu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldDeleteAt,
		})
	}
	if value, ok := fu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FeeUpdateOne is the builder for updating a single Fee entity.
type FeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeeMutation
}

// SetAppID sets the "app_id" field.
func (fuo *FeeUpdateOne) SetAppID(u uuid.UUID) *FeeUpdateOne {
	fuo.mutation.SetAppID(u)
	return fuo
}

// SetFeeTypeID sets the "fee_type_id" field.
func (fuo *FeeUpdateOne) SetFeeTypeID(u uuid.UUID) *FeeUpdateOne {
	fuo.mutation.SetFeeTypeID(u)
	return fuo
}

// SetValue sets the "value" field.
func (fuo *FeeUpdateOne) SetValue(u uint64) *FeeUpdateOne {
	fuo.mutation.ResetValue()
	fuo.mutation.SetValue(u)
	return fuo
}

// AddValue adds u to the "value" field.
func (fuo *FeeUpdateOne) AddValue(u uint64) *FeeUpdateOne {
	fuo.mutation.AddValue(u)
	return fuo
}

// SetCreateAt sets the "create_at" field.
func (fuo *FeeUpdateOne) SetCreateAt(u uint32) *FeeUpdateOne {
	fuo.mutation.ResetCreateAt()
	fuo.mutation.SetCreateAt(u)
	return fuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableCreateAt(u *uint32) *FeeUpdateOne {
	if u != nil {
		fuo.SetCreateAt(*u)
	}
	return fuo
}

// AddCreateAt adds u to the "create_at" field.
func (fuo *FeeUpdateOne) AddCreateAt(u uint32) *FeeUpdateOne {
	fuo.mutation.AddCreateAt(u)
	return fuo
}

// SetUpdateAt sets the "update_at" field.
func (fuo *FeeUpdateOne) SetUpdateAt(u uint32) *FeeUpdateOne {
	fuo.mutation.ResetUpdateAt()
	fuo.mutation.SetUpdateAt(u)
	return fuo
}

// AddUpdateAt adds u to the "update_at" field.
func (fuo *FeeUpdateOne) AddUpdateAt(u uint32) *FeeUpdateOne {
	fuo.mutation.AddUpdateAt(u)
	return fuo
}

// SetDeleteAt sets the "delete_at" field.
func (fuo *FeeUpdateOne) SetDeleteAt(u uint32) *FeeUpdateOne {
	fuo.mutation.ResetDeleteAt()
	fuo.mutation.SetDeleteAt(u)
	return fuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (fuo *FeeUpdateOne) SetNillableDeleteAt(u *uint32) *FeeUpdateOne {
	if u != nil {
		fuo.SetDeleteAt(*u)
	}
	return fuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (fuo *FeeUpdateOne) AddDeleteAt(u uint32) *FeeUpdateOne {
	fuo.mutation.AddDeleteAt(u)
	return fuo
}

// Mutation returns the FeeMutation object of the builder.
func (fuo *FeeUpdateOne) Mutation() *FeeMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeeUpdateOne) Select(field string, fields ...string) *FeeUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fee entity.
func (fuo *FeeUpdateOne) Save(ctx context.Context) (*Fee, error) {
	var (
		err  error
		node *Fee
	)
	fuo.defaults()
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeeUpdateOne) SaveX(ctx context.Context) *Fee {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeeUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeeUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeeUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdateAt(); !ok {
		v := fee.UpdateDefaultUpdateAt()
		fuo.mutation.SetUpdateAt(v)
	}
}

func (fuo *FeeUpdateOne) sqlSave(ctx context.Context) (_node *Fee, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fee.Table,
			Columns: fee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fee.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Fee.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fee.FieldID)
		for _, f := range fields {
			if !fee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldAppID,
		})
	}
	if value, ok := fuo.mutation.FeeTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fee.FieldFeeTypeID,
		})
	}
	if value, ok := fuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: fee.FieldValue,
		})
	}
	if value, ok := fuo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: fee.FieldValue,
		})
	}
	if value, ok := fuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldCreateAt,
		})
	}
	if value, ok := fuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldCreateAt,
		})
	}
	if value, ok := fuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldUpdateAt,
		})
	}
	if value, ok := fuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldUpdateAt,
		})
	}
	if value, ok := fuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldDeleteAt,
		})
	}
	if value, ok := fuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fee.FieldDeleteAt,
		})
	}
	_node = &Fee{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
