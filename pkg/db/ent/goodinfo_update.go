// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/goodinfo"
	"github.com/NpoolPlatform/cloud-hashing-goods/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// GoodInfoUpdate is the builder for updating GoodInfo entities.
type GoodInfoUpdate struct {
	config
	hooks    []Hook
	mutation *GoodInfoMutation
}

// Where appends a list predicates to the GoodInfoUpdate builder.
func (giu *GoodInfoUpdate) Where(ps ...predicate.GoodInfo) *GoodInfoUpdate {
	giu.mutation.Where(ps...)
	return giu
}

// SetDeviceInfoID sets the "device_info_id" field.
func (giu *GoodInfoUpdate) SetDeviceInfoID(u uuid.UUID) *GoodInfoUpdate {
	giu.mutation.SetDeviceInfoID(u)
	return giu
}

// SetGasPrice sets the "gas_price" field.
func (giu *GoodInfoUpdate) SetGasPrice(i int64) *GoodInfoUpdate {
	giu.mutation.ResetGasPrice()
	giu.mutation.SetGasPrice(i)
	return giu
}

// AddGasPrice adds i to the "gas_price" field.
func (giu *GoodInfoUpdate) AddGasPrice(i int64) *GoodInfoUpdate {
	giu.mutation.AddGasPrice(i)
	return giu
}

// SetSeparateGasFee sets the "separate_gas_fee" field.
func (giu *GoodInfoUpdate) SetSeparateGasFee(b bool) *GoodInfoUpdate {
	giu.mutation.SetSeparateGasFee(b)
	return giu
}

// SetUnitPower sets the "unit_power" field.
func (giu *GoodInfoUpdate) SetUnitPower(i int32) *GoodInfoUpdate {
	giu.mutation.ResetUnitPower()
	giu.mutation.SetUnitPower(i)
	return giu
}

// AddUnitPower adds i to the "unit_power" field.
func (giu *GoodInfoUpdate) AddUnitPower(i int32) *GoodInfoUpdate {
	giu.mutation.AddUnitPower(i)
	return giu
}

// SetDurationDays sets the "duration_days" field.
func (giu *GoodInfoUpdate) SetDurationDays(i int32) *GoodInfoUpdate {
	giu.mutation.ResetDurationDays()
	giu.mutation.SetDurationDays(i)
	return giu
}

// AddDurationDays adds i to the "duration_days" field.
func (giu *GoodInfoUpdate) AddDurationDays(i int32) *GoodInfoUpdate {
	giu.mutation.AddDurationDays(i)
	return giu
}

// SetCoinInfoID sets the "coin_info_id" field.
func (giu *GoodInfoUpdate) SetCoinInfoID(u uuid.UUID) *GoodInfoUpdate {
	giu.mutation.SetCoinInfoID(u)
	return giu
}

// SetActuals sets the "actuals" field.
func (giu *GoodInfoUpdate) SetActuals(b bool) *GoodInfoUpdate {
	giu.mutation.SetActuals(b)
	return giu
}

// SetDeliveryAt sets the "delivery_at" field.
func (giu *GoodInfoUpdate) SetDeliveryAt(i int32) *GoodInfoUpdate {
	giu.mutation.ResetDeliveryAt()
	giu.mutation.SetDeliveryAt(i)
	return giu
}

// AddDeliveryAt adds i to the "delivery_at" field.
func (giu *GoodInfoUpdate) AddDeliveryAt(i int32) *GoodInfoUpdate {
	giu.mutation.AddDeliveryAt(i)
	return giu
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (giu *GoodInfoUpdate) SetInheritFromGoodID(u uuid.UUID) *GoodInfoUpdate {
	giu.mutation.SetInheritFromGoodID(u)
	return giu
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (giu *GoodInfoUpdate) SetVendorLocationID(u uuid.UUID) *GoodInfoUpdate {
	giu.mutation.SetVendorLocationID(u)
	return giu
}

// SetPrice sets the "price" field.
func (giu *GoodInfoUpdate) SetPrice(i int64) *GoodInfoUpdate {
	giu.mutation.ResetPrice()
	giu.mutation.SetPrice(i)
	return giu
}

// AddPrice adds i to the "price" field.
func (giu *GoodInfoUpdate) AddPrice(i int64) *GoodInfoUpdate {
	giu.mutation.AddPrice(i)
	return giu
}

// SetBenefitType sets the "benefit_type" field.
func (giu *GoodInfoUpdate) SetBenefitType(gt goodinfo.BenefitType) *GoodInfoUpdate {
	giu.mutation.SetBenefitType(gt)
	return giu
}

// SetClassic sets the "classic" field.
func (giu *GoodInfoUpdate) SetClassic(b bool) *GoodInfoUpdate {
	giu.mutation.SetClassic(b)
	return giu
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (giu *GoodInfoUpdate) SetSupportCoinTypeIds(u []uuid.UUID) *GoodInfoUpdate {
	giu.mutation.SetSupportCoinTypeIds(u)
	return giu
}

// SetTotal sets the "total" field.
func (giu *GoodInfoUpdate) SetTotal(i int32) *GoodInfoUpdate {
	giu.mutation.ResetTotal()
	giu.mutation.SetTotal(i)
	return giu
}

// AddTotal adds i to the "total" field.
func (giu *GoodInfoUpdate) AddTotal(i int32) *GoodInfoUpdate {
	giu.mutation.AddTotal(i)
	return giu
}

// SetCreateAt sets the "create_at" field.
func (giu *GoodInfoUpdate) SetCreateAt(i int64) *GoodInfoUpdate {
	giu.mutation.ResetCreateAt()
	giu.mutation.SetCreateAt(i)
	return giu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (giu *GoodInfoUpdate) SetNillableCreateAt(i *int64) *GoodInfoUpdate {
	if i != nil {
		giu.SetCreateAt(*i)
	}
	return giu
}

// AddCreateAt adds i to the "create_at" field.
func (giu *GoodInfoUpdate) AddCreateAt(i int64) *GoodInfoUpdate {
	giu.mutation.AddCreateAt(i)
	return giu
}

// SetUpdateAt sets the "update_at" field.
func (giu *GoodInfoUpdate) SetUpdateAt(i int64) *GoodInfoUpdate {
	giu.mutation.ResetUpdateAt()
	giu.mutation.SetUpdateAt(i)
	return giu
}

// AddUpdateAt adds i to the "update_at" field.
func (giu *GoodInfoUpdate) AddUpdateAt(i int64) *GoodInfoUpdate {
	giu.mutation.AddUpdateAt(i)
	return giu
}

// SetDeleteAt sets the "delete_at" field.
func (giu *GoodInfoUpdate) SetDeleteAt(i int64) *GoodInfoUpdate {
	giu.mutation.ResetDeleteAt()
	giu.mutation.SetDeleteAt(i)
	return giu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (giu *GoodInfoUpdate) SetNillableDeleteAt(i *int64) *GoodInfoUpdate {
	if i != nil {
		giu.SetDeleteAt(*i)
	}
	return giu
}

// AddDeleteAt adds i to the "delete_at" field.
func (giu *GoodInfoUpdate) AddDeleteAt(i int64) *GoodInfoUpdate {
	giu.mutation.AddDeleteAt(i)
	return giu
}

// Mutation returns the GoodInfoMutation object of the builder.
func (giu *GoodInfoUpdate) Mutation() *GoodInfoMutation {
	return giu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (giu *GoodInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	giu.defaults()
	if len(giu.hooks) == 0 {
		if err = giu.check(); err != nil {
			return 0, err
		}
		affected, err = giu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = giu.check(); err != nil {
				return 0, err
			}
			giu.mutation = mutation
			affected, err = giu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(giu.hooks) - 1; i >= 0; i-- {
			if giu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = giu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, giu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (giu *GoodInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := giu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (giu *GoodInfoUpdate) Exec(ctx context.Context) error {
	_, err := giu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giu *GoodInfoUpdate) ExecX(ctx context.Context) {
	if err := giu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (giu *GoodInfoUpdate) defaults() {
	if _, ok := giu.mutation.UpdateAt(); !ok {
		v := goodinfo.UpdateDefaultUpdateAt()
		giu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giu *GoodInfoUpdate) check() error {
	if v, ok := giu.mutation.GasPrice(); ok {
		if err := goodinfo.GasPriceValidator(v); err != nil {
			return &ValidationError{Name: "gas_price", err: fmt.Errorf("ent: validator failed for field \"gas_price\": %w", err)}
		}
	}
	if v, ok := giu.mutation.UnitPower(); ok {
		if err := goodinfo.UnitPowerValidator(v); err != nil {
			return &ValidationError{Name: "unit_power", err: fmt.Errorf("ent: validator failed for field \"unit_power\": %w", err)}
		}
	}
	if v, ok := giu.mutation.DurationDays(); ok {
		if err := goodinfo.DurationDaysValidator(v); err != nil {
			return &ValidationError{Name: "duration_days", err: fmt.Errorf("ent: validator failed for field \"duration_days\": %w", err)}
		}
	}
	if v, ok := giu.mutation.Price(); ok {
		if err := goodinfo.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := giu.mutation.BenefitType(); ok {
		if err := goodinfo.BenefitTypeValidator(v); err != nil {
			return &ValidationError{Name: "benefit_type", err: fmt.Errorf("ent: validator failed for field \"benefit_type\": %w", err)}
		}
	}
	if v, ok := giu.mutation.Total(); ok {
		if err := goodinfo.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf("ent: validator failed for field \"total\": %w", err)}
		}
	}
	return nil
}

func (giu *GoodInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodinfo.Table,
			Columns: goodinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodinfo.FieldID,
			},
		},
	}
	if ps := giu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giu.mutation.DeviceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldDeviceInfoID,
		})
	}
	if value, ok := giu.mutation.GasPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldGasPrice,
		})
	}
	if value, ok := giu.mutation.AddedGasPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldGasPrice,
		})
	}
	if value, ok := giu.mutation.SeparateGasFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodinfo.FieldSeparateGasFee,
		})
	}
	if value, ok := giu.mutation.UnitPower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldUnitPower,
		})
	}
	if value, ok := giu.mutation.AddedUnitPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldUnitPower,
		})
	}
	if value, ok := giu.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDurationDays,
		})
	}
	if value, ok := giu.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDurationDays,
		})
	}
	if value, ok := giu.mutation.CoinInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldCoinInfoID,
		})
	}
	if value, ok := giu.mutation.Actuals(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodinfo.FieldActuals,
		})
	}
	if value, ok := giu.mutation.DeliveryAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDeliveryAt,
		})
	}
	if value, ok := giu.mutation.AddedDeliveryAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDeliveryAt,
		})
	}
	if value, ok := giu.mutation.InheritFromGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldInheritFromGoodID,
		})
	}
	if value, ok := giu.mutation.VendorLocationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldVendorLocationID,
		})
	}
	if value, ok := giu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldPrice,
		})
	}
	if value, ok := giu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldPrice,
		})
	}
	if value, ok := giu.mutation.BenefitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodinfo.FieldBenefitType,
		})
	}
	if value, ok := giu.mutation.Classic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodinfo.FieldClassic,
		})
	}
	if value, ok := giu.mutation.SupportCoinTypeIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodinfo.FieldSupportCoinTypeIds,
		})
	}
	if value, ok := giu.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldTotal,
		})
	}
	if value, ok := giu.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldTotal,
		})
	}
	if value, ok := giu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldCreateAt,
		})
	}
	if value, ok := giu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldCreateAt,
		})
	}
	if value, ok := giu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldUpdateAt,
		})
	}
	if value, ok := giu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldUpdateAt,
		})
	}
	if value, ok := giu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldDeleteAt,
		})
	}
	if value, ok := giu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, giu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GoodInfoUpdateOne is the builder for updating a single GoodInfo entity.
type GoodInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoodInfoMutation
}

// SetDeviceInfoID sets the "device_info_id" field.
func (giuo *GoodInfoUpdateOne) SetDeviceInfoID(u uuid.UUID) *GoodInfoUpdateOne {
	giuo.mutation.SetDeviceInfoID(u)
	return giuo
}

// SetGasPrice sets the "gas_price" field.
func (giuo *GoodInfoUpdateOne) SetGasPrice(i int64) *GoodInfoUpdateOne {
	giuo.mutation.ResetGasPrice()
	giuo.mutation.SetGasPrice(i)
	return giuo
}

// AddGasPrice adds i to the "gas_price" field.
func (giuo *GoodInfoUpdateOne) AddGasPrice(i int64) *GoodInfoUpdateOne {
	giuo.mutation.AddGasPrice(i)
	return giuo
}

// SetSeparateGasFee sets the "separate_gas_fee" field.
func (giuo *GoodInfoUpdateOne) SetSeparateGasFee(b bool) *GoodInfoUpdateOne {
	giuo.mutation.SetSeparateGasFee(b)
	return giuo
}

// SetUnitPower sets the "unit_power" field.
func (giuo *GoodInfoUpdateOne) SetUnitPower(i int32) *GoodInfoUpdateOne {
	giuo.mutation.ResetUnitPower()
	giuo.mutation.SetUnitPower(i)
	return giuo
}

// AddUnitPower adds i to the "unit_power" field.
func (giuo *GoodInfoUpdateOne) AddUnitPower(i int32) *GoodInfoUpdateOne {
	giuo.mutation.AddUnitPower(i)
	return giuo
}

// SetDurationDays sets the "duration_days" field.
func (giuo *GoodInfoUpdateOne) SetDurationDays(i int32) *GoodInfoUpdateOne {
	giuo.mutation.ResetDurationDays()
	giuo.mutation.SetDurationDays(i)
	return giuo
}

// AddDurationDays adds i to the "duration_days" field.
func (giuo *GoodInfoUpdateOne) AddDurationDays(i int32) *GoodInfoUpdateOne {
	giuo.mutation.AddDurationDays(i)
	return giuo
}

// SetCoinInfoID sets the "coin_info_id" field.
func (giuo *GoodInfoUpdateOne) SetCoinInfoID(u uuid.UUID) *GoodInfoUpdateOne {
	giuo.mutation.SetCoinInfoID(u)
	return giuo
}

// SetActuals sets the "actuals" field.
func (giuo *GoodInfoUpdateOne) SetActuals(b bool) *GoodInfoUpdateOne {
	giuo.mutation.SetActuals(b)
	return giuo
}

// SetDeliveryAt sets the "delivery_at" field.
func (giuo *GoodInfoUpdateOne) SetDeliveryAt(i int32) *GoodInfoUpdateOne {
	giuo.mutation.ResetDeliveryAt()
	giuo.mutation.SetDeliveryAt(i)
	return giuo
}

// AddDeliveryAt adds i to the "delivery_at" field.
func (giuo *GoodInfoUpdateOne) AddDeliveryAt(i int32) *GoodInfoUpdateOne {
	giuo.mutation.AddDeliveryAt(i)
	return giuo
}

// SetInheritFromGoodID sets the "inherit_from_good_id" field.
func (giuo *GoodInfoUpdateOne) SetInheritFromGoodID(u uuid.UUID) *GoodInfoUpdateOne {
	giuo.mutation.SetInheritFromGoodID(u)
	return giuo
}

// SetVendorLocationID sets the "vendor_location_id" field.
func (giuo *GoodInfoUpdateOne) SetVendorLocationID(u uuid.UUID) *GoodInfoUpdateOne {
	giuo.mutation.SetVendorLocationID(u)
	return giuo
}

// SetPrice sets the "price" field.
func (giuo *GoodInfoUpdateOne) SetPrice(i int64) *GoodInfoUpdateOne {
	giuo.mutation.ResetPrice()
	giuo.mutation.SetPrice(i)
	return giuo
}

// AddPrice adds i to the "price" field.
func (giuo *GoodInfoUpdateOne) AddPrice(i int64) *GoodInfoUpdateOne {
	giuo.mutation.AddPrice(i)
	return giuo
}

// SetBenefitType sets the "benefit_type" field.
func (giuo *GoodInfoUpdateOne) SetBenefitType(gt goodinfo.BenefitType) *GoodInfoUpdateOne {
	giuo.mutation.SetBenefitType(gt)
	return giuo
}

// SetClassic sets the "classic" field.
func (giuo *GoodInfoUpdateOne) SetClassic(b bool) *GoodInfoUpdateOne {
	giuo.mutation.SetClassic(b)
	return giuo
}

// SetSupportCoinTypeIds sets the "support_coin_type_ids" field.
func (giuo *GoodInfoUpdateOne) SetSupportCoinTypeIds(u []uuid.UUID) *GoodInfoUpdateOne {
	giuo.mutation.SetSupportCoinTypeIds(u)
	return giuo
}

// SetTotal sets the "total" field.
func (giuo *GoodInfoUpdateOne) SetTotal(i int32) *GoodInfoUpdateOne {
	giuo.mutation.ResetTotal()
	giuo.mutation.SetTotal(i)
	return giuo
}

// AddTotal adds i to the "total" field.
func (giuo *GoodInfoUpdateOne) AddTotal(i int32) *GoodInfoUpdateOne {
	giuo.mutation.AddTotal(i)
	return giuo
}

// SetCreateAt sets the "create_at" field.
func (giuo *GoodInfoUpdateOne) SetCreateAt(i int64) *GoodInfoUpdateOne {
	giuo.mutation.ResetCreateAt()
	giuo.mutation.SetCreateAt(i)
	return giuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (giuo *GoodInfoUpdateOne) SetNillableCreateAt(i *int64) *GoodInfoUpdateOne {
	if i != nil {
		giuo.SetCreateAt(*i)
	}
	return giuo
}

// AddCreateAt adds i to the "create_at" field.
func (giuo *GoodInfoUpdateOne) AddCreateAt(i int64) *GoodInfoUpdateOne {
	giuo.mutation.AddCreateAt(i)
	return giuo
}

// SetUpdateAt sets the "update_at" field.
func (giuo *GoodInfoUpdateOne) SetUpdateAt(i int64) *GoodInfoUpdateOne {
	giuo.mutation.ResetUpdateAt()
	giuo.mutation.SetUpdateAt(i)
	return giuo
}

// AddUpdateAt adds i to the "update_at" field.
func (giuo *GoodInfoUpdateOne) AddUpdateAt(i int64) *GoodInfoUpdateOne {
	giuo.mutation.AddUpdateAt(i)
	return giuo
}

// SetDeleteAt sets the "delete_at" field.
func (giuo *GoodInfoUpdateOne) SetDeleteAt(i int64) *GoodInfoUpdateOne {
	giuo.mutation.ResetDeleteAt()
	giuo.mutation.SetDeleteAt(i)
	return giuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (giuo *GoodInfoUpdateOne) SetNillableDeleteAt(i *int64) *GoodInfoUpdateOne {
	if i != nil {
		giuo.SetDeleteAt(*i)
	}
	return giuo
}

// AddDeleteAt adds i to the "delete_at" field.
func (giuo *GoodInfoUpdateOne) AddDeleteAt(i int64) *GoodInfoUpdateOne {
	giuo.mutation.AddDeleteAt(i)
	return giuo
}

// Mutation returns the GoodInfoMutation object of the builder.
func (giuo *GoodInfoUpdateOne) Mutation() *GoodInfoMutation {
	return giuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (giuo *GoodInfoUpdateOne) Select(field string, fields ...string) *GoodInfoUpdateOne {
	giuo.fields = append([]string{field}, fields...)
	return giuo
}

// Save executes the query and returns the updated GoodInfo entity.
func (giuo *GoodInfoUpdateOne) Save(ctx context.Context) (*GoodInfo, error) {
	var (
		err  error
		node *GoodInfo
	)
	giuo.defaults()
	if len(giuo.hooks) == 0 {
		if err = giuo.check(); err != nil {
			return nil, err
		}
		node, err = giuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GoodInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = giuo.check(); err != nil {
				return nil, err
			}
			giuo.mutation = mutation
			node, err = giuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(giuo.hooks) - 1; i >= 0; i-- {
			if giuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = giuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, giuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (giuo *GoodInfoUpdateOne) SaveX(ctx context.Context) *GoodInfo {
	node, err := giuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (giuo *GoodInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := giuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (giuo *GoodInfoUpdateOne) ExecX(ctx context.Context) {
	if err := giuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (giuo *GoodInfoUpdateOne) defaults() {
	if _, ok := giuo.mutation.UpdateAt(); !ok {
		v := goodinfo.UpdateDefaultUpdateAt()
		giuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (giuo *GoodInfoUpdateOne) check() error {
	if v, ok := giuo.mutation.GasPrice(); ok {
		if err := goodinfo.GasPriceValidator(v); err != nil {
			return &ValidationError{Name: "gas_price", err: fmt.Errorf("ent: validator failed for field \"gas_price\": %w", err)}
		}
	}
	if v, ok := giuo.mutation.UnitPower(); ok {
		if err := goodinfo.UnitPowerValidator(v); err != nil {
			return &ValidationError{Name: "unit_power", err: fmt.Errorf("ent: validator failed for field \"unit_power\": %w", err)}
		}
	}
	if v, ok := giuo.mutation.DurationDays(); ok {
		if err := goodinfo.DurationDaysValidator(v); err != nil {
			return &ValidationError{Name: "duration_days", err: fmt.Errorf("ent: validator failed for field \"duration_days\": %w", err)}
		}
	}
	if v, ok := giuo.mutation.Price(); ok {
		if err := goodinfo.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := giuo.mutation.BenefitType(); ok {
		if err := goodinfo.BenefitTypeValidator(v); err != nil {
			return &ValidationError{Name: "benefit_type", err: fmt.Errorf("ent: validator failed for field \"benefit_type\": %w", err)}
		}
	}
	if v, ok := giuo.mutation.Total(); ok {
		if err := goodinfo.TotalValidator(v); err != nil {
			return &ValidationError{Name: "total", err: fmt.Errorf("ent: validator failed for field \"total\": %w", err)}
		}
	}
	return nil
}

func (giuo *GoodInfoUpdateOne) sqlSave(ctx context.Context) (_node *GoodInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   goodinfo.Table,
			Columns: goodinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodinfo.FieldID,
			},
		},
	}
	id, ok := giuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing GoodInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := giuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goodinfo.FieldID)
		for _, f := range fields {
			if !goodinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goodinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := giuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := giuo.mutation.DeviceInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldDeviceInfoID,
		})
	}
	if value, ok := giuo.mutation.GasPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldGasPrice,
		})
	}
	if value, ok := giuo.mutation.AddedGasPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldGasPrice,
		})
	}
	if value, ok := giuo.mutation.SeparateGasFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodinfo.FieldSeparateGasFee,
		})
	}
	if value, ok := giuo.mutation.UnitPower(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldUnitPower,
		})
	}
	if value, ok := giuo.mutation.AddedUnitPower(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldUnitPower,
		})
	}
	if value, ok := giuo.mutation.DurationDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDurationDays,
		})
	}
	if value, ok := giuo.mutation.AddedDurationDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDurationDays,
		})
	}
	if value, ok := giuo.mutation.CoinInfoID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldCoinInfoID,
		})
	}
	if value, ok := giuo.mutation.Actuals(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodinfo.FieldActuals,
		})
	}
	if value, ok := giuo.mutation.DeliveryAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDeliveryAt,
		})
	}
	if value, ok := giuo.mutation.AddedDeliveryAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldDeliveryAt,
		})
	}
	if value, ok := giuo.mutation.InheritFromGoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldInheritFromGoodID,
		})
	}
	if value, ok := giuo.mutation.VendorLocationID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: goodinfo.FieldVendorLocationID,
		})
	}
	if value, ok := giuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldPrice,
		})
	}
	if value, ok := giuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldPrice,
		})
	}
	if value, ok := giuo.mutation.BenefitType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: goodinfo.FieldBenefitType,
		})
	}
	if value, ok := giuo.mutation.Classic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: goodinfo.FieldClassic,
		})
	}
	if value, ok := giuo.mutation.SupportCoinTypeIds(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: goodinfo.FieldSupportCoinTypeIds,
		})
	}
	if value, ok := giuo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldTotal,
		})
	}
	if value, ok := giuo.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: goodinfo.FieldTotal,
		})
	}
	if value, ok := giuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldCreateAt,
		})
	}
	if value, ok := giuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldCreateAt,
		})
	}
	if value, ok := giuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldUpdateAt,
		})
	}
	if value, ok := giuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldUpdateAt,
		})
	}
	if value, ok := giuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldDeleteAt,
		})
	}
	if value, ok := giuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: goodinfo.FieldDeleteAt,
		})
	}
	_node = &GoodInfo{config: giuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, giuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goodinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
